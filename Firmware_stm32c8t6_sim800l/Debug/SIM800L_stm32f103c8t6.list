
SIM800L_stm32f103c8t6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007204  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000348  08007310  08007310  00017310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007658  08007658  00020360  2**0
                  CONTENTS
  4 .ARM          00000000  08007658  08007658  00020360  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007658  08007658  00020360  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007658  08007658  00017658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800765c  0800765c  0001765c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000360  20000000  08007660  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bdc  20000360  080079c0  00020360  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000f3c  080079c0  00020f3c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020360  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012b8b  00000000  00000000  00020389  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002de4  00000000  00000000  00032f14  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c88  00000000  00000000  00035cf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b20  00000000  00000000  00036980  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016e92  00000000  00000000  000374a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cf66  00000000  00000000  0004e332  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006fcaf  00000000  00000000  0005b298  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000caf47  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003674  00000000  00000000  000cafc4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000360 	.word	0x20000360
 8000128:	00000000 	.word	0x00000000
 800012c:	080072f8 	.word	0x080072f8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000364 	.word	0x20000364
 8000148:	080072f8 	.word	0x080072f8

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000174:	4b08      	ldr	r3, [pc, #32]	; (8000198 <HAL_Init+0x28>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a07      	ldr	r2, [pc, #28]	; (8000198 <HAL_Init+0x28>)
 800017a:	f043 0310 	orr.w	r3, r3, #16
 800017e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000180:	2003      	movs	r0, #3
 8000182:	f000 f945 	bl	8000410 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000186:	2000      	movs	r0, #0
 8000188:	f000 f808 	bl	800019c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800018c:	f005 fe60 	bl	8005e50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000190:	2300      	movs	r3, #0
}
 8000192:	4618      	mov	r0, r3
 8000194:	bd80      	pop	{r7, pc}
 8000196:	bf00      	nop
 8000198:	40022000 	.word	0x40022000

0800019c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	b082      	sub	sp, #8
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001a4:	4b12      	ldr	r3, [pc, #72]	; (80001f0 <HAL_InitTick+0x54>)
 80001a6:	681a      	ldr	r2, [r3, #0]
 80001a8:	4b12      	ldr	r3, [pc, #72]	; (80001f4 <HAL_InitTick+0x58>)
 80001aa:	781b      	ldrb	r3, [r3, #0]
 80001ac:	4619      	mov	r1, r3
 80001ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80001b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80001ba:	4618      	mov	r0, r3
 80001bc:	f000 f95d 	bl	800047a <HAL_SYSTICK_Config>
 80001c0:	4603      	mov	r3, r0
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d001      	beq.n	80001ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001c6:	2301      	movs	r3, #1
 80001c8:	e00e      	b.n	80001e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	2b0f      	cmp	r3, #15
 80001ce:	d80a      	bhi.n	80001e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001d0:	2200      	movs	r2, #0
 80001d2:	6879      	ldr	r1, [r7, #4]
 80001d4:	f04f 30ff 	mov.w	r0, #4294967295
 80001d8:	f000 f925 	bl	8000426 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001dc:	4a06      	ldr	r2, [pc, #24]	; (80001f8 <HAL_InitTick+0x5c>)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001e2:	2300      	movs	r3, #0
 80001e4:	e000      	b.n	80001e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001e6:	2301      	movs	r3, #1
}
 80001e8:	4618      	mov	r0, r3
 80001ea:	3708      	adds	r7, #8
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bd80      	pop	{r7, pc}
 80001f0:	20000108 	.word	0x20000108
 80001f4:	20000004 	.word	0x20000004
 80001f8:	20000000 	.word	0x20000000

080001fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000200:	4b05      	ldr	r3, [pc, #20]	; (8000218 <HAL_IncTick+0x1c>)
 8000202:	781b      	ldrb	r3, [r3, #0]
 8000204:	461a      	mov	r2, r3
 8000206:	4b05      	ldr	r3, [pc, #20]	; (800021c <HAL_IncTick+0x20>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	4413      	add	r3, r2
 800020c:	4a03      	ldr	r2, [pc, #12]	; (800021c <HAL_IncTick+0x20>)
 800020e:	6013      	str	r3, [r2, #0]
}
 8000210:	bf00      	nop
 8000212:	46bd      	mov	sp, r7
 8000214:	bc80      	pop	{r7}
 8000216:	4770      	bx	lr
 8000218:	20000004 	.word	0x20000004
 800021c:	20000674 	.word	0x20000674

08000220 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000220:	b480      	push	{r7}
 8000222:	af00      	add	r7, sp, #0
  return uwTick;
 8000224:	4b02      	ldr	r3, [pc, #8]	; (8000230 <HAL_GetTick+0x10>)
 8000226:	681b      	ldr	r3, [r3, #0]
}
 8000228:	4618      	mov	r0, r3
 800022a:	46bd      	mov	sp, r7
 800022c:	bc80      	pop	{r7}
 800022e:	4770      	bx	lr
 8000230:	20000674 	.word	0x20000674

08000234 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800023c:	f7ff fff0 	bl	8000220 <HAL_GetTick>
 8000240:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000246:	68fb      	ldr	r3, [r7, #12]
 8000248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800024c:	d005      	beq.n	800025a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800024e:	4b09      	ldr	r3, [pc, #36]	; (8000274 <HAL_Delay+0x40>)
 8000250:	781b      	ldrb	r3, [r3, #0]
 8000252:	461a      	mov	r2, r3
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	4413      	add	r3, r2
 8000258:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800025a:	bf00      	nop
 800025c:	f7ff ffe0 	bl	8000220 <HAL_GetTick>
 8000260:	4602      	mov	r2, r0
 8000262:	68bb      	ldr	r3, [r7, #8]
 8000264:	1ad3      	subs	r3, r2, r3
 8000266:	68fa      	ldr	r2, [r7, #12]
 8000268:	429a      	cmp	r2, r3
 800026a:	d8f7      	bhi.n	800025c <HAL_Delay+0x28>
  {
  }
}
 800026c:	bf00      	nop
 800026e:	3710      	adds	r7, #16
 8000270:	46bd      	mov	sp, r7
 8000272:	bd80      	pop	{r7, pc}
 8000274:	20000004 	.word	0x20000004

08000278 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000278:	b480      	push	{r7}
 800027a:	b085      	sub	sp, #20
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	f003 0307 	and.w	r3, r3, #7
 8000286:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000288:	4b0c      	ldr	r3, [pc, #48]	; (80002bc <__NVIC_SetPriorityGrouping+0x44>)
 800028a:	68db      	ldr	r3, [r3, #12]
 800028c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800028e:	68ba      	ldr	r2, [r7, #8]
 8000290:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000294:	4013      	ands	r3, r2
 8000296:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800029c:	68bb      	ldr	r3, [r7, #8]
 800029e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80002a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80002a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80002aa:	4a04      	ldr	r2, [pc, #16]	; (80002bc <__NVIC_SetPriorityGrouping+0x44>)
 80002ac:	68bb      	ldr	r3, [r7, #8]
 80002ae:	60d3      	str	r3, [r2, #12]
}
 80002b0:	bf00      	nop
 80002b2:	3714      	adds	r7, #20
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bc80      	pop	{r7}
 80002b8:	4770      	bx	lr
 80002ba:	bf00      	nop
 80002bc:	e000ed00 	.word	0xe000ed00

080002c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002c4:	4b04      	ldr	r3, [pc, #16]	; (80002d8 <__NVIC_GetPriorityGrouping+0x18>)
 80002c6:	68db      	ldr	r3, [r3, #12]
 80002c8:	0a1b      	lsrs	r3, r3, #8
 80002ca:	f003 0307 	and.w	r3, r3, #7
}
 80002ce:	4618      	mov	r0, r3
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bc80      	pop	{r7}
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	e000ed00 	.word	0xe000ed00

080002dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002dc:	b480      	push	{r7}
 80002de:	b083      	sub	sp, #12
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	4603      	mov	r3, r0
 80002e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	db0b      	blt.n	8000306 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002ee:	79fb      	ldrb	r3, [r7, #7]
 80002f0:	f003 021f 	and.w	r2, r3, #31
 80002f4:	4906      	ldr	r1, [pc, #24]	; (8000310 <__NVIC_EnableIRQ+0x34>)
 80002f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002fa:	095b      	lsrs	r3, r3, #5
 80002fc:	2001      	movs	r0, #1
 80002fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000306:	bf00      	nop
 8000308:	370c      	adds	r7, #12
 800030a:	46bd      	mov	sp, r7
 800030c:	bc80      	pop	{r7}
 800030e:	4770      	bx	lr
 8000310:	e000e100 	.word	0xe000e100

08000314 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000314:	b480      	push	{r7}
 8000316:	b083      	sub	sp, #12
 8000318:	af00      	add	r7, sp, #0
 800031a:	4603      	mov	r3, r0
 800031c:	6039      	str	r1, [r7, #0]
 800031e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000324:	2b00      	cmp	r3, #0
 8000326:	db0a      	blt.n	800033e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000328:	683b      	ldr	r3, [r7, #0]
 800032a:	b2da      	uxtb	r2, r3
 800032c:	490c      	ldr	r1, [pc, #48]	; (8000360 <__NVIC_SetPriority+0x4c>)
 800032e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000332:	0112      	lsls	r2, r2, #4
 8000334:	b2d2      	uxtb	r2, r2
 8000336:	440b      	add	r3, r1
 8000338:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800033c:	e00a      	b.n	8000354 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800033e:	683b      	ldr	r3, [r7, #0]
 8000340:	b2da      	uxtb	r2, r3
 8000342:	4908      	ldr	r1, [pc, #32]	; (8000364 <__NVIC_SetPriority+0x50>)
 8000344:	79fb      	ldrb	r3, [r7, #7]
 8000346:	f003 030f 	and.w	r3, r3, #15
 800034a:	3b04      	subs	r3, #4
 800034c:	0112      	lsls	r2, r2, #4
 800034e:	b2d2      	uxtb	r2, r2
 8000350:	440b      	add	r3, r1
 8000352:	761a      	strb	r2, [r3, #24]
}
 8000354:	bf00      	nop
 8000356:	370c      	adds	r7, #12
 8000358:	46bd      	mov	sp, r7
 800035a:	bc80      	pop	{r7}
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop
 8000360:	e000e100 	.word	0xe000e100
 8000364:	e000ed00 	.word	0xe000ed00

08000368 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000368:	b480      	push	{r7}
 800036a:	b089      	sub	sp, #36	; 0x24
 800036c:	af00      	add	r7, sp, #0
 800036e:	60f8      	str	r0, [r7, #12]
 8000370:	60b9      	str	r1, [r7, #8]
 8000372:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	f003 0307 	and.w	r3, r3, #7
 800037a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800037c:	69fb      	ldr	r3, [r7, #28]
 800037e:	f1c3 0307 	rsb	r3, r3, #7
 8000382:	2b04      	cmp	r3, #4
 8000384:	bf28      	it	cs
 8000386:	2304      	movcs	r3, #4
 8000388:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800038a:	69fb      	ldr	r3, [r7, #28]
 800038c:	3304      	adds	r3, #4
 800038e:	2b06      	cmp	r3, #6
 8000390:	d902      	bls.n	8000398 <NVIC_EncodePriority+0x30>
 8000392:	69fb      	ldr	r3, [r7, #28]
 8000394:	3b03      	subs	r3, #3
 8000396:	e000      	b.n	800039a <NVIC_EncodePriority+0x32>
 8000398:	2300      	movs	r3, #0
 800039a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800039c:	f04f 32ff 	mov.w	r2, #4294967295
 80003a0:	69bb      	ldr	r3, [r7, #24]
 80003a2:	fa02 f303 	lsl.w	r3, r2, r3
 80003a6:	43da      	mvns	r2, r3
 80003a8:	68bb      	ldr	r3, [r7, #8]
 80003aa:	401a      	ands	r2, r3
 80003ac:	697b      	ldr	r3, [r7, #20]
 80003ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80003b0:	f04f 31ff 	mov.w	r1, #4294967295
 80003b4:	697b      	ldr	r3, [r7, #20]
 80003b6:	fa01 f303 	lsl.w	r3, r1, r3
 80003ba:	43d9      	mvns	r1, r3
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003c0:	4313      	orrs	r3, r2
         );
}
 80003c2:	4618      	mov	r0, r3
 80003c4:	3724      	adds	r7, #36	; 0x24
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bc80      	pop	{r7}
 80003ca:	4770      	bx	lr

080003cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b082      	sub	sp, #8
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	3b01      	subs	r3, #1
 80003d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80003dc:	d301      	bcc.n	80003e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003de:	2301      	movs	r3, #1
 80003e0:	e00f      	b.n	8000402 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003e2:	4a0a      	ldr	r2, [pc, #40]	; (800040c <SysTick_Config+0x40>)
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	3b01      	subs	r3, #1
 80003e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003ea:	210f      	movs	r1, #15
 80003ec:	f04f 30ff 	mov.w	r0, #4294967295
 80003f0:	f7ff ff90 	bl	8000314 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003f4:	4b05      	ldr	r3, [pc, #20]	; (800040c <SysTick_Config+0x40>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003fa:	4b04      	ldr	r3, [pc, #16]	; (800040c <SysTick_Config+0x40>)
 80003fc:	2207      	movs	r2, #7
 80003fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000400:	2300      	movs	r3, #0
}
 8000402:	4618      	mov	r0, r3
 8000404:	3708      	adds	r7, #8
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	e000e010 	.word	0xe000e010

08000410 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000418:	6878      	ldr	r0, [r7, #4]
 800041a:	f7ff ff2d 	bl	8000278 <__NVIC_SetPriorityGrouping>
}
 800041e:	bf00      	nop
 8000420:	3708      	adds	r7, #8
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}

08000426 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000426:	b580      	push	{r7, lr}
 8000428:	b086      	sub	sp, #24
 800042a:	af00      	add	r7, sp, #0
 800042c:	4603      	mov	r3, r0
 800042e:	60b9      	str	r1, [r7, #8]
 8000430:	607a      	str	r2, [r7, #4]
 8000432:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000434:	2300      	movs	r3, #0
 8000436:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000438:	f7ff ff42 	bl	80002c0 <__NVIC_GetPriorityGrouping>
 800043c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800043e:	687a      	ldr	r2, [r7, #4]
 8000440:	68b9      	ldr	r1, [r7, #8]
 8000442:	6978      	ldr	r0, [r7, #20]
 8000444:	f7ff ff90 	bl	8000368 <NVIC_EncodePriority>
 8000448:	4602      	mov	r2, r0
 800044a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800044e:	4611      	mov	r1, r2
 8000450:	4618      	mov	r0, r3
 8000452:	f7ff ff5f 	bl	8000314 <__NVIC_SetPriority>
}
 8000456:	bf00      	nop
 8000458:	3718      	adds	r7, #24
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}

0800045e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800045e:	b580      	push	{r7, lr}
 8000460:	b082      	sub	sp, #8
 8000462:	af00      	add	r7, sp, #0
 8000464:	4603      	mov	r3, r0
 8000466:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000468:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800046c:	4618      	mov	r0, r3
 800046e:	f7ff ff35 	bl	80002dc <__NVIC_EnableIRQ>
}
 8000472:	bf00      	nop
 8000474:	3708      	adds	r7, #8
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}

0800047a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800047a:	b580      	push	{r7, lr}
 800047c:	b082      	sub	sp, #8
 800047e:	af00      	add	r7, sp, #0
 8000480:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000482:	6878      	ldr	r0, [r7, #4]
 8000484:	f7ff ffa2 	bl	80003cc <SysTick_Config>
 8000488:	4603      	mov	r3, r0
}
 800048a:	4618      	mov	r0, r3
 800048c:	3708      	adds	r7, #8
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
	...

08000494 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000494:	b480      	push	{r7}
 8000496:	b08b      	sub	sp, #44	; 0x2c
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
 800049c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800049e:	2300      	movs	r3, #0
 80004a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80004a2:	2300      	movs	r3, #0
 80004a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80004a6:	e127      	b.n	80006f8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80004a8:	2201      	movs	r2, #1
 80004aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004ac:	fa02 f303 	lsl.w	r3, r2, r3
 80004b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80004b2:	683b      	ldr	r3, [r7, #0]
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	69fa      	ldr	r2, [r7, #28]
 80004b8:	4013      	ands	r3, r2
 80004ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80004bc:	69ba      	ldr	r2, [r7, #24]
 80004be:	69fb      	ldr	r3, [r7, #28]
 80004c0:	429a      	cmp	r2, r3
 80004c2:	f040 8116 	bne.w	80006f2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80004c6:	683b      	ldr	r3, [r7, #0]
 80004c8:	685b      	ldr	r3, [r3, #4]
 80004ca:	2b12      	cmp	r3, #18
 80004cc:	d034      	beq.n	8000538 <HAL_GPIO_Init+0xa4>
 80004ce:	2b12      	cmp	r3, #18
 80004d0:	d80d      	bhi.n	80004ee <HAL_GPIO_Init+0x5a>
 80004d2:	2b02      	cmp	r3, #2
 80004d4:	d02b      	beq.n	800052e <HAL_GPIO_Init+0x9a>
 80004d6:	2b02      	cmp	r3, #2
 80004d8:	d804      	bhi.n	80004e4 <HAL_GPIO_Init+0x50>
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d031      	beq.n	8000542 <HAL_GPIO_Init+0xae>
 80004de:	2b01      	cmp	r3, #1
 80004e0:	d01c      	beq.n	800051c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80004e2:	e048      	b.n	8000576 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80004e4:	2b03      	cmp	r3, #3
 80004e6:	d043      	beq.n	8000570 <HAL_GPIO_Init+0xdc>
 80004e8:	2b11      	cmp	r3, #17
 80004ea:	d01b      	beq.n	8000524 <HAL_GPIO_Init+0x90>
          break;
 80004ec:	e043      	b.n	8000576 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80004ee:	4a89      	ldr	r2, [pc, #548]	; (8000714 <HAL_GPIO_Init+0x280>)
 80004f0:	4293      	cmp	r3, r2
 80004f2:	d026      	beq.n	8000542 <HAL_GPIO_Init+0xae>
 80004f4:	4a87      	ldr	r2, [pc, #540]	; (8000714 <HAL_GPIO_Init+0x280>)
 80004f6:	4293      	cmp	r3, r2
 80004f8:	d806      	bhi.n	8000508 <HAL_GPIO_Init+0x74>
 80004fa:	4a87      	ldr	r2, [pc, #540]	; (8000718 <HAL_GPIO_Init+0x284>)
 80004fc:	4293      	cmp	r3, r2
 80004fe:	d020      	beq.n	8000542 <HAL_GPIO_Init+0xae>
 8000500:	4a86      	ldr	r2, [pc, #536]	; (800071c <HAL_GPIO_Init+0x288>)
 8000502:	4293      	cmp	r3, r2
 8000504:	d01d      	beq.n	8000542 <HAL_GPIO_Init+0xae>
          break;
 8000506:	e036      	b.n	8000576 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000508:	4a85      	ldr	r2, [pc, #532]	; (8000720 <HAL_GPIO_Init+0x28c>)
 800050a:	4293      	cmp	r3, r2
 800050c:	d019      	beq.n	8000542 <HAL_GPIO_Init+0xae>
 800050e:	4a85      	ldr	r2, [pc, #532]	; (8000724 <HAL_GPIO_Init+0x290>)
 8000510:	4293      	cmp	r3, r2
 8000512:	d016      	beq.n	8000542 <HAL_GPIO_Init+0xae>
 8000514:	4a84      	ldr	r2, [pc, #528]	; (8000728 <HAL_GPIO_Init+0x294>)
 8000516:	4293      	cmp	r3, r2
 8000518:	d013      	beq.n	8000542 <HAL_GPIO_Init+0xae>
          break;
 800051a:	e02c      	b.n	8000576 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800051c:	683b      	ldr	r3, [r7, #0]
 800051e:	68db      	ldr	r3, [r3, #12]
 8000520:	623b      	str	r3, [r7, #32]
          break;
 8000522:	e028      	b.n	8000576 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	68db      	ldr	r3, [r3, #12]
 8000528:	3304      	adds	r3, #4
 800052a:	623b      	str	r3, [r7, #32]
          break;
 800052c:	e023      	b.n	8000576 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800052e:	683b      	ldr	r3, [r7, #0]
 8000530:	68db      	ldr	r3, [r3, #12]
 8000532:	3308      	adds	r3, #8
 8000534:	623b      	str	r3, [r7, #32]
          break;
 8000536:	e01e      	b.n	8000576 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	68db      	ldr	r3, [r3, #12]
 800053c:	330c      	adds	r3, #12
 800053e:	623b      	str	r3, [r7, #32]
          break;
 8000540:	e019      	b.n	8000576 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000542:	683b      	ldr	r3, [r7, #0]
 8000544:	689b      	ldr	r3, [r3, #8]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d102      	bne.n	8000550 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800054a:	2304      	movs	r3, #4
 800054c:	623b      	str	r3, [r7, #32]
          break;
 800054e:	e012      	b.n	8000576 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	689b      	ldr	r3, [r3, #8]
 8000554:	2b01      	cmp	r3, #1
 8000556:	d105      	bne.n	8000564 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000558:	2308      	movs	r3, #8
 800055a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	69fa      	ldr	r2, [r7, #28]
 8000560:	611a      	str	r2, [r3, #16]
          break;
 8000562:	e008      	b.n	8000576 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000564:	2308      	movs	r3, #8
 8000566:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	69fa      	ldr	r2, [r7, #28]
 800056c:	615a      	str	r2, [r3, #20]
          break;
 800056e:	e002      	b.n	8000576 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000570:	2300      	movs	r3, #0
 8000572:	623b      	str	r3, [r7, #32]
          break;
 8000574:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000576:	69bb      	ldr	r3, [r7, #24]
 8000578:	2bff      	cmp	r3, #255	; 0xff
 800057a:	d801      	bhi.n	8000580 <HAL_GPIO_Init+0xec>
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	e001      	b.n	8000584 <HAL_GPIO_Init+0xf0>
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	3304      	adds	r3, #4
 8000584:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000586:	69bb      	ldr	r3, [r7, #24]
 8000588:	2bff      	cmp	r3, #255	; 0xff
 800058a:	d802      	bhi.n	8000592 <HAL_GPIO_Init+0xfe>
 800058c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800058e:	009b      	lsls	r3, r3, #2
 8000590:	e002      	b.n	8000598 <HAL_GPIO_Init+0x104>
 8000592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000594:	3b08      	subs	r3, #8
 8000596:	009b      	lsls	r3, r3, #2
 8000598:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800059a:	697b      	ldr	r3, [r7, #20]
 800059c:	681a      	ldr	r2, [r3, #0]
 800059e:	210f      	movs	r1, #15
 80005a0:	693b      	ldr	r3, [r7, #16]
 80005a2:	fa01 f303 	lsl.w	r3, r1, r3
 80005a6:	43db      	mvns	r3, r3
 80005a8:	401a      	ands	r2, r3
 80005aa:	6a39      	ldr	r1, [r7, #32]
 80005ac:	693b      	ldr	r3, [r7, #16]
 80005ae:	fa01 f303 	lsl.w	r3, r1, r3
 80005b2:	431a      	orrs	r2, r3
 80005b4:	697b      	ldr	r3, [r7, #20]
 80005b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80005b8:	683b      	ldr	r3, [r7, #0]
 80005ba:	685b      	ldr	r3, [r3, #4]
 80005bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	f000 8096 	beq.w	80006f2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80005c6:	4b59      	ldr	r3, [pc, #356]	; (800072c <HAL_GPIO_Init+0x298>)
 80005c8:	699b      	ldr	r3, [r3, #24]
 80005ca:	4a58      	ldr	r2, [pc, #352]	; (800072c <HAL_GPIO_Init+0x298>)
 80005cc:	f043 0301 	orr.w	r3, r3, #1
 80005d0:	6193      	str	r3, [r2, #24]
 80005d2:	4b56      	ldr	r3, [pc, #344]	; (800072c <HAL_GPIO_Init+0x298>)
 80005d4:	699b      	ldr	r3, [r3, #24]
 80005d6:	f003 0301 	and.w	r3, r3, #1
 80005da:	60bb      	str	r3, [r7, #8]
 80005dc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80005de:	4a54      	ldr	r2, [pc, #336]	; (8000730 <HAL_GPIO_Init+0x29c>)
 80005e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005e2:	089b      	lsrs	r3, r3, #2
 80005e4:	3302      	adds	r3, #2
 80005e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005ea:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80005ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005ee:	f003 0303 	and.w	r3, r3, #3
 80005f2:	009b      	lsls	r3, r3, #2
 80005f4:	220f      	movs	r2, #15
 80005f6:	fa02 f303 	lsl.w	r3, r2, r3
 80005fa:	43db      	mvns	r3, r3
 80005fc:	68fa      	ldr	r2, [r7, #12]
 80005fe:	4013      	ands	r3, r2
 8000600:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4a4b      	ldr	r2, [pc, #300]	; (8000734 <HAL_GPIO_Init+0x2a0>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d013      	beq.n	8000632 <HAL_GPIO_Init+0x19e>
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	4a4a      	ldr	r2, [pc, #296]	; (8000738 <HAL_GPIO_Init+0x2a4>)
 800060e:	4293      	cmp	r3, r2
 8000610:	d00d      	beq.n	800062e <HAL_GPIO_Init+0x19a>
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	4a49      	ldr	r2, [pc, #292]	; (800073c <HAL_GPIO_Init+0x2a8>)
 8000616:	4293      	cmp	r3, r2
 8000618:	d007      	beq.n	800062a <HAL_GPIO_Init+0x196>
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	4a48      	ldr	r2, [pc, #288]	; (8000740 <HAL_GPIO_Init+0x2ac>)
 800061e:	4293      	cmp	r3, r2
 8000620:	d101      	bne.n	8000626 <HAL_GPIO_Init+0x192>
 8000622:	2303      	movs	r3, #3
 8000624:	e006      	b.n	8000634 <HAL_GPIO_Init+0x1a0>
 8000626:	2304      	movs	r3, #4
 8000628:	e004      	b.n	8000634 <HAL_GPIO_Init+0x1a0>
 800062a:	2302      	movs	r3, #2
 800062c:	e002      	b.n	8000634 <HAL_GPIO_Init+0x1a0>
 800062e:	2301      	movs	r3, #1
 8000630:	e000      	b.n	8000634 <HAL_GPIO_Init+0x1a0>
 8000632:	2300      	movs	r3, #0
 8000634:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000636:	f002 0203 	and.w	r2, r2, #3
 800063a:	0092      	lsls	r2, r2, #2
 800063c:	4093      	lsls	r3, r2
 800063e:	68fa      	ldr	r2, [r7, #12]
 8000640:	4313      	orrs	r3, r2
 8000642:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000644:	493a      	ldr	r1, [pc, #232]	; (8000730 <HAL_GPIO_Init+0x29c>)
 8000646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000648:	089b      	lsrs	r3, r3, #2
 800064a:	3302      	adds	r3, #2
 800064c:	68fa      	ldr	r2, [r7, #12]
 800064e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	685b      	ldr	r3, [r3, #4]
 8000656:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800065a:	2b00      	cmp	r3, #0
 800065c:	d006      	beq.n	800066c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800065e:	4b39      	ldr	r3, [pc, #228]	; (8000744 <HAL_GPIO_Init+0x2b0>)
 8000660:	681a      	ldr	r2, [r3, #0]
 8000662:	4938      	ldr	r1, [pc, #224]	; (8000744 <HAL_GPIO_Init+0x2b0>)
 8000664:	69bb      	ldr	r3, [r7, #24]
 8000666:	4313      	orrs	r3, r2
 8000668:	600b      	str	r3, [r1, #0]
 800066a:	e006      	b.n	800067a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800066c:	4b35      	ldr	r3, [pc, #212]	; (8000744 <HAL_GPIO_Init+0x2b0>)
 800066e:	681a      	ldr	r2, [r3, #0]
 8000670:	69bb      	ldr	r3, [r7, #24]
 8000672:	43db      	mvns	r3, r3
 8000674:	4933      	ldr	r1, [pc, #204]	; (8000744 <HAL_GPIO_Init+0x2b0>)
 8000676:	4013      	ands	r3, r2
 8000678:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	685b      	ldr	r3, [r3, #4]
 800067e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000682:	2b00      	cmp	r3, #0
 8000684:	d006      	beq.n	8000694 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000686:	4b2f      	ldr	r3, [pc, #188]	; (8000744 <HAL_GPIO_Init+0x2b0>)
 8000688:	685a      	ldr	r2, [r3, #4]
 800068a:	492e      	ldr	r1, [pc, #184]	; (8000744 <HAL_GPIO_Init+0x2b0>)
 800068c:	69bb      	ldr	r3, [r7, #24]
 800068e:	4313      	orrs	r3, r2
 8000690:	604b      	str	r3, [r1, #4]
 8000692:	e006      	b.n	80006a2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000694:	4b2b      	ldr	r3, [pc, #172]	; (8000744 <HAL_GPIO_Init+0x2b0>)
 8000696:	685a      	ldr	r2, [r3, #4]
 8000698:	69bb      	ldr	r3, [r7, #24]
 800069a:	43db      	mvns	r3, r3
 800069c:	4929      	ldr	r1, [pc, #164]	; (8000744 <HAL_GPIO_Init+0x2b0>)
 800069e:	4013      	ands	r3, r2
 80006a0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	685b      	ldr	r3, [r3, #4]
 80006a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d006      	beq.n	80006bc <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80006ae:	4b25      	ldr	r3, [pc, #148]	; (8000744 <HAL_GPIO_Init+0x2b0>)
 80006b0:	689a      	ldr	r2, [r3, #8]
 80006b2:	4924      	ldr	r1, [pc, #144]	; (8000744 <HAL_GPIO_Init+0x2b0>)
 80006b4:	69bb      	ldr	r3, [r7, #24]
 80006b6:	4313      	orrs	r3, r2
 80006b8:	608b      	str	r3, [r1, #8]
 80006ba:	e006      	b.n	80006ca <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80006bc:	4b21      	ldr	r3, [pc, #132]	; (8000744 <HAL_GPIO_Init+0x2b0>)
 80006be:	689a      	ldr	r2, [r3, #8]
 80006c0:	69bb      	ldr	r3, [r7, #24]
 80006c2:	43db      	mvns	r3, r3
 80006c4:	491f      	ldr	r1, [pc, #124]	; (8000744 <HAL_GPIO_Init+0x2b0>)
 80006c6:	4013      	ands	r3, r2
 80006c8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	685b      	ldr	r3, [r3, #4]
 80006ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d006      	beq.n	80006e4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80006d6:	4b1b      	ldr	r3, [pc, #108]	; (8000744 <HAL_GPIO_Init+0x2b0>)
 80006d8:	68da      	ldr	r2, [r3, #12]
 80006da:	491a      	ldr	r1, [pc, #104]	; (8000744 <HAL_GPIO_Init+0x2b0>)
 80006dc:	69bb      	ldr	r3, [r7, #24]
 80006de:	4313      	orrs	r3, r2
 80006e0:	60cb      	str	r3, [r1, #12]
 80006e2:	e006      	b.n	80006f2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80006e4:	4b17      	ldr	r3, [pc, #92]	; (8000744 <HAL_GPIO_Init+0x2b0>)
 80006e6:	68da      	ldr	r2, [r3, #12]
 80006e8:	69bb      	ldr	r3, [r7, #24]
 80006ea:	43db      	mvns	r3, r3
 80006ec:	4915      	ldr	r1, [pc, #84]	; (8000744 <HAL_GPIO_Init+0x2b0>)
 80006ee:	4013      	ands	r3, r2
 80006f0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80006f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006f4:	3301      	adds	r3, #1
 80006f6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80006f8:	683b      	ldr	r3, [r7, #0]
 80006fa:	681a      	ldr	r2, [r3, #0]
 80006fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006fe:	fa22 f303 	lsr.w	r3, r2, r3
 8000702:	2b00      	cmp	r3, #0
 8000704:	f47f aed0 	bne.w	80004a8 <HAL_GPIO_Init+0x14>
  }
}
 8000708:	bf00      	nop
 800070a:	372c      	adds	r7, #44	; 0x2c
 800070c:	46bd      	mov	sp, r7
 800070e:	bc80      	pop	{r7}
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	10210000 	.word	0x10210000
 8000718:	10110000 	.word	0x10110000
 800071c:	10120000 	.word	0x10120000
 8000720:	10310000 	.word	0x10310000
 8000724:	10320000 	.word	0x10320000
 8000728:	10220000 	.word	0x10220000
 800072c:	40021000 	.word	0x40021000
 8000730:	40010000 	.word	0x40010000
 8000734:	40010800 	.word	0x40010800
 8000738:	40010c00 	.word	0x40010c00
 800073c:	40011000 	.word	0x40011000
 8000740:	40011400 	.word	0x40011400
 8000744:	40010400 	.word	0x40010400

08000748 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000748:	b480      	push	{r7}
 800074a:	b085      	sub	sp, #20
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
 8000750:	460b      	mov	r3, r1
 8000752:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	689a      	ldr	r2, [r3, #8]
 8000758:	887b      	ldrh	r3, [r7, #2]
 800075a:	4013      	ands	r3, r2
 800075c:	2b00      	cmp	r3, #0
 800075e:	d002      	beq.n	8000766 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000760:	2301      	movs	r3, #1
 8000762:	73fb      	strb	r3, [r7, #15]
 8000764:	e001      	b.n	800076a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000766:	2300      	movs	r3, #0
 8000768:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800076a:	7bfb      	ldrb	r3, [r7, #15]
}
 800076c:	4618      	mov	r0, r3
 800076e:	3714      	adds	r7, #20
 8000770:	46bd      	mov	sp, r7
 8000772:	bc80      	pop	{r7}
 8000774:	4770      	bx	lr

08000776 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000776:	b480      	push	{r7}
 8000778:	b083      	sub	sp, #12
 800077a:	af00      	add	r7, sp, #0
 800077c:	6078      	str	r0, [r7, #4]
 800077e:	460b      	mov	r3, r1
 8000780:	807b      	strh	r3, [r7, #2]
 8000782:	4613      	mov	r3, r2
 8000784:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000786:	787b      	ldrb	r3, [r7, #1]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d003      	beq.n	8000794 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800078c:	887a      	ldrh	r2, [r7, #2]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000792:	e003      	b.n	800079c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000794:	887b      	ldrh	r3, [r7, #2]
 8000796:	041a      	lsls	r2, r3, #16
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	611a      	str	r2, [r3, #16]
}
 800079c:	bf00      	nop
 800079e:	370c      	adds	r7, #12
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bc80      	pop	{r7}
 80007a4:	4770      	bx	lr

080007a6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80007a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007a8:	b08b      	sub	sp, #44	; 0x2c
 80007aa:	af06      	add	r7, sp, #24
 80007ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d101      	bne.n	80007b8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80007b4:	2301      	movs	r3, #1
 80007b6:	e0d3      	b.n	8000960 <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d106      	bne.n	80007d2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	2200      	movs	r2, #0
 80007c8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80007cc:	6878      	ldr	r0, [r7, #4]
 80007ce:	f005 fc7d 	bl	80060cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	2203      	movs	r2, #3
 80007d6:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4618      	mov	r0, r3
 80007e0:	f001 fe59 	bl	8002496 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	603b      	str	r3, [r7, #0]
 80007ea:	687e      	ldr	r6, [r7, #4]
 80007ec:	466d      	mov	r5, sp
 80007ee:	f106 0410 	add.w	r4, r6, #16
 80007f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007f6:	6823      	ldr	r3, [r4, #0]
 80007f8:	602b      	str	r3, [r5, #0]
 80007fa:	1d33      	adds	r3, r6, #4
 80007fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80007fe:	6838      	ldr	r0, [r7, #0]
 8000800:	f001 fe22 	bl	8002448 <USB_CoreInit>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d005      	beq.n	8000816 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	2202      	movs	r2, #2
 800080e:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8000812:	2301      	movs	r3, #1
 8000814:	e0a4      	b.n	8000960 <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	2100      	movs	r1, #0
 800081c:	4618      	mov	r0, r3
 800081e:	f001 fe56 	bl	80024ce <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000822:	2300      	movs	r3, #0
 8000824:	73fb      	strb	r3, [r7, #15]
 8000826:	e035      	b.n	8000894 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000828:	7bfb      	ldrb	r3, [r7, #15]
 800082a:	687a      	ldr	r2, [r7, #4]
 800082c:	015b      	lsls	r3, r3, #5
 800082e:	4413      	add	r3, r2
 8000830:	3329      	adds	r3, #41	; 0x29
 8000832:	2201      	movs	r2, #1
 8000834:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000836:	7bfb      	ldrb	r3, [r7, #15]
 8000838:	687a      	ldr	r2, [r7, #4]
 800083a:	015b      	lsls	r3, r3, #5
 800083c:	4413      	add	r3, r2
 800083e:	3328      	adds	r3, #40	; 0x28
 8000840:	7bfa      	ldrb	r2, [r7, #15]
 8000842:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000844:	7bfb      	ldrb	r3, [r7, #15]
 8000846:	7bfa      	ldrb	r2, [r7, #15]
 8000848:	b291      	uxth	r1, r2
 800084a:	687a      	ldr	r2, [r7, #4]
 800084c:	015b      	lsls	r3, r3, #5
 800084e:	4413      	add	r3, r2
 8000850:	3336      	adds	r3, #54	; 0x36
 8000852:	460a      	mov	r2, r1
 8000854:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000856:	7bfb      	ldrb	r3, [r7, #15]
 8000858:	687a      	ldr	r2, [r7, #4]
 800085a:	015b      	lsls	r3, r3, #5
 800085c:	4413      	add	r3, r2
 800085e:	332b      	adds	r3, #43	; 0x2b
 8000860:	2200      	movs	r2, #0
 8000862:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000864:	7bfb      	ldrb	r3, [r7, #15]
 8000866:	687a      	ldr	r2, [r7, #4]
 8000868:	015b      	lsls	r3, r3, #5
 800086a:	4413      	add	r3, r2
 800086c:	3338      	adds	r3, #56	; 0x38
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000872:	7bfb      	ldrb	r3, [r7, #15]
 8000874:	687a      	ldr	r2, [r7, #4]
 8000876:	015b      	lsls	r3, r3, #5
 8000878:	4413      	add	r3, r2
 800087a:	333c      	adds	r3, #60	; 0x3c
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000880:	7bfb      	ldrb	r3, [r7, #15]
 8000882:	687a      	ldr	r2, [r7, #4]
 8000884:	3302      	adds	r3, #2
 8000886:	015b      	lsls	r3, r3, #5
 8000888:	4413      	add	r3, r2
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800088e:	7bfb      	ldrb	r3, [r7, #15]
 8000890:	3301      	adds	r3, #1
 8000892:	73fb      	strb	r3, [r7, #15]
 8000894:	7bfa      	ldrb	r2, [r7, #15]
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	685b      	ldr	r3, [r3, #4]
 800089a:	429a      	cmp	r2, r3
 800089c:	d3c4      	bcc.n	8000828 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800089e:	2300      	movs	r3, #0
 80008a0:	73fb      	strb	r3, [r7, #15]
 80008a2:	e031      	b.n	8000908 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80008a4:	7bfb      	ldrb	r3, [r7, #15]
 80008a6:	687a      	ldr	r2, [r7, #4]
 80008a8:	015b      	lsls	r3, r3, #5
 80008aa:	4413      	add	r3, r2
 80008ac:	f203 1329 	addw	r3, r3, #297	; 0x129
 80008b0:	2200      	movs	r2, #0
 80008b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80008b4:	7bfb      	ldrb	r3, [r7, #15]
 80008b6:	687a      	ldr	r2, [r7, #4]
 80008b8:	015b      	lsls	r3, r3, #5
 80008ba:	4413      	add	r3, r2
 80008bc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80008c0:	7bfa      	ldrb	r2, [r7, #15]
 80008c2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80008c4:	7bfb      	ldrb	r3, [r7, #15]
 80008c6:	687a      	ldr	r2, [r7, #4]
 80008c8:	015b      	lsls	r3, r3, #5
 80008ca:	4413      	add	r3, r2
 80008cc:	f203 132b 	addw	r3, r3, #299	; 0x12b
 80008d0:	2200      	movs	r2, #0
 80008d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80008d4:	7bfb      	ldrb	r3, [r7, #15]
 80008d6:	687a      	ldr	r2, [r7, #4]
 80008d8:	015b      	lsls	r3, r3, #5
 80008da:	4413      	add	r3, r2
 80008dc:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80008e4:	7bfb      	ldrb	r3, [r7, #15]
 80008e6:	687a      	ldr	r2, [r7, #4]
 80008e8:	015b      	lsls	r3, r3, #5
 80008ea:	4413      	add	r3, r2
 80008ec:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80008f4:	7bfb      	ldrb	r3, [r7, #15]
 80008f6:	687a      	ldr	r2, [r7, #4]
 80008f8:	330a      	adds	r3, #10
 80008fa:	015b      	lsls	r3, r3, #5
 80008fc:	4413      	add	r3, r2
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000902:	7bfb      	ldrb	r3, [r7, #15]
 8000904:	3301      	adds	r3, #1
 8000906:	73fb      	strb	r3, [r7, #15]
 8000908:	7bfa      	ldrb	r2, [r7, #15]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	685b      	ldr	r3, [r3, #4]
 800090e:	429a      	cmp	r2, r3
 8000910:	d3c8      	bcc.n	80008a4 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	603b      	str	r3, [r7, #0]
 8000918:	687e      	ldr	r6, [r7, #4]
 800091a:	466d      	mov	r5, sp
 800091c:	f106 0410 	add.w	r4, r6, #16
 8000920:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000922:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000924:	6823      	ldr	r3, [r4, #0]
 8000926:	602b      	str	r3, [r5, #0]
 8000928:	1d33      	adds	r3, r6, #4
 800092a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800092c:	6838      	ldr	r0, [r7, #0]
 800092e:	f001 fdda 	bl	80024e6 <USB_DevInit>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d005      	beq.n	8000944 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	2202      	movs	r2, #2
 800093c:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8000940:	2301      	movs	r3, #1
 8000942:	e00d      	b.n	8000960 <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	2200      	movs	r2, #0
 8000948:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2201      	movs	r2, #1
 8000950:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4618      	mov	r0, r3
 800095a:	f002 fe18 	bl	800358e <USB_DevDisconnect>

  return HAL_OK;
 800095e:	2300      	movs	r3, #0
}
 8000960:	4618      	mov	r0, r3
 8000962:	3714      	adds	r7, #20
 8000964:	46bd      	mov	sp, r7
 8000966:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000968 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000976:	2b01      	cmp	r3, #1
 8000978:	d101      	bne.n	800097e <HAL_PCD_Start+0x16>
 800097a:	2302      	movs	r3, #2
 800097c:	e016      	b.n	80009ac <HAL_PCD_Start+0x44>
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	2201      	movs	r2, #1
 8000982:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000986:	2101      	movs	r1, #1
 8000988:	6878      	ldr	r0, [r7, #4]
 800098a:	f005 fde8 	bl	800655e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4618      	mov	r0, r3
 8000994:	f002 fdf1 	bl	800357a <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4618      	mov	r0, r3
 800099e:	f001 fd63 	bl	8002468 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2200      	movs	r2, #0
 80009a6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80009aa:	2300      	movs	r3, #0
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3708      	adds	r7, #8
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4618      	mov	r0, r3
 80009c2:	f002 fdee 	bl	80035a2 <USB_ReadInterrupts>
 80009c6:	4603      	mov	r3, r0
 80009c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80009d0:	d102      	bne.n	80009d8 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80009d2:	6878      	ldr	r0, [r7, #4]
 80009d4:	f000 fade 	bl	8000f94 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4618      	mov	r0, r3
 80009de:	f002 fde0 	bl	80035a2 <USB_ReadInterrupts>
 80009e2:	4603      	mov	r3, r0
 80009e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80009ec:	d112      	bne.n	8000a14 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80009f6:	b29a      	uxth	r2, r3
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000a00:	b292      	uxth	r2, r2
 8000a02:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000a06:	6878      	ldr	r0, [r7, #4]
 8000a08:	f005 fbd5 	bl	80061b6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	6878      	ldr	r0, [r7, #4]
 8000a10:	f000 f8de 	bl	8000bd0 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f002 fdc2 	bl	80035a2 <USB_ReadInterrupts>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000a28:	d10b      	bne.n	8000a42 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000a32:	b29a      	uxth	r2, r3
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000a3c:	b292      	uxth	r2, r2
 8000a3e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4618      	mov	r0, r3
 8000a48:	f002 fdab 	bl	80035a2 <USB_ReadInterrupts>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a56:	d10b      	bne.n	8000a70 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000a60:	b29a      	uxth	r2, r3
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000a6a:	b292      	uxth	r2, r2
 8000a6c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4618      	mov	r0, r3
 8000a76:	f002 fd94 	bl	80035a2 <USB_ReadInterrupts>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000a84:	d126      	bne.n	8000ad4 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000a8e:	b29a      	uxth	r2, r3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f022 0204 	bic.w	r2, r2, #4
 8000a98:	b292      	uxth	r2, r2
 8000a9a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000aa6:	b29a      	uxth	r2, r3
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f022 0208 	bic.w	r2, r2, #8
 8000ab0:	b292      	uxth	r2, r2
 8000ab2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000ab6:	6878      	ldr	r0, [r7, #4]
 8000ab8:	f005 fbb6 	bl	8006228 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ac4:	b29a      	uxth	r2, r3
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000ace:	b292      	uxth	r2, r2
 8000ad0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f002 fd62 	bl	80035a2 <USB_ReadInterrupts>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ae4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000ae8:	d13d      	bne.n	8000b66 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000af2:	b29a      	uxth	r2, r3
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f042 0208 	orr.w	r2, r2, #8
 8000afc:	b292      	uxth	r2, r2
 8000afe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000b0a:	b29a      	uxth	r2, r3
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000b14:	b292      	uxth	r2, r2
 8000b16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000b22:	b29a      	uxth	r2, r3
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f042 0204 	orr.w	r2, r2, #4
 8000b2c:	b292      	uxth	r2, r2
 8000b2e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4618      	mov	r0, r3
 8000b38:	f002 fd33 	bl	80035a2 <USB_ReadInterrupts>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b46:	d10b      	bne.n	8000b60 <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000b50:	b29a      	uxth	r2, r3
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000b5a:	b292      	uxth	r2, r2
 8000b5c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	f005 fb47 	bl	80061f4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f002 fd19 	bl	80035a2 <USB_ReadInterrupts>
 8000b70:	4603      	mov	r3, r0
 8000b72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b7a:	d10e      	bne.n	8000b9a <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000b84:	b29a      	uxth	r2, r3
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000b8e:	b292      	uxth	r2, r2
 8000b90:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000b94:	6878      	ldr	r0, [r7, #4]
 8000b96:	f005 fb00 	bl	800619a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f002 fcff 	bl	80035a2 <USB_ReadInterrupts>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000baa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bae:	d10b      	bne.n	8000bc8 <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000bb8:	b29a      	uxth	r2, r3
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000bc2:	b292      	uxth	r2, r2
 8000bc4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8000bc8:	bf00      	nop
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	460b      	mov	r3, r1
 8000bda:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	d101      	bne.n	8000bea <HAL_PCD_SetAddress+0x1a>
 8000be6:	2302      	movs	r3, #2
 8000be8:	e013      	b.n	8000c12 <HAL_PCD_SetAddress+0x42>
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2201      	movs	r2, #1
 8000bee:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	78fa      	ldrb	r2, [r7, #3]
 8000bf6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	78fa      	ldrb	r2, [r7, #3]
 8000c00:	4611      	mov	r1, r2
 8000c02:	4618      	mov	r0, r3
 8000c04:	f002 fca6 	bl	8003554 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8000c10:	2300      	movs	r3, #0
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}

08000c1a <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b084      	sub	sp, #16
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	6078      	str	r0, [r7, #4]
 8000c22:	4608      	mov	r0, r1
 8000c24:	4611      	mov	r1, r2
 8000c26:	461a      	mov	r2, r3
 8000c28:	4603      	mov	r3, r0
 8000c2a:	70fb      	strb	r3, [r7, #3]
 8000c2c:	460b      	mov	r3, r1
 8000c2e:	803b      	strh	r3, [r7, #0]
 8000c30:	4613      	mov	r3, r2
 8000c32:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8000c34:	2300      	movs	r3, #0
 8000c36:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000c38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	da0b      	bge.n	8000c58 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000c40:	78fb      	ldrb	r3, [r7, #3]
 8000c42:	f003 0307 	and.w	r3, r3, #7
 8000c46:	015b      	lsls	r3, r3, #5
 8000c48:	3328      	adds	r3, #40	; 0x28
 8000c4a:	687a      	ldr	r2, [r7, #4]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	2201      	movs	r2, #1
 8000c54:	705a      	strb	r2, [r3, #1]
 8000c56:	e00b      	b.n	8000c70 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000c58:	78fb      	ldrb	r3, [r7, #3]
 8000c5a:	f003 0307 	and.w	r3, r3, #7
 8000c5e:	015b      	lsls	r3, r3, #5
 8000c60:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000c64:	687a      	ldr	r2, [r7, #4]
 8000c66:	4413      	add	r3, r2
 8000c68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8000c70:	78fb      	ldrb	r3, [r7, #3]
 8000c72:	f003 0307 	and.w	r3, r3, #7
 8000c76:	b2da      	uxtb	r2, r3
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8000c7c:	883a      	ldrh	r2, [r7, #0]
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	78ba      	ldrb	r2, [r7, #2]
 8000c86:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	785b      	ldrb	r3, [r3, #1]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d004      	beq.n	8000c9a <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	b29a      	uxth	r2, r3
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8000c9a:	78bb      	ldrb	r3, [r7, #2]
 8000c9c:	2b02      	cmp	r3, #2
 8000c9e:	d102      	bne.n	8000ca6 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	d101      	bne.n	8000cb4 <HAL_PCD_EP_Open+0x9a>
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	e00e      	b.n	8000cd2 <HAL_PCD_EP_Open+0xb8>
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	68f9      	ldr	r1, [r7, #12]
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f001 fc34 	bl	8002530 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2200      	movs	r2, #0
 8000ccc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8000cd0:	7afb      	ldrb	r3, [r7, #11]
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3710      	adds	r7, #16
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b084      	sub	sp, #16
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
 8000ce2:	460b      	mov	r3, r1
 8000ce4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000ce6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	da0b      	bge.n	8000d06 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000cee:	78fb      	ldrb	r3, [r7, #3]
 8000cf0:	f003 0307 	and.w	r3, r3, #7
 8000cf4:	015b      	lsls	r3, r3, #5
 8000cf6:	3328      	adds	r3, #40	; 0x28
 8000cf8:	687a      	ldr	r2, [r7, #4]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	2201      	movs	r2, #1
 8000d02:	705a      	strb	r2, [r3, #1]
 8000d04:	e00b      	b.n	8000d1e <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000d06:	78fb      	ldrb	r3, [r7, #3]
 8000d08:	f003 0307 	and.w	r3, r3, #7
 8000d0c:	015b      	lsls	r3, r3, #5
 8000d0e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000d12:	687a      	ldr	r2, [r7, #4]
 8000d14:	4413      	add	r3, r2
 8000d16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8000d1e:	78fb      	ldrb	r3, [r7, #3]
 8000d20:	f003 0307 	and.w	r3, r3, #7
 8000d24:	b2da      	uxtb	r2, r3
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d101      	bne.n	8000d38 <HAL_PCD_EP_Close+0x5e>
 8000d34:	2302      	movs	r3, #2
 8000d36:	e00e      	b.n	8000d56 <HAL_PCD_EP_Close+0x7c>
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	68f9      	ldr	r1, [r7, #12]
 8000d46:	4618      	mov	r0, r3
 8000d48:	f001 fee0 	bl	8002b0c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2200      	movs	r2, #0
 8000d50:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8000d54:	2300      	movs	r3, #0
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3710      	adds	r7, #16
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b086      	sub	sp, #24
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	60f8      	str	r0, [r7, #12]
 8000d66:	607a      	str	r2, [r7, #4]
 8000d68:	603b      	str	r3, [r7, #0]
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000d6e:	7afb      	ldrb	r3, [r7, #11]
 8000d70:	f003 0307 	and.w	r3, r3, #7
 8000d74:	015b      	lsls	r3, r3, #5
 8000d76:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000d7a:	68fa      	ldr	r2, [r7, #12]
 8000d7c:	4413      	add	r3, r2
 8000d7e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	683a      	ldr	r2, [r7, #0]
 8000d8a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	2200      	movs	r2, #0
 8000d90:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	2200      	movs	r2, #0
 8000d96:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000d98:	7afb      	ldrb	r3, [r7, #11]
 8000d9a:	f003 0307 	and.w	r3, r3, #7
 8000d9e:	b2da      	uxtb	r2, r3
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000da4:	7afb      	ldrb	r3, [r7, #11]
 8000da6:	f003 0307 	and.w	r3, r3, #7
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d106      	bne.n	8000dbc <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	6979      	ldr	r1, [r7, #20]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f002 f83f 	bl	8002e38 <USB_EPStartXfer>
 8000dba:	e005      	b.n	8000dc8 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	6979      	ldr	r1, [r7, #20]
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f002 f838 	bl	8002e38 <USB_EPStartXfer>
  }

  return HAL_OK;
 8000dc8:	2300      	movs	r3, #0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3718      	adds	r7, #24
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b086      	sub	sp, #24
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	60f8      	str	r0, [r7, #12]
 8000dda:	607a      	str	r2, [r7, #4]
 8000ddc:	603b      	str	r3, [r7, #0]
 8000dde:	460b      	mov	r3, r1
 8000de0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000de2:	7afb      	ldrb	r3, [r7, #11]
 8000de4:	f003 0307 	and.w	r3, r3, #7
 8000de8:	015b      	lsls	r3, r3, #5
 8000dea:	3328      	adds	r3, #40	; 0x28
 8000dec:	68fa      	ldr	r2, [r7, #12]
 8000dee:	4413      	add	r3, r2
 8000df0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	687a      	ldr	r2, [r7, #4]
 8000df6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	683a      	ldr	r2, [r7, #0]
 8000dfc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	2200      	movs	r2, #0
 8000e02:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	2201      	movs	r2, #1
 8000e08:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000e0a:	7afb      	ldrb	r3, [r7, #11]
 8000e0c:	f003 0307 	and.w	r3, r3, #7
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000e16:	7afb      	ldrb	r3, [r7, #11]
 8000e18:	f003 0307 	and.w	r3, r3, #7
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d106      	bne.n	8000e2e <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	6979      	ldr	r1, [r7, #20]
 8000e26:	4618      	mov	r0, r3
 8000e28:	f002 f806 	bl	8002e38 <USB_EPStartXfer>
 8000e2c:	e005      	b.n	8000e3a <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	6979      	ldr	r1, [r7, #20]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f001 ffff 	bl	8002e38 <USB_EPStartXfer>
  }

  return HAL_OK;
 8000e3a:	2300      	movs	r3, #0
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3718      	adds	r7, #24
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	460b      	mov	r3, r1
 8000e4e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8000e50:	78fb      	ldrb	r3, [r7, #3]
 8000e52:	f003 0207 	and.w	r2, r3, #7
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	d901      	bls.n	8000e62 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e046      	b.n	8000ef0 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000e62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	da0b      	bge.n	8000e82 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000e6a:	78fb      	ldrb	r3, [r7, #3]
 8000e6c:	f003 0307 	and.w	r3, r3, #7
 8000e70:	015b      	lsls	r3, r3, #5
 8000e72:	3328      	adds	r3, #40	; 0x28
 8000e74:	687a      	ldr	r2, [r7, #4]
 8000e76:	4413      	add	r3, r2
 8000e78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	705a      	strb	r2, [r3, #1]
 8000e80:	e009      	b.n	8000e96 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000e82:	78fb      	ldrb	r3, [r7, #3]
 8000e84:	015b      	lsls	r3, r3, #5
 8000e86:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	2200      	movs	r2, #0
 8000e94:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	2201      	movs	r2, #1
 8000e9a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000e9c:	78fb      	ldrb	r3, [r7, #3]
 8000e9e:	f003 0307 	and.w	r3, r3, #7
 8000ea2:	b2da      	uxtb	r2, r3
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d101      	bne.n	8000eb6 <HAL_PCD_EP_SetStall+0x72>
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	e01c      	b.n	8000ef0 <HAL_PCD_EP_SetStall+0xac>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2201      	movs	r2, #1
 8000eba:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	68f9      	ldr	r1, [r7, #12]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f002 fa6f 	bl	80033a8 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000eca:	78fb      	ldrb	r3, [r7, #3]
 8000ecc:	f003 0307 	and.w	r3, r3, #7
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d108      	bne.n	8000ee6 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4610      	mov	r0, r2
 8000ee2:	f002 fb6d 	bl	80035c0 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8000eee:	2300      	movs	r3, #0
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3710      	adds	r7, #16
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	460b      	mov	r3, r1
 8000f02:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8000f04:	78fb      	ldrb	r3, [r7, #3]
 8000f06:	f003 020f 	and.w	r2, r3, #15
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	d901      	bls.n	8000f16 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
 8000f14:	e03a      	b.n	8000f8c <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000f16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	da0b      	bge.n	8000f36 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000f1e:	78fb      	ldrb	r3, [r7, #3]
 8000f20:	f003 0307 	and.w	r3, r3, #7
 8000f24:	015b      	lsls	r3, r3, #5
 8000f26:	3328      	adds	r3, #40	; 0x28
 8000f28:	687a      	ldr	r2, [r7, #4]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	2201      	movs	r2, #1
 8000f32:	705a      	strb	r2, [r3, #1]
 8000f34:	e00b      	b.n	8000f4e <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000f36:	78fb      	ldrb	r3, [r7, #3]
 8000f38:	f003 0307 	and.w	r3, r3, #7
 8000f3c:	015b      	lsls	r3, r3, #5
 8000f3e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000f42:	687a      	ldr	r2, [r7, #4]
 8000f44:	4413      	add	r3, r2
 8000f46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	2200      	movs	r2, #0
 8000f52:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000f54:	78fb      	ldrb	r3, [r7, #3]
 8000f56:	f003 0307 	and.w	r3, r3, #7
 8000f5a:	b2da      	uxtb	r2, r3
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d101      	bne.n	8000f6e <HAL_PCD_EP_ClrStall+0x76>
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	e00e      	b.n	8000f8c <HAL_PCD_EP_ClrStall+0x94>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2201      	movs	r2, #1
 8000f72:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	68f9      	ldr	r1, [r7, #12]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f002 fa55 	bl	800342c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2200      	movs	r2, #0
 8000f86:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8000f8a:	2300      	movs	r3, #0
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3710      	adds	r7, #16
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8000f94:	b590      	push	{r4, r7, lr}
 8000f96:	b089      	sub	sp, #36	; 0x24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8000f9c:	e282      	b.n	80014a4 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000fa6:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8000fa8:	8afb      	ldrh	r3, [r7, #22]
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	f003 030f 	and.w	r3, r3, #15
 8000fb0:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8000fb2:	7d7b      	ldrb	r3, [r7, #21]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	f040 8142 	bne.w	800123e <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8000fba:	8afb      	ldrh	r3, [r7, #22]
 8000fbc:	f003 0310 	and.w	r3, r3, #16
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d151      	bne.n	8001068 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	881b      	ldrh	r3, [r3, #0]
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8000fd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000fd4:	b29c      	uxth	r4, r3
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8000fde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	3328      	adds	r3, #40	; 0x28
 8000fea:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	00db      	lsls	r3, r3, #3
 8000ffe:	4413      	add	r3, r2
 8001000:	3302      	adds	r3, #2
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	6812      	ldr	r2, [r2, #0]
 8001008:	4413      	add	r3, r2
 800100a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800100e:	881b      	ldrh	r3, [r3, #0]
 8001010:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	695a      	ldr	r2, [r3, #20]
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	69db      	ldr	r3, [r3, #28]
 8001020:	441a      	add	r2, r3
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001026:	2100      	movs	r1, #0
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f005 f89f 	bl	800616c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001034:	b2db      	uxtb	r3, r3
 8001036:	2b00      	cmp	r3, #0
 8001038:	f000 8234 	beq.w	80014a4 <PCD_EP_ISR_Handler+0x510>
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	699b      	ldr	r3, [r3, #24]
 8001040:	2b00      	cmp	r3, #0
 8001042:	f040 822f 	bne.w	80014a4 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800104c:	b2db      	uxtb	r3, r3
 800104e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001052:	b2da      	uxtb	r2, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	b292      	uxth	r2, r2
 800105a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2200      	movs	r2, #0
 8001062:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001066:	e21d      	b.n	80014a4 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800106e:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	881b      	ldrh	r3, [r3, #0]
 8001076:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001078:	8a7b      	ldrh	r3, [r7, #18]
 800107a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800107e:	2b00      	cmp	r3, #0
 8001080:	d033      	beq.n	80010ea <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800108a:	b29b      	uxth	r3, r3
 800108c:	461a      	mov	r2, r3
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	00db      	lsls	r3, r3, #3
 8001094:	4413      	add	r3, r2
 8001096:	3306      	adds	r3, #6
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	6812      	ldr	r2, [r2, #0]
 800109e:	4413      	add	r3, r2
 80010a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80010a4:	881b      	ldrh	r3, [r3, #0]
 80010a6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6818      	ldr	r0, [r3, #0]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f503 710c 	add.w	r1, r3, #560	; 0x230
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	f002 facc 	bl	800365e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	881b      	ldrh	r3, [r3, #0]
 80010cc:	b29a      	uxth	r2, r3
 80010ce:	f640 738f 	movw	r3, #3983	; 0xf8f
 80010d2:	4013      	ands	r3, r2
 80010d4:	b29c      	uxth	r4, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80010de:	b292      	uxth	r2, r2
 80010e0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f005 f818 	bl	8006118 <HAL_PCD_SetupStageCallback>
 80010e8:	e1dc      	b.n	80014a4 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80010ea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	f280 81d8 	bge.w	80014a4 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	881b      	ldrh	r3, [r3, #0]
 80010fa:	b29a      	uxth	r2, r3
 80010fc:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001100:	4013      	ands	r3, r2
 8001102:	b29c      	uxth	r4, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800110c:	b292      	uxth	r2, r2
 800110e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001118:	b29b      	uxth	r3, r3
 800111a:	461a      	mov	r2, r3
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	00db      	lsls	r3, r3, #3
 8001122:	4413      	add	r3, r2
 8001124:	3306      	adds	r3, #6
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	6812      	ldr	r2, [r2, #0]
 800112c:	4413      	add	r3, r2
 800112e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001132:	881b      	ldrh	r3, [r3, #0]
 8001134:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	69db      	ldr	r3, [r3, #28]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d019      	beq.n	8001178 <PCD_EP_ISR_Handler+0x1e4>
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	695b      	ldr	r3, [r3, #20]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d015      	beq.n	8001178 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6818      	ldr	r0, [r3, #0]
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	6959      	ldr	r1, [r3, #20]
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800115c:	b29b      	uxth	r3, r3
 800115e:	f002 fa7e 	bl	800365e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	695a      	ldr	r2, [r3, #20]
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	69db      	ldr	r3, [r3, #28]
 800116a:	441a      	add	r2, r3
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001170:	2100      	movs	r1, #0
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f004 ffe2 	bl	800613c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	461c      	mov	r4, r3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001186:	b29b      	uxth	r3, r3
 8001188:	441c      	add	r4, r3
 800118a:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 800118e:	461c      	mov	r4, r3
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	691b      	ldr	r3, [r3, #16]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d10e      	bne.n	80011b6 <PCD_EP_ISR_Handler+0x222>
 8001198:	8823      	ldrh	r3, [r4, #0]
 800119a:	b29b      	uxth	r3, r3
 800119c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	8023      	strh	r3, [r4, #0]
 80011a4:	8823      	ldrh	r3, [r4, #0]
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80011ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	8023      	strh	r3, [r4, #0]
 80011b4:	e02d      	b.n	8001212 <PCD_EP_ISR_Handler+0x27e>
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	691b      	ldr	r3, [r3, #16]
 80011ba:	2b3e      	cmp	r3, #62	; 0x3e
 80011bc:	d812      	bhi.n	80011e4 <PCD_EP_ISR_Handler+0x250>
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	691b      	ldr	r3, [r3, #16]
 80011c2:	085b      	lsrs	r3, r3, #1
 80011c4:	61bb      	str	r3, [r7, #24]
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	691b      	ldr	r3, [r3, #16]
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d002      	beq.n	80011d8 <PCD_EP_ISR_Handler+0x244>
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	3301      	adds	r3, #1
 80011d6:	61bb      	str	r3, [r7, #24]
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	b29b      	uxth	r3, r3
 80011dc:	029b      	lsls	r3, r3, #10
 80011de:	b29b      	uxth	r3, r3
 80011e0:	8023      	strh	r3, [r4, #0]
 80011e2:	e016      	b.n	8001212 <PCD_EP_ISR_Handler+0x27e>
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	691b      	ldr	r3, [r3, #16]
 80011e8:	095b      	lsrs	r3, r3, #5
 80011ea:	61bb      	str	r3, [r7, #24]
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	691b      	ldr	r3, [r3, #16]
 80011f0:	f003 031f 	and.w	r3, r3, #31
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d102      	bne.n	80011fe <PCD_EP_ISR_Handler+0x26a>
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	61bb      	str	r3, [r7, #24]
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	b29b      	uxth	r3, r3
 8001202:	029b      	lsls	r3, r3, #10
 8001204:	b29b      	uxth	r3, r3
 8001206:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800120a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800120e:	b29b      	uxth	r3, r3
 8001210:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	881b      	ldrh	r3, [r3, #0]
 8001218:	b29b      	uxth	r3, r3
 800121a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800121e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001222:	b29c      	uxth	r4, r3
 8001224:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8001228:	b29c      	uxth	r4, r3
 800122a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800122e:	b29c      	uxth	r4, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	4ba2      	ldr	r3, [pc, #648]	; (80014c0 <PCD_EP_ISR_Handler+0x52c>)
 8001236:	4323      	orrs	r3, r4
 8001238:	b29b      	uxth	r3, r3
 800123a:	8013      	strh	r3, [r2, #0]
 800123c:	e132      	b.n	80014a4 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	461a      	mov	r2, r3
 8001244:	7d7b      	ldrb	r3, [r7, #21]
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	4413      	add	r3, r2
 800124a:	881b      	ldrh	r3, [r3, #0]
 800124c:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800124e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001252:	2b00      	cmp	r3, #0
 8001254:	f280 80d1 	bge.w	80013fa <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	461a      	mov	r2, r3
 800125e:	7d7b      	ldrb	r3, [r7, #21]
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	4413      	add	r3, r2
 8001264:	881b      	ldrh	r3, [r3, #0]
 8001266:	b29a      	uxth	r2, r3
 8001268:	f640 738f 	movw	r3, #3983	; 0xf8f
 800126c:	4013      	ands	r3, r2
 800126e:	b29c      	uxth	r4, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	461a      	mov	r2, r3
 8001276:	7d7b      	ldrb	r3, [r7, #21]
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	4413      	add	r3, r2
 800127c:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001280:	b292      	uxth	r2, r2
 8001282:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001284:	7d7b      	ldrb	r3, [r7, #21]
 8001286:	015b      	lsls	r3, r3, #5
 8001288:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	4413      	add	r3, r2
 8001290:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	7b1b      	ldrb	r3, [r3, #12]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d121      	bne.n	80012de <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	461a      	mov	r2, r3
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	00db      	lsls	r3, r3, #3
 80012ac:	4413      	add	r3, r2
 80012ae:	3306      	adds	r3, #6
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	6812      	ldr	r2, [r2, #0]
 80012b6:	4413      	add	r3, r2
 80012b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80012bc:	881b      	ldrh	r3, [r3, #0]
 80012be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80012c2:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 80012c4:	8bfb      	ldrh	r3, [r7, #30]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d072      	beq.n	80013b0 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6818      	ldr	r0, [r3, #0]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	6959      	ldr	r1, [r3, #20]
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	88da      	ldrh	r2, [r3, #6]
 80012d6:	8bfb      	ldrh	r3, [r7, #30]
 80012d8:	f002 f9c1 	bl	800365e <USB_ReadPMA>
 80012dc:	e068      	b.n	80013b0 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	461a      	mov	r2, r3
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	4413      	add	r3, r2
 80012ec:	881b      	ldrh	r3, [r3, #0]
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d021      	beq.n	800133c <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001300:	b29b      	uxth	r3, r3
 8001302:	461a      	mov	r2, r3
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	00db      	lsls	r3, r3, #3
 800130a:	4413      	add	r3, r2
 800130c:	3302      	adds	r3, #2
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	687a      	ldr	r2, [r7, #4]
 8001312:	6812      	ldr	r2, [r2, #0]
 8001314:	4413      	add	r3, r2
 8001316:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800131a:	881b      	ldrh	r3, [r3, #0]
 800131c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001320:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8001322:	8bfb      	ldrh	r3, [r7, #30]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d02a      	beq.n	800137e <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6818      	ldr	r0, [r3, #0]
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	6959      	ldr	r1, [r3, #20]
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	891a      	ldrh	r2, [r3, #8]
 8001334:	8bfb      	ldrh	r3, [r7, #30]
 8001336:	f002 f992 	bl	800365e <USB_ReadPMA>
 800133a:	e020      	b.n	800137e <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001344:	b29b      	uxth	r3, r3
 8001346:	461a      	mov	r2, r3
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	00db      	lsls	r3, r3, #3
 800134e:	4413      	add	r3, r2
 8001350:	3306      	adds	r3, #6
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	6812      	ldr	r2, [r2, #0]
 8001358:	4413      	add	r3, r2
 800135a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800135e:	881b      	ldrh	r3, [r3, #0]
 8001360:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001364:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8001366:	8bfb      	ldrh	r3, [r7, #30]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d008      	beq.n	800137e <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6818      	ldr	r0, [r3, #0]
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	6959      	ldr	r1, [r3, #20]
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	895a      	ldrh	r2, [r3, #10]
 8001378:	8bfb      	ldrh	r3, [r7, #30]
 800137a:	f002 f970 	bl	800365e <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	461a      	mov	r2, r3
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	4413      	add	r3, r2
 800138c:	881b      	ldrh	r3, [r3, #0]
 800138e:	b29b      	uxth	r3, r3
 8001390:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001394:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001398:	b29c      	uxth	r4, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	461a      	mov	r2, r3
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	441a      	add	r2, r3
 80013a8:	4b46      	ldr	r3, [pc, #280]	; (80014c4 <PCD_EP_ISR_Handler+0x530>)
 80013aa:	4323      	orrs	r3, r4
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	69da      	ldr	r2, [r3, #28]
 80013b4:	8bfb      	ldrh	r3, [r7, #30]
 80013b6:	441a      	add	r2, r3
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	695a      	ldr	r2, [r3, #20]
 80013c0:	8bfb      	ldrh	r3, [r7, #30]
 80013c2:	441a      	add	r2, r3
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d004      	beq.n	80013da <PCD_EP_ISR_Handler+0x446>
 80013d0:	8bfa      	ldrh	r2, [r7, #30]
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	691b      	ldr	r3, [r3, #16]
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d206      	bcs.n	80013e8 <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	4619      	mov	r1, r3
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f004 feab 	bl	800613c <HAL_PCD_DataOutStageCallback>
 80013e6:	e008      	b.n	80013fa <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	7819      	ldrb	r1, [r3, #0]
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	695a      	ldr	r2, [r3, #20]
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f7ff fcb2 	bl	8000d5e <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80013fa:	8a7b      	ldrh	r3, [r7, #18]
 80013fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001400:	2b00      	cmp	r3, #0
 8001402:	d04f      	beq.n	80014a4 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 8001404:	7d7b      	ldrb	r3, [r7, #21]
 8001406:	015b      	lsls	r3, r3, #5
 8001408:	3328      	adds	r3, #40	; 0x28
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	4413      	add	r3, r2
 800140e:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	461a      	mov	r2, r3
 8001416:	7d7b      	ldrb	r3, [r7, #21]
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	4413      	add	r3, r2
 800141c:	881b      	ldrh	r3, [r3, #0]
 800141e:	b29b      	uxth	r3, r3
 8001420:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001424:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001428:	b29c      	uxth	r4, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	461a      	mov	r2, r3
 8001430:	7d7b      	ldrb	r3, [r7, #21]
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	441a      	add	r2, r3
 8001436:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 800143a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800143e:	b29b      	uxth	r3, r3
 8001440:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800144a:	b29b      	uxth	r3, r3
 800144c:	461a      	mov	r2, r3
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	4413      	add	r3, r2
 8001456:	3302      	adds	r3, #2
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	6812      	ldr	r2, [r2, #0]
 800145e:	4413      	add	r3, r2
 8001460:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001464:	881b      	ldrh	r3, [r3, #0]
 8001466:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	695a      	ldr	r2, [r3, #20]
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	69db      	ldr	r3, [r3, #28]
 8001476:	441a      	add	r2, r3
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	699b      	ldr	r3, [r3, #24]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d106      	bne.n	8001492 <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	4619      	mov	r1, r3
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f004 fe6e 	bl	800616c <HAL_PCD_DataInStageCallback>
 8001490:	e008      	b.n	80014a4 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	7819      	ldrb	r1, [r3, #0]
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	695a      	ldr	r2, [r3, #20]
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	699b      	ldr	r3, [r3, #24]
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f7ff fc97 	bl	8000dd2 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014ac:	b29b      	uxth	r3, r3
 80014ae:	b21b      	sxth	r3, r3
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	f6ff ad74 	blt.w	8000f9e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 80014b6:	2300      	movs	r3, #0
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3724      	adds	r7, #36	; 0x24
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd90      	pop	{r4, r7, pc}
 80014c0:	ffff8080 	.word	0xffff8080
 80014c4:	ffff80c0 	.word	0xffff80c0

080014c8 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b087      	sub	sp, #28
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	60f8      	str	r0, [r7, #12]
 80014d0:	607b      	str	r3, [r7, #4]
 80014d2:	460b      	mov	r3, r1
 80014d4:	817b      	strh	r3, [r7, #10]
 80014d6:	4613      	mov	r3, r2
 80014d8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80014da:	897b      	ldrh	r3, [r7, #10]
 80014dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d008      	beq.n	80014f8 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014e6:	897b      	ldrh	r3, [r7, #10]
 80014e8:	f003 0307 	and.w	r3, r3, #7
 80014ec:	015b      	lsls	r3, r3, #5
 80014ee:	3328      	adds	r3, #40	; 0x28
 80014f0:	68fa      	ldr	r2, [r7, #12]
 80014f2:	4413      	add	r3, r2
 80014f4:	617b      	str	r3, [r7, #20]
 80014f6:	e006      	b.n	8001506 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80014f8:	897b      	ldrh	r3, [r7, #10]
 80014fa:	015b      	lsls	r3, r3, #5
 80014fc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001500:	68fa      	ldr	r2, [r7, #12]
 8001502:	4413      	add	r3, r2
 8001504:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8001506:	893b      	ldrh	r3, [r7, #8]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d107      	bne.n	800151c <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	2200      	movs	r2, #0
 8001510:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	b29a      	uxth	r2, r3
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	80da      	strh	r2, [r3, #6]
 800151a:	e00b      	b.n	8001534 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	2201      	movs	r2, #1
 8001520:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	b29a      	uxth	r2, r3
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	0c1b      	lsrs	r3, r3, #16
 800152e:	b29a      	uxth	r2, r3
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	371c      	adds	r7, #28
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr

08001540 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b086      	sub	sp, #24
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d101      	bne.n	8001552 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e26c      	b.n	8001a2c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	2b00      	cmp	r3, #0
 800155c:	f000 8087 	beq.w	800166e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001560:	4b92      	ldr	r3, [pc, #584]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f003 030c 	and.w	r3, r3, #12
 8001568:	2b04      	cmp	r3, #4
 800156a:	d00c      	beq.n	8001586 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800156c:	4b8f      	ldr	r3, [pc, #572]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f003 030c 	and.w	r3, r3, #12
 8001574:	2b08      	cmp	r3, #8
 8001576:	d112      	bne.n	800159e <HAL_RCC_OscConfig+0x5e>
 8001578:	4b8c      	ldr	r3, [pc, #560]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001584:	d10b      	bne.n	800159e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001586:	4b89      	ldr	r3, [pc, #548]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d06c      	beq.n	800166c <HAL_RCC_OscConfig+0x12c>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d168      	bne.n	800166c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e246      	b.n	8001a2c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015a6:	d106      	bne.n	80015b6 <HAL_RCC_OscConfig+0x76>
 80015a8:	4b80      	ldr	r3, [pc, #512]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a7f      	ldr	r2, [pc, #508]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 80015ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015b2:	6013      	str	r3, [r2, #0]
 80015b4:	e02e      	b.n	8001614 <HAL_RCC_OscConfig+0xd4>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d10c      	bne.n	80015d8 <HAL_RCC_OscConfig+0x98>
 80015be:	4b7b      	ldr	r3, [pc, #492]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a7a      	ldr	r2, [pc, #488]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 80015c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015c8:	6013      	str	r3, [r2, #0]
 80015ca:	4b78      	ldr	r3, [pc, #480]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a77      	ldr	r2, [pc, #476]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 80015d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015d4:	6013      	str	r3, [r2, #0]
 80015d6:	e01d      	b.n	8001614 <HAL_RCC_OscConfig+0xd4>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015e0:	d10c      	bne.n	80015fc <HAL_RCC_OscConfig+0xbc>
 80015e2:	4b72      	ldr	r3, [pc, #456]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a71      	ldr	r2, [pc, #452]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 80015e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015ec:	6013      	str	r3, [r2, #0]
 80015ee:	4b6f      	ldr	r3, [pc, #444]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a6e      	ldr	r2, [pc, #440]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 80015f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015f8:	6013      	str	r3, [r2, #0]
 80015fa:	e00b      	b.n	8001614 <HAL_RCC_OscConfig+0xd4>
 80015fc:	4b6b      	ldr	r3, [pc, #428]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a6a      	ldr	r2, [pc, #424]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 8001602:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001606:	6013      	str	r3, [r2, #0]
 8001608:	4b68      	ldr	r3, [pc, #416]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a67      	ldr	r2, [pc, #412]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 800160e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001612:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d013      	beq.n	8001644 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800161c:	f7fe fe00 	bl	8000220 <HAL_GetTick>
 8001620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001622:	e008      	b.n	8001636 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001624:	f7fe fdfc 	bl	8000220 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b64      	cmp	r3, #100	; 0x64
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e1fa      	b.n	8001a2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001636:	4b5d      	ldr	r3, [pc, #372]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d0f0      	beq.n	8001624 <HAL_RCC_OscConfig+0xe4>
 8001642:	e014      	b.n	800166e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001644:	f7fe fdec 	bl	8000220 <HAL_GetTick>
 8001648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800164a:	e008      	b.n	800165e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800164c:	f7fe fde8 	bl	8000220 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b64      	cmp	r3, #100	; 0x64
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e1e6      	b.n	8001a2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800165e:	4b53      	ldr	r3, [pc, #332]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d1f0      	bne.n	800164c <HAL_RCC_OscConfig+0x10c>
 800166a:	e000      	b.n	800166e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800166c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	2b00      	cmp	r3, #0
 8001678:	d063      	beq.n	8001742 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800167a:	4b4c      	ldr	r3, [pc, #304]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f003 030c 	and.w	r3, r3, #12
 8001682:	2b00      	cmp	r3, #0
 8001684:	d00b      	beq.n	800169e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001686:	4b49      	ldr	r3, [pc, #292]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f003 030c 	and.w	r3, r3, #12
 800168e:	2b08      	cmp	r3, #8
 8001690:	d11c      	bne.n	80016cc <HAL_RCC_OscConfig+0x18c>
 8001692:	4b46      	ldr	r3, [pc, #280]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d116      	bne.n	80016cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800169e:	4b43      	ldr	r3, [pc, #268]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d005      	beq.n	80016b6 <HAL_RCC_OscConfig+0x176>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	691b      	ldr	r3, [r3, #16]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d001      	beq.n	80016b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e1ba      	b.n	8001a2c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016b6:	4b3d      	ldr	r3, [pc, #244]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	695b      	ldr	r3, [r3, #20]
 80016c2:	00db      	lsls	r3, r3, #3
 80016c4:	4939      	ldr	r1, [pc, #228]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 80016c6:	4313      	orrs	r3, r2
 80016c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ca:	e03a      	b.n	8001742 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	691b      	ldr	r3, [r3, #16]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d020      	beq.n	8001716 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016d4:	4b36      	ldr	r3, [pc, #216]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 80016d6:	2201      	movs	r2, #1
 80016d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016da:	f7fe fda1 	bl	8000220 <HAL_GetTick>
 80016de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016e0:	e008      	b.n	80016f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016e2:	f7fe fd9d 	bl	8000220 <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d901      	bls.n	80016f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e19b      	b.n	8001a2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016f4:	4b2d      	ldr	r3, [pc, #180]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0302 	and.w	r3, r3, #2
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d0f0      	beq.n	80016e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001700:	4b2a      	ldr	r3, [pc, #168]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	695b      	ldr	r3, [r3, #20]
 800170c:	00db      	lsls	r3, r3, #3
 800170e:	4927      	ldr	r1, [pc, #156]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 8001710:	4313      	orrs	r3, r2
 8001712:	600b      	str	r3, [r1, #0]
 8001714:	e015      	b.n	8001742 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001716:	4b26      	ldr	r3, [pc, #152]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800171c:	f7fe fd80 	bl	8000220 <HAL_GetTick>
 8001720:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001722:	e008      	b.n	8001736 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001724:	f7fe fd7c 	bl	8000220 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	2b02      	cmp	r3, #2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e17a      	b.n	8001a2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001736:	4b1d      	ldr	r3, [pc, #116]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	2b00      	cmp	r3, #0
 8001740:	d1f0      	bne.n	8001724 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0308 	and.w	r3, r3, #8
 800174a:	2b00      	cmp	r3, #0
 800174c:	d03a      	beq.n	80017c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	699b      	ldr	r3, [r3, #24]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d019      	beq.n	800178a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001756:	4b17      	ldr	r3, [pc, #92]	; (80017b4 <HAL_RCC_OscConfig+0x274>)
 8001758:	2201      	movs	r2, #1
 800175a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800175c:	f7fe fd60 	bl	8000220 <HAL_GetTick>
 8001760:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001762:	e008      	b.n	8001776 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001764:	f7fe fd5c 	bl	8000220 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b02      	cmp	r3, #2
 8001770:	d901      	bls.n	8001776 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e15a      	b.n	8001a2c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001776:	4b0d      	ldr	r3, [pc, #52]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 8001778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	2b00      	cmp	r3, #0
 8001780:	d0f0      	beq.n	8001764 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001782:	2001      	movs	r0, #1
 8001784:	f000 fadc 	bl	8001d40 <RCC_Delay>
 8001788:	e01c      	b.n	80017c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800178a:	4b0a      	ldr	r3, [pc, #40]	; (80017b4 <HAL_RCC_OscConfig+0x274>)
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001790:	f7fe fd46 	bl	8000220 <HAL_GetTick>
 8001794:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001796:	e00f      	b.n	80017b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001798:	f7fe fd42 	bl	8000220 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d908      	bls.n	80017b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e140      	b.n	8001a2c <HAL_RCC_OscConfig+0x4ec>
 80017aa:	bf00      	nop
 80017ac:	40021000 	.word	0x40021000
 80017b0:	42420000 	.word	0x42420000
 80017b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017b8:	4b9e      	ldr	r3, [pc, #632]	; (8001a34 <HAL_RCC_OscConfig+0x4f4>)
 80017ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017bc:	f003 0302 	and.w	r3, r3, #2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d1e9      	bne.n	8001798 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0304 	and.w	r3, r3, #4
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	f000 80a6 	beq.w	800191e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017d2:	2300      	movs	r3, #0
 80017d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017d6:	4b97      	ldr	r3, [pc, #604]	; (8001a34 <HAL_RCC_OscConfig+0x4f4>)
 80017d8:	69db      	ldr	r3, [r3, #28]
 80017da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d10d      	bne.n	80017fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017e2:	4b94      	ldr	r3, [pc, #592]	; (8001a34 <HAL_RCC_OscConfig+0x4f4>)
 80017e4:	69db      	ldr	r3, [r3, #28]
 80017e6:	4a93      	ldr	r2, [pc, #588]	; (8001a34 <HAL_RCC_OscConfig+0x4f4>)
 80017e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ec:	61d3      	str	r3, [r2, #28]
 80017ee:	4b91      	ldr	r3, [pc, #580]	; (8001a34 <HAL_RCC_OscConfig+0x4f4>)
 80017f0:	69db      	ldr	r3, [r3, #28]
 80017f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f6:	60bb      	str	r3, [r7, #8]
 80017f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017fa:	2301      	movs	r3, #1
 80017fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017fe:	4b8e      	ldr	r3, [pc, #568]	; (8001a38 <HAL_RCC_OscConfig+0x4f8>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001806:	2b00      	cmp	r3, #0
 8001808:	d118      	bne.n	800183c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800180a:	4b8b      	ldr	r3, [pc, #556]	; (8001a38 <HAL_RCC_OscConfig+0x4f8>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a8a      	ldr	r2, [pc, #552]	; (8001a38 <HAL_RCC_OscConfig+0x4f8>)
 8001810:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001814:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001816:	f7fe fd03 	bl	8000220 <HAL_GetTick>
 800181a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800181c:	e008      	b.n	8001830 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800181e:	f7fe fcff 	bl	8000220 <HAL_GetTick>
 8001822:	4602      	mov	r2, r0
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	2b64      	cmp	r3, #100	; 0x64
 800182a:	d901      	bls.n	8001830 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800182c:	2303      	movs	r3, #3
 800182e:	e0fd      	b.n	8001a2c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001830:	4b81      	ldr	r3, [pc, #516]	; (8001a38 <HAL_RCC_OscConfig+0x4f8>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001838:	2b00      	cmp	r3, #0
 800183a:	d0f0      	beq.n	800181e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d106      	bne.n	8001852 <HAL_RCC_OscConfig+0x312>
 8001844:	4b7b      	ldr	r3, [pc, #492]	; (8001a34 <HAL_RCC_OscConfig+0x4f4>)
 8001846:	6a1b      	ldr	r3, [r3, #32]
 8001848:	4a7a      	ldr	r2, [pc, #488]	; (8001a34 <HAL_RCC_OscConfig+0x4f4>)
 800184a:	f043 0301 	orr.w	r3, r3, #1
 800184e:	6213      	str	r3, [r2, #32]
 8001850:	e02d      	b.n	80018ae <HAL_RCC_OscConfig+0x36e>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d10c      	bne.n	8001874 <HAL_RCC_OscConfig+0x334>
 800185a:	4b76      	ldr	r3, [pc, #472]	; (8001a34 <HAL_RCC_OscConfig+0x4f4>)
 800185c:	6a1b      	ldr	r3, [r3, #32]
 800185e:	4a75      	ldr	r2, [pc, #468]	; (8001a34 <HAL_RCC_OscConfig+0x4f4>)
 8001860:	f023 0301 	bic.w	r3, r3, #1
 8001864:	6213      	str	r3, [r2, #32]
 8001866:	4b73      	ldr	r3, [pc, #460]	; (8001a34 <HAL_RCC_OscConfig+0x4f4>)
 8001868:	6a1b      	ldr	r3, [r3, #32]
 800186a:	4a72      	ldr	r2, [pc, #456]	; (8001a34 <HAL_RCC_OscConfig+0x4f4>)
 800186c:	f023 0304 	bic.w	r3, r3, #4
 8001870:	6213      	str	r3, [r2, #32]
 8001872:	e01c      	b.n	80018ae <HAL_RCC_OscConfig+0x36e>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	2b05      	cmp	r3, #5
 800187a:	d10c      	bne.n	8001896 <HAL_RCC_OscConfig+0x356>
 800187c:	4b6d      	ldr	r3, [pc, #436]	; (8001a34 <HAL_RCC_OscConfig+0x4f4>)
 800187e:	6a1b      	ldr	r3, [r3, #32]
 8001880:	4a6c      	ldr	r2, [pc, #432]	; (8001a34 <HAL_RCC_OscConfig+0x4f4>)
 8001882:	f043 0304 	orr.w	r3, r3, #4
 8001886:	6213      	str	r3, [r2, #32]
 8001888:	4b6a      	ldr	r3, [pc, #424]	; (8001a34 <HAL_RCC_OscConfig+0x4f4>)
 800188a:	6a1b      	ldr	r3, [r3, #32]
 800188c:	4a69      	ldr	r2, [pc, #420]	; (8001a34 <HAL_RCC_OscConfig+0x4f4>)
 800188e:	f043 0301 	orr.w	r3, r3, #1
 8001892:	6213      	str	r3, [r2, #32]
 8001894:	e00b      	b.n	80018ae <HAL_RCC_OscConfig+0x36e>
 8001896:	4b67      	ldr	r3, [pc, #412]	; (8001a34 <HAL_RCC_OscConfig+0x4f4>)
 8001898:	6a1b      	ldr	r3, [r3, #32]
 800189a:	4a66      	ldr	r2, [pc, #408]	; (8001a34 <HAL_RCC_OscConfig+0x4f4>)
 800189c:	f023 0301 	bic.w	r3, r3, #1
 80018a0:	6213      	str	r3, [r2, #32]
 80018a2:	4b64      	ldr	r3, [pc, #400]	; (8001a34 <HAL_RCC_OscConfig+0x4f4>)
 80018a4:	6a1b      	ldr	r3, [r3, #32]
 80018a6:	4a63      	ldr	r2, [pc, #396]	; (8001a34 <HAL_RCC_OscConfig+0x4f4>)
 80018a8:	f023 0304 	bic.w	r3, r3, #4
 80018ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d015      	beq.n	80018e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018b6:	f7fe fcb3 	bl	8000220 <HAL_GetTick>
 80018ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018bc:	e00a      	b.n	80018d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018be:	f7fe fcaf 	bl	8000220 <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e0ab      	b.n	8001a2c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018d4:	4b57      	ldr	r3, [pc, #348]	; (8001a34 <HAL_RCC_OscConfig+0x4f4>)
 80018d6:	6a1b      	ldr	r3, [r3, #32]
 80018d8:	f003 0302 	and.w	r3, r3, #2
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d0ee      	beq.n	80018be <HAL_RCC_OscConfig+0x37e>
 80018e0:	e014      	b.n	800190c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018e2:	f7fe fc9d 	bl	8000220 <HAL_GetTick>
 80018e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018e8:	e00a      	b.n	8001900 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ea:	f7fe fc99 	bl	8000220 <HAL_GetTick>
 80018ee:	4602      	mov	r2, r0
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d901      	bls.n	8001900 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80018fc:	2303      	movs	r3, #3
 80018fe:	e095      	b.n	8001a2c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001900:	4b4c      	ldr	r3, [pc, #304]	; (8001a34 <HAL_RCC_OscConfig+0x4f4>)
 8001902:	6a1b      	ldr	r3, [r3, #32]
 8001904:	f003 0302 	and.w	r3, r3, #2
 8001908:	2b00      	cmp	r3, #0
 800190a:	d1ee      	bne.n	80018ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800190c:	7dfb      	ldrb	r3, [r7, #23]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d105      	bne.n	800191e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001912:	4b48      	ldr	r3, [pc, #288]	; (8001a34 <HAL_RCC_OscConfig+0x4f4>)
 8001914:	69db      	ldr	r3, [r3, #28]
 8001916:	4a47      	ldr	r2, [pc, #284]	; (8001a34 <HAL_RCC_OscConfig+0x4f4>)
 8001918:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800191c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	69db      	ldr	r3, [r3, #28]
 8001922:	2b00      	cmp	r3, #0
 8001924:	f000 8081 	beq.w	8001a2a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001928:	4b42      	ldr	r3, [pc, #264]	; (8001a34 <HAL_RCC_OscConfig+0x4f4>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f003 030c 	and.w	r3, r3, #12
 8001930:	2b08      	cmp	r3, #8
 8001932:	d061      	beq.n	80019f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	69db      	ldr	r3, [r3, #28]
 8001938:	2b02      	cmp	r3, #2
 800193a:	d146      	bne.n	80019ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800193c:	4b3f      	ldr	r3, [pc, #252]	; (8001a3c <HAL_RCC_OscConfig+0x4fc>)
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001942:	f7fe fc6d 	bl	8000220 <HAL_GetTick>
 8001946:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001948:	e008      	b.n	800195c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800194a:	f7fe fc69 	bl	8000220 <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b02      	cmp	r3, #2
 8001956:	d901      	bls.n	800195c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e067      	b.n	8001a2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800195c:	4b35      	ldr	r3, [pc, #212]	; (8001a34 <HAL_RCC_OscConfig+0x4f4>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d1f0      	bne.n	800194a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6a1b      	ldr	r3, [r3, #32]
 800196c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001970:	d108      	bne.n	8001984 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001972:	4b30      	ldr	r3, [pc, #192]	; (8001a34 <HAL_RCC_OscConfig+0x4f4>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	492d      	ldr	r1, [pc, #180]	; (8001a34 <HAL_RCC_OscConfig+0x4f4>)
 8001980:	4313      	orrs	r3, r2
 8001982:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001984:	4b2b      	ldr	r3, [pc, #172]	; (8001a34 <HAL_RCC_OscConfig+0x4f4>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a19      	ldr	r1, [r3, #32]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001994:	430b      	orrs	r3, r1
 8001996:	4927      	ldr	r1, [pc, #156]	; (8001a34 <HAL_RCC_OscConfig+0x4f4>)
 8001998:	4313      	orrs	r3, r2
 800199a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800199c:	4b27      	ldr	r3, [pc, #156]	; (8001a3c <HAL_RCC_OscConfig+0x4fc>)
 800199e:	2201      	movs	r2, #1
 80019a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a2:	f7fe fc3d 	bl	8000220 <HAL_GetTick>
 80019a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019a8:	e008      	b.n	80019bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019aa:	f7fe fc39 	bl	8000220 <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d901      	bls.n	80019bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e037      	b.n	8001a2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019bc:	4b1d      	ldr	r3, [pc, #116]	; (8001a34 <HAL_RCC_OscConfig+0x4f4>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d0f0      	beq.n	80019aa <HAL_RCC_OscConfig+0x46a>
 80019c8:	e02f      	b.n	8001a2a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ca:	4b1c      	ldr	r3, [pc, #112]	; (8001a3c <HAL_RCC_OscConfig+0x4fc>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d0:	f7fe fc26 	bl	8000220 <HAL_GetTick>
 80019d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019d6:	e008      	b.n	80019ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d8:	f7fe fc22 	bl	8000220 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e020      	b.n	8001a2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019ea:	4b12      	ldr	r3, [pc, #72]	; (8001a34 <HAL_RCC_OscConfig+0x4f4>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d1f0      	bne.n	80019d8 <HAL_RCC_OscConfig+0x498>
 80019f6:	e018      	b.n	8001a2a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	69db      	ldr	r3, [r3, #28]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d101      	bne.n	8001a04 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e013      	b.n	8001a2c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a04:	4b0b      	ldr	r3, [pc, #44]	; (8001a34 <HAL_RCC_OscConfig+0x4f4>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a1b      	ldr	r3, [r3, #32]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d106      	bne.n	8001a26 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d001      	beq.n	8001a2a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e000      	b.n	8001a2c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001a2a:	2300      	movs	r3, #0
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3718      	adds	r7, #24
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	40021000 	.word	0x40021000
 8001a38:	40007000 	.word	0x40007000
 8001a3c:	42420060 	.word	0x42420060

08001a40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d101      	bne.n	8001a54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e0d0      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a54:	4b6a      	ldr	r3, [pc, #424]	; (8001c00 <HAL_RCC_ClockConfig+0x1c0>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0307 	and.w	r3, r3, #7
 8001a5c:	683a      	ldr	r2, [r7, #0]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d910      	bls.n	8001a84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a62:	4b67      	ldr	r3, [pc, #412]	; (8001c00 <HAL_RCC_ClockConfig+0x1c0>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f023 0207 	bic.w	r2, r3, #7
 8001a6a:	4965      	ldr	r1, [pc, #404]	; (8001c00 <HAL_RCC_ClockConfig+0x1c0>)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a72:	4b63      	ldr	r3, [pc, #396]	; (8001c00 <HAL_RCC_ClockConfig+0x1c0>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	683a      	ldr	r2, [r7, #0]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d001      	beq.n	8001a84 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e0b8      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d020      	beq.n	8001ad2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0304 	and.w	r3, r3, #4
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d005      	beq.n	8001aa8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a9c:	4b59      	ldr	r3, [pc, #356]	; (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	4a58      	ldr	r2, [pc, #352]	; (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001aa6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0308 	and.w	r3, r3, #8
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d005      	beq.n	8001ac0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ab4:	4b53      	ldr	r3, [pc, #332]	; (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	4a52      	ldr	r2, [pc, #328]	; (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001aba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001abe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ac0:	4b50      	ldr	r3, [pc, #320]	; (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	494d      	ldr	r1, [pc, #308]	; (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d040      	beq.n	8001b60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d107      	bne.n	8001af6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ae6:	4b47      	ldr	r3, [pc, #284]	; (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d115      	bne.n	8001b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e07f      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d107      	bne.n	8001b0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001afe:	4b41      	ldr	r3, [pc, #260]	; (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d109      	bne.n	8001b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e073      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b0e:	4b3d      	ldr	r3, [pc, #244]	; (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d101      	bne.n	8001b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e06b      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b1e:	4b39      	ldr	r3, [pc, #228]	; (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f023 0203 	bic.w	r2, r3, #3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	4936      	ldr	r1, [pc, #216]	; (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b30:	f7fe fb76 	bl	8000220 <HAL_GetTick>
 8001b34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b36:	e00a      	b.n	8001b4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b38:	f7fe fb72 	bl	8000220 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e053      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b4e:	4b2d      	ldr	r3, [pc, #180]	; (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f003 020c 	and.w	r2, r3, #12
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d1eb      	bne.n	8001b38 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b60:	4b27      	ldr	r3, [pc, #156]	; (8001c00 <HAL_RCC_ClockConfig+0x1c0>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0307 	and.w	r3, r3, #7
 8001b68:	683a      	ldr	r2, [r7, #0]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d210      	bcs.n	8001b90 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b6e:	4b24      	ldr	r3, [pc, #144]	; (8001c00 <HAL_RCC_ClockConfig+0x1c0>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f023 0207 	bic.w	r2, r3, #7
 8001b76:	4922      	ldr	r1, [pc, #136]	; (8001c00 <HAL_RCC_ClockConfig+0x1c0>)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b7e:	4b20      	ldr	r3, [pc, #128]	; (8001c00 <HAL_RCC_ClockConfig+0x1c0>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0307 	and.w	r3, r3, #7
 8001b86:	683a      	ldr	r2, [r7, #0]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d001      	beq.n	8001b90 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e032      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0304 	and.w	r3, r3, #4
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d008      	beq.n	8001bae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b9c:	4b19      	ldr	r3, [pc, #100]	; (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	4916      	ldr	r1, [pc, #88]	; (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001baa:	4313      	orrs	r3, r2
 8001bac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0308 	and.w	r3, r3, #8
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d009      	beq.n	8001bce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bba:	4b12      	ldr	r3, [pc, #72]	; (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	691b      	ldr	r3, [r3, #16]
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	490e      	ldr	r1, [pc, #56]	; (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bce:	f000 f821 	bl	8001c14 <HAL_RCC_GetSysClockFreq>
 8001bd2:	4601      	mov	r1, r0
 8001bd4:	4b0b      	ldr	r3, [pc, #44]	; (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	091b      	lsrs	r3, r3, #4
 8001bda:	f003 030f 	and.w	r3, r3, #15
 8001bde:	4a0a      	ldr	r2, [pc, #40]	; (8001c08 <HAL_RCC_ClockConfig+0x1c8>)
 8001be0:	5cd3      	ldrb	r3, [r2, r3]
 8001be2:	fa21 f303 	lsr.w	r3, r1, r3
 8001be6:	4a09      	ldr	r2, [pc, #36]	; (8001c0c <HAL_RCC_ClockConfig+0x1cc>)
 8001be8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001bea:	4b09      	ldr	r3, [pc, #36]	; (8001c10 <HAL_RCC_ClockConfig+0x1d0>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7fe fad4 	bl	800019c <HAL_InitTick>

  return HAL_OK;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	40022000 	.word	0x40022000
 8001c04:	40021000 	.word	0x40021000
 8001c08:	08007500 	.word	0x08007500
 8001c0c:	20000108 	.word	0x20000108
 8001c10:	20000000 	.word	0x20000000

08001c14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c14:	b490      	push	{r4, r7}
 8001c16:	b08a      	sub	sp, #40	; 0x28
 8001c18:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001c1a:	4b2a      	ldr	r3, [pc, #168]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001c1c:	1d3c      	adds	r4, r7, #4
 8001c1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001c24:	4b28      	ldr	r3, [pc, #160]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c26:	881b      	ldrh	r3, [r3, #0]
 8001c28:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	61fb      	str	r3, [r7, #28]
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61bb      	str	r3, [r7, #24]
 8001c32:	2300      	movs	r3, #0
 8001c34:	627b      	str	r3, [r7, #36]	; 0x24
 8001c36:	2300      	movs	r3, #0
 8001c38:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c3e:	4b23      	ldr	r3, [pc, #140]	; (8001ccc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	f003 030c 	and.w	r3, r3, #12
 8001c4a:	2b04      	cmp	r3, #4
 8001c4c:	d002      	beq.n	8001c54 <HAL_RCC_GetSysClockFreq+0x40>
 8001c4e:	2b08      	cmp	r3, #8
 8001c50:	d003      	beq.n	8001c5a <HAL_RCC_GetSysClockFreq+0x46>
 8001c52:	e02d      	b.n	8001cb0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c54:	4b1e      	ldr	r3, [pc, #120]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c56:	623b      	str	r3, [r7, #32]
      break;
 8001c58:	e02d      	b.n	8001cb6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	0c9b      	lsrs	r3, r3, #18
 8001c5e:	f003 030f 	and.w	r3, r3, #15
 8001c62:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c66:	4413      	add	r3, r2
 8001c68:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001c6c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d013      	beq.n	8001ca0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c78:	4b14      	ldr	r3, [pc, #80]	; (8001ccc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	0c5b      	lsrs	r3, r3, #17
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c86:	4413      	add	r3, r2
 8001c88:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001c8c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	4a0f      	ldr	r2, [pc, #60]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c92:	fb02 f203 	mul.w	r2, r2, r3
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c9c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c9e:	e004      	b.n	8001caa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	4a0c      	ldr	r2, [pc, #48]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ca4:	fb02 f303 	mul.w	r3, r2, r3
 8001ca8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cac:	623b      	str	r3, [r7, #32]
      break;
 8001cae:	e002      	b.n	8001cb6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001cb0:	4b09      	ldr	r3, [pc, #36]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001cb2:	623b      	str	r3, [r7, #32]
      break;
 8001cb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cb6:	6a3b      	ldr	r3, [r7, #32]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3728      	adds	r7, #40	; 0x28
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bc90      	pop	{r4, r7}
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	08007310 	.word	0x08007310
 8001cc8:	08007320 	.word	0x08007320
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	00b71b00 	.word	0x00b71b00
 8001cd4:	003d0900 	.word	0x003d0900
 8001cd8:	007a1200 	.word	0x007a1200

08001cdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ce0:	4b02      	ldr	r3, [pc, #8]	; (8001cec <HAL_RCC_GetHCLKFreq+0x10>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bc80      	pop	{r7}
 8001cea:	4770      	bx	lr
 8001cec:	20000108 	.word	0x20000108

08001cf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001cf4:	f7ff fff2 	bl	8001cdc <HAL_RCC_GetHCLKFreq>
 8001cf8:	4601      	mov	r1, r0
 8001cfa:	4b05      	ldr	r3, [pc, #20]	; (8001d10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	0a1b      	lsrs	r3, r3, #8
 8001d00:	f003 0307 	and.w	r3, r3, #7
 8001d04:	4a03      	ldr	r2, [pc, #12]	; (8001d14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d06:	5cd3      	ldrb	r3, [r2, r3]
 8001d08:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	40021000 	.word	0x40021000
 8001d14:	08007510 	.word	0x08007510

08001d18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d1c:	f7ff ffde 	bl	8001cdc <HAL_RCC_GetHCLKFreq>
 8001d20:	4601      	mov	r1, r0
 8001d22:	4b05      	ldr	r3, [pc, #20]	; (8001d38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	0adb      	lsrs	r3, r3, #11
 8001d28:	f003 0307 	and.w	r3, r3, #7
 8001d2c:	4a03      	ldr	r2, [pc, #12]	; (8001d3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d2e:	5cd3      	ldrb	r3, [r2, r3]
 8001d30:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	08007510 	.word	0x08007510

08001d40 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d48:	4b0a      	ldr	r3, [pc, #40]	; (8001d74 <RCC_Delay+0x34>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a0a      	ldr	r2, [pc, #40]	; (8001d78 <RCC_Delay+0x38>)
 8001d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d52:	0a5b      	lsrs	r3, r3, #9
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	fb02 f303 	mul.w	r3, r2, r3
 8001d5a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d5c:	bf00      	nop
  }
  while (Delay --);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	1e5a      	subs	r2, r3, #1
 8001d62:	60fa      	str	r2, [r7, #12]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d1f9      	bne.n	8001d5c <RCC_Delay+0x1c>
}
 8001d68:	bf00      	nop
 8001d6a:	3714      	adds	r7, #20
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bc80      	pop	{r7}
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	20000108 	.word	0x20000108
 8001d78:	10624dd3 	.word	0x10624dd3

08001d7c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001d84:	2300      	movs	r3, #0
 8001d86:	613b      	str	r3, [r7, #16]
 8001d88:	2300      	movs	r3, #0
 8001d8a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0301 	and.w	r3, r3, #1
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d07d      	beq.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d9c:	4b4f      	ldr	r3, [pc, #316]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d9e:	69db      	ldr	r3, [r3, #28]
 8001da0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d10d      	bne.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001da8:	4b4c      	ldr	r3, [pc, #304]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001daa:	69db      	ldr	r3, [r3, #28]
 8001dac:	4a4b      	ldr	r2, [pc, #300]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001db2:	61d3      	str	r3, [r2, #28]
 8001db4:	4b49      	ldr	r3, [pc, #292]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001db6:	69db      	ldr	r3, [r3, #28]
 8001db8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dbc:	60bb      	str	r3, [r7, #8]
 8001dbe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc4:	4b46      	ldr	r3, [pc, #280]	; (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d118      	bne.n	8001e02 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dd0:	4b43      	ldr	r3, [pc, #268]	; (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a42      	ldr	r2, [pc, #264]	; (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001dd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dda:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ddc:	f7fe fa20 	bl	8000220 <HAL_GetTick>
 8001de0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de2:	e008      	b.n	8001df6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001de4:	f7fe fa1c 	bl	8000220 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b64      	cmp	r3, #100	; 0x64
 8001df0:	d901      	bls.n	8001df6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e06d      	b.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df6:	4b3a      	ldr	r3, [pc, #232]	; (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d0f0      	beq.n	8001de4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e02:	4b36      	ldr	r3, [pc, #216]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e04:	6a1b      	ldr	r3, [r3, #32]
 8001e06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e0a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d02e      	beq.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e1a:	68fa      	ldr	r2, [r7, #12]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d027      	beq.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e20:	4b2e      	ldr	r3, [pc, #184]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e22:	6a1b      	ldr	r3, [r3, #32]
 8001e24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e28:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e2a:	4b2e      	ldr	r3, [pc, #184]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e30:	4b2c      	ldr	r3, [pc, #176]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001e36:	4a29      	ldr	r2, [pc, #164]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d014      	beq.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e46:	f7fe f9eb 	bl	8000220 <HAL_GetTick>
 8001e4a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e4c:	e00a      	b.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e4e:	f7fe f9e7 	bl	8000220 <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e036      	b.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e64:	4b1d      	ldr	r3, [pc, #116]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e66:	6a1b      	ldr	r3, [r3, #32]
 8001e68:	f003 0302 	and.w	r3, r3, #2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d0ee      	beq.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e70:	4b1a      	ldr	r3, [pc, #104]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e72:	6a1b      	ldr	r3, [r3, #32]
 8001e74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	4917      	ldr	r1, [pc, #92]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e82:	7dfb      	ldrb	r3, [r7, #23]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d105      	bne.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e88:	4b14      	ldr	r3, [pc, #80]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e8a:	69db      	ldr	r3, [r3, #28]
 8001e8c:	4a13      	ldr	r2, [pc, #76]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e92:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d008      	beq.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001ea0:	4b0e      	ldr	r3, [pc, #56]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	490b      	ldr	r1, [pc, #44]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0310 	and.w	r3, r3, #16
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d008      	beq.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001ebe:	4b07      	ldr	r3, [pc, #28]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	4904      	ldr	r1, [pc, #16]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3718      	adds	r7, #24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	40007000 	.word	0x40007000
 8001ee4:	42420440 	.word	0x42420440

08001ee8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d101      	bne.n	8001efa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e03f      	b.n	8001f7a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d106      	bne.n	8001f14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f003 ffcc 	bl	8005eac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2224      	movs	r2, #36	; 0x24
 8001f18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	68da      	ldr	r2, [r3, #12]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f000 f9b1 	bl	8002294 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	691a      	ldr	r2, [r3, #16]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	695a      	ldr	r2, [r3, #20]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68da      	ldr	r2, [r3, #12]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2220      	movs	r2, #32
 8001f6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2220      	movs	r2, #32
 8001f74:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b088      	sub	sp, #32
 8001f86:	af02      	add	r7, sp, #8
 8001f88:	60f8      	str	r0, [r7, #12]
 8001f8a:	60b9      	str	r1, [r7, #8]
 8001f8c:	603b      	str	r3, [r7, #0]
 8001f8e:	4613      	mov	r3, r2
 8001f90:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001f92:	2300      	movs	r3, #0
 8001f94:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	2b20      	cmp	r3, #32
 8001fa0:	f040 8083 	bne.w	80020aa <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d002      	beq.n	8001fb0 <HAL_UART_Transmit+0x2e>
 8001faa:	88fb      	ldrh	r3, [r7, #6]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d101      	bne.n	8001fb4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e07b      	b.n	80020ac <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d101      	bne.n	8001fc2 <HAL_UART_Transmit+0x40>
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	e074      	b.n	80020ac <HAL_UART_Transmit+0x12a>
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2221      	movs	r2, #33	; 0x21
 8001fd4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001fd8:	f7fe f922 	bl	8000220 <HAL_GetTick>
 8001fdc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	88fa      	ldrh	r2, [r7, #6]
 8001fe2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	88fa      	ldrh	r2, [r7, #6]
 8001fe8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001fea:	e042      	b.n	8002072 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	b29a      	uxth	r2, r3
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002002:	d122      	bne.n	800204a <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	9300      	str	r3, [sp, #0]
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	2200      	movs	r2, #0
 800200c:	2180      	movs	r1, #128	; 0x80
 800200e:	68f8      	ldr	r0, [r7, #12]
 8002010:	f000 f8f6 	bl	8002200 <UART_WaitOnFlagUntilTimeout>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e046      	b.n	80020ac <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	881b      	ldrh	r3, [r3, #0]
 8002026:	461a      	mov	r2, r3
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002030:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d103      	bne.n	8002042 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	3302      	adds	r3, #2
 800203e:	60bb      	str	r3, [r7, #8]
 8002040:	e017      	b.n	8002072 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	3301      	adds	r3, #1
 8002046:	60bb      	str	r3, [r7, #8]
 8002048:	e013      	b.n	8002072 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	9300      	str	r3, [sp, #0]
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	2200      	movs	r2, #0
 8002052:	2180      	movs	r1, #128	; 0x80
 8002054:	68f8      	ldr	r0, [r7, #12]
 8002056:	f000 f8d3 	bl	8002200 <UART_WaitOnFlagUntilTimeout>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e023      	b.n	80020ac <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	1c5a      	adds	r2, r3, #1
 8002068:	60ba      	str	r2, [r7, #8]
 800206a:	781a      	ldrb	r2, [r3, #0]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002076:	b29b      	uxth	r3, r3
 8002078:	2b00      	cmp	r3, #0
 800207a:	d1b7      	bne.n	8001fec <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	9300      	str	r3, [sp, #0]
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	2200      	movs	r2, #0
 8002084:	2140      	movs	r1, #64	; 0x40
 8002086:	68f8      	ldr	r0, [r7, #12]
 8002088:	f000 f8ba 	bl	8002200 <UART_WaitOnFlagUntilTimeout>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e00a      	b.n	80020ac <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2220      	movs	r2, #32
 800209a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2200      	movs	r2, #0
 80020a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80020a6:	2300      	movs	r3, #0
 80020a8:	e000      	b.n	80020ac <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80020aa:	2302      	movs	r3, #2
  }
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3718      	adds	r7, #24
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b088      	sub	sp, #32
 80020b8:	af02      	add	r7, sp, #8
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	603b      	str	r3, [r7, #0]
 80020c0:	4613      	mov	r3, r2
 80020c2:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80020c4:	2300      	movs	r3, #0
 80020c6:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	2b20      	cmp	r3, #32
 80020d2:	f040 8090 	bne.w	80021f6 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d002      	beq.n	80020e2 <HAL_UART_Receive+0x2e>
 80020dc:	88fb      	ldrh	r3, [r7, #6]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d101      	bne.n	80020e6 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e088      	b.n	80021f8 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d101      	bne.n	80020f4 <HAL_UART_Receive+0x40>
 80020f0:	2302      	movs	r3, #2
 80020f2:	e081      	b.n	80021f8 <HAL_UART_Receive+0x144>
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2200      	movs	r2, #0
 8002100:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2222      	movs	r2, #34	; 0x22
 8002106:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800210a:	f7fe f889 	bl	8000220 <HAL_GetTick>
 800210e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	88fa      	ldrh	r2, [r7, #6]
 8002114:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	88fa      	ldrh	r2, [r7, #6]
 800211a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800211c:	e05c      	b.n	80021d8 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002122:	b29b      	uxth	r3, r3
 8002124:	3b01      	subs	r3, #1
 8002126:	b29a      	uxth	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002134:	d12b      	bne.n	800218e <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	9300      	str	r3, [sp, #0]
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	2200      	movs	r2, #0
 800213e:	2120      	movs	r1, #32
 8002140:	68f8      	ldr	r0, [r7, #12]
 8002142:	f000 f85d 	bl	8002200 <UART_WaitOnFlagUntilTimeout>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e053      	b.n	80021f8 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	691b      	ldr	r3, [r3, #16]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d10c      	bne.n	8002176 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	b29b      	uxth	r3, r3
 8002164:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002168:	b29a      	uxth	r2, r3
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	3302      	adds	r3, #2
 8002172:	60bb      	str	r3, [r7, #8]
 8002174:	e030      	b.n	80021d8 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	b29b      	uxth	r3, r3
 800217e:	b2db      	uxtb	r3, r3
 8002180:	b29a      	uxth	r2, r3
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	3301      	adds	r3, #1
 800218a:	60bb      	str	r3, [r7, #8]
 800218c:	e024      	b.n	80021d8 <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	9300      	str	r3, [sp, #0]
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	2200      	movs	r2, #0
 8002196:	2120      	movs	r1, #32
 8002198:	68f8      	ldr	r0, [r7, #12]
 800219a:	f000 f831 	bl	8002200 <UART_WaitOnFlagUntilTimeout>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e027      	b.n	80021f8 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	691b      	ldr	r3, [r3, #16]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d108      	bne.n	80021c2 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6859      	ldr	r1, [r3, #4]
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	1c5a      	adds	r2, r3, #1
 80021ba:	60ba      	str	r2, [r7, #8]
 80021bc:	b2ca      	uxtb	r2, r1
 80021be:	701a      	strb	r2, [r3, #0]
 80021c0:	e00a      	b.n	80021d8 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	b2da      	uxtb	r2, r3
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	1c59      	adds	r1, r3, #1
 80021ce:	60b9      	str	r1, [r7, #8]
 80021d0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80021d4:	b2d2      	uxtb	r2, r2
 80021d6:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80021dc:	b29b      	uxth	r3, r3
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d19d      	bne.n	800211e <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2220      	movs	r2, #32
 80021e6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80021f2:	2300      	movs	r3, #0
 80021f4:	e000      	b.n	80021f8 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80021f6:	2302      	movs	r3, #2
  }
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3718      	adds	r7, #24
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	603b      	str	r3, [r7, #0]
 800220c:	4613      	mov	r3, r2
 800220e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002210:	e02c      	b.n	800226c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002218:	d028      	beq.n	800226c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d007      	beq.n	8002230 <UART_WaitOnFlagUntilTimeout+0x30>
 8002220:	f7fd fffe 	bl	8000220 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	429a      	cmp	r2, r3
 800222e:	d21d      	bcs.n	800226c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68da      	ldr	r2, [r3, #12]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800223e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	695a      	ldr	r2, [r3, #20]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f022 0201 	bic.w	r2, r2, #1
 800224e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2220      	movs	r2, #32
 8002254:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2220      	movs	r2, #32
 800225c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2200      	movs	r2, #0
 8002264:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e00f      	b.n	800228c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	4013      	ands	r3, r2
 8002276:	68ba      	ldr	r2, [r7, #8]
 8002278:	429a      	cmp	r2, r3
 800227a:	bf0c      	ite	eq
 800227c:	2301      	moveq	r3, #1
 800227e:	2300      	movne	r3, #0
 8002280:	b2db      	uxtb	r3, r3
 8002282:	461a      	mov	r2, r3
 8002284:	79fb      	ldrb	r3, [r7, #7]
 8002286:	429a      	cmp	r2, r3
 8002288:	d0c3      	beq.n	8002212 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	3710      	adds	r7, #16
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68da      	ldr	r2, [r3, #12]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	430a      	orrs	r2, r1
 80022b0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	689a      	ldr	r2, [r3, #8]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	431a      	orrs	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	695b      	ldr	r3, [r3, #20]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80022ce:	f023 030c 	bic.w	r3, r3, #12
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	6812      	ldr	r2, [r2, #0]
 80022d6:	68f9      	ldr	r1, [r7, #12]
 80022d8:	430b      	orrs	r3, r1
 80022da:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	699a      	ldr	r2, [r3, #24]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	430a      	orrs	r2, r1
 80022f0:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a52      	ldr	r2, [pc, #328]	; (8002440 <UART_SetConfig+0x1ac>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d14e      	bne.n	800239a <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80022fc:	f7ff fd0c 	bl	8001d18 <HAL_RCC_GetPCLK2Freq>
 8002300:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002302:	68ba      	ldr	r2, [r7, #8]
 8002304:	4613      	mov	r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	4413      	add	r3, r2
 800230a:	009a      	lsls	r2, r3, #2
 800230c:	441a      	add	r2, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	fbb2 f3f3 	udiv	r3, r2, r3
 8002318:	4a4a      	ldr	r2, [pc, #296]	; (8002444 <UART_SetConfig+0x1b0>)
 800231a:	fba2 2303 	umull	r2, r3, r2, r3
 800231e:	095b      	lsrs	r3, r3, #5
 8002320:	0119      	lsls	r1, r3, #4
 8002322:	68ba      	ldr	r2, [r7, #8]
 8002324:	4613      	mov	r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	4413      	add	r3, r2
 800232a:	009a      	lsls	r2, r3, #2
 800232c:	441a      	add	r2, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	fbb2 f2f3 	udiv	r2, r2, r3
 8002338:	4b42      	ldr	r3, [pc, #264]	; (8002444 <UART_SetConfig+0x1b0>)
 800233a:	fba3 0302 	umull	r0, r3, r3, r2
 800233e:	095b      	lsrs	r3, r3, #5
 8002340:	2064      	movs	r0, #100	; 0x64
 8002342:	fb00 f303 	mul.w	r3, r0, r3
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	011b      	lsls	r3, r3, #4
 800234a:	3332      	adds	r3, #50	; 0x32
 800234c:	4a3d      	ldr	r2, [pc, #244]	; (8002444 <UART_SetConfig+0x1b0>)
 800234e:	fba2 2303 	umull	r2, r3, r2, r3
 8002352:	095b      	lsrs	r3, r3, #5
 8002354:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002358:	4419      	add	r1, r3
 800235a:	68ba      	ldr	r2, [r7, #8]
 800235c:	4613      	mov	r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	4413      	add	r3, r2
 8002362:	009a      	lsls	r2, r3, #2
 8002364:	441a      	add	r2, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002370:	4b34      	ldr	r3, [pc, #208]	; (8002444 <UART_SetConfig+0x1b0>)
 8002372:	fba3 0302 	umull	r0, r3, r3, r2
 8002376:	095b      	lsrs	r3, r3, #5
 8002378:	2064      	movs	r0, #100	; 0x64
 800237a:	fb00 f303 	mul.w	r3, r0, r3
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	011b      	lsls	r3, r3, #4
 8002382:	3332      	adds	r3, #50	; 0x32
 8002384:	4a2f      	ldr	r2, [pc, #188]	; (8002444 <UART_SetConfig+0x1b0>)
 8002386:	fba2 2303 	umull	r2, r3, r2, r3
 800238a:	095b      	lsrs	r3, r3, #5
 800238c:	f003 020f 	and.w	r2, r3, #15
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	440a      	add	r2, r1
 8002396:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002398:	e04d      	b.n	8002436 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800239a:	f7ff fca9 	bl	8001cf0 <HAL_RCC_GetPCLK1Freq>
 800239e:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80023a0:	68ba      	ldr	r2, [r7, #8]
 80023a2:	4613      	mov	r3, r2
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	4413      	add	r3, r2
 80023a8:	009a      	lsls	r2, r3, #2
 80023aa:	441a      	add	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b6:	4a23      	ldr	r2, [pc, #140]	; (8002444 <UART_SetConfig+0x1b0>)
 80023b8:	fba2 2303 	umull	r2, r3, r2, r3
 80023bc:	095b      	lsrs	r3, r3, #5
 80023be:	0119      	lsls	r1, r3, #4
 80023c0:	68ba      	ldr	r2, [r7, #8]
 80023c2:	4613      	mov	r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	4413      	add	r3, r2
 80023c8:	009a      	lsls	r2, r3, #2
 80023ca:	441a      	add	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	fbb2 f2f3 	udiv	r2, r2, r3
 80023d6:	4b1b      	ldr	r3, [pc, #108]	; (8002444 <UART_SetConfig+0x1b0>)
 80023d8:	fba3 0302 	umull	r0, r3, r3, r2
 80023dc:	095b      	lsrs	r3, r3, #5
 80023de:	2064      	movs	r0, #100	; 0x64
 80023e0:	fb00 f303 	mul.w	r3, r0, r3
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	011b      	lsls	r3, r3, #4
 80023e8:	3332      	adds	r3, #50	; 0x32
 80023ea:	4a16      	ldr	r2, [pc, #88]	; (8002444 <UART_SetConfig+0x1b0>)
 80023ec:	fba2 2303 	umull	r2, r3, r2, r3
 80023f0:	095b      	lsrs	r3, r3, #5
 80023f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023f6:	4419      	add	r1, r3
 80023f8:	68ba      	ldr	r2, [r7, #8]
 80023fa:	4613      	mov	r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	4413      	add	r3, r2
 8002400:	009a      	lsls	r2, r3, #2
 8002402:	441a      	add	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	fbb2 f2f3 	udiv	r2, r2, r3
 800240e:	4b0d      	ldr	r3, [pc, #52]	; (8002444 <UART_SetConfig+0x1b0>)
 8002410:	fba3 0302 	umull	r0, r3, r3, r2
 8002414:	095b      	lsrs	r3, r3, #5
 8002416:	2064      	movs	r0, #100	; 0x64
 8002418:	fb00 f303 	mul.w	r3, r0, r3
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	011b      	lsls	r3, r3, #4
 8002420:	3332      	adds	r3, #50	; 0x32
 8002422:	4a08      	ldr	r2, [pc, #32]	; (8002444 <UART_SetConfig+0x1b0>)
 8002424:	fba2 2303 	umull	r2, r3, r2, r3
 8002428:	095b      	lsrs	r3, r3, #5
 800242a:	f003 020f 	and.w	r2, r3, #15
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	440a      	add	r2, r1
 8002434:	609a      	str	r2, [r3, #8]
}
 8002436:	bf00      	nop
 8002438:	3710      	adds	r7, #16
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	40013800 	.word	0x40013800
 8002444:	51eb851f 	.word	0x51eb851f

08002448 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002448:	b084      	sub	sp, #16
 800244a:	b480      	push	{r7}
 800244c:	b083      	sub	sp, #12
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
 8002452:	f107 0014 	add.w	r0, r7, #20
 8002456:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800245a:	2300      	movs	r3, #0
}
 800245c:	4618      	mov	r0, r3
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	bc80      	pop	{r7}
 8002464:	b004      	add	sp, #16
 8002466:	4770      	bx	lr

08002468 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002468:	b480      	push	{r7}
 800246a:	b085      	sub	sp, #20
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002470:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002474:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800247c:	b29a      	uxth	r2, r3
 800247e:	89fb      	ldrh	r3, [r7, #14]
 8002480:	4313      	orrs	r3, r2
 8002482:	b29a      	uxth	r2, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800248a:	2300      	movs	r3, #0
}
 800248c:	4618      	mov	r0, r3
 800248e:	3714      	adds	r7, #20
 8002490:	46bd      	mov	sp, r7
 8002492:	bc80      	pop	{r7}
 8002494:	4770      	bx	lr

08002496 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002496:	b480      	push	{r7}
 8002498:	b085      	sub	sp, #20
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800249e:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80024a2:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	b21a      	sxth	r2, r3
 80024ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024b2:	43db      	mvns	r3, r3
 80024b4:	b21b      	sxth	r3, r3
 80024b6:	4013      	ands	r3, r2
 80024b8:	b21b      	sxth	r3, r3
 80024ba:	b29a      	uxth	r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3714      	adds	r7, #20
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bc80      	pop	{r7}
 80024cc:	4770      	bx	lr

080024ce <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80024ce:	b480      	push	{r7}
 80024d0:	b083      	sub	sp, #12
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
 80024d6:	460b      	mov	r3, r1
 80024d8:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80024da:	2300      	movs	r3, #0
}
 80024dc:	4618      	mov	r0, r3
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bc80      	pop	{r7}
 80024e4:	4770      	bx	lr

080024e6 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80024e6:	b084      	sub	sp, #16
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	f107 0014 	add.w	r0, r7, #20
 80024f4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f7ff ffa5 	bl	8002468 <USB_EnableGlobalInt>

  return HAL_OK;
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800252a:	b004      	add	sp, #16
 800252c:	4770      	bx	lr
	...

08002530 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002530:	b490      	push	{r4, r7}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800253a:	2300      	movs	r3, #0
 800253c:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	4413      	add	r3, r2
 8002548:	881b      	ldrh	r3, [r3, #0]
 800254a:	b29b      	uxth	r3, r3
 800254c:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002550:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002554:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	78db      	ldrb	r3, [r3, #3]
 800255a:	2b03      	cmp	r3, #3
 800255c:	d819      	bhi.n	8002592 <USB_ActivateEndpoint+0x62>
 800255e:	a201      	add	r2, pc, #4	; (adr r2, 8002564 <USB_ActivateEndpoint+0x34>)
 8002560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002564:	08002575 	.word	0x08002575
 8002568:	08002589 	.word	0x08002589
 800256c:	08002599 	.word	0x08002599
 8002570:	0800257f 	.word	0x0800257f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002574:	89bb      	ldrh	r3, [r7, #12]
 8002576:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800257a:	81bb      	strh	r3, [r7, #12]
      break;
 800257c:	e00d      	b.n	800259a <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800257e:	89bb      	ldrh	r3, [r7, #12]
 8002580:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002584:	81bb      	strh	r3, [r7, #12]
      break;
 8002586:	e008      	b.n	800259a <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002588:	89bb      	ldrh	r3, [r7, #12]
 800258a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800258e:	81bb      	strh	r3, [r7, #12]
      break;
 8002590:	e003      	b.n	800259a <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	73fb      	strb	r3, [r7, #15]
      break;
 8002596:	e000      	b.n	800259a <USB_ActivateEndpoint+0x6a>
      break;
 8002598:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	441a      	add	r2, r3
 80025a4:	89bb      	ldrh	r3, [r7, #12]
 80025a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	4413      	add	r3, r2
 80025c4:	881b      	ldrh	r3, [r3, #0]
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	4313      	orrs	r3, r2
 80025da:	b29c      	uxth	r4, r3
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	441a      	add	r2, r3
 80025e6:	4b8a      	ldr	r3, [pc, #552]	; (8002810 <USB_ActivateEndpoint+0x2e0>)
 80025e8:	4323      	orrs	r3, r4
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	7b1b      	ldrb	r3, [r3, #12]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f040 8112 	bne.w	800281c <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	785b      	ldrb	r3, [r3, #1]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d067      	beq.n	80026d0 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002600:	687c      	ldr	r4, [r7, #4]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002608:	b29b      	uxth	r3, r3
 800260a:	441c      	add	r4, r3
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	011b      	lsls	r3, r3, #4
 8002612:	4423      	add	r3, r4
 8002614:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002618:	461c      	mov	r4, r3
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	88db      	ldrh	r3, [r3, #6]
 800261e:	085b      	lsrs	r3, r3, #1
 8002620:	b29b      	uxth	r3, r3
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	b29b      	uxth	r3, r3
 8002626:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	4413      	add	r3, r2
 8002632:	881b      	ldrh	r3, [r3, #0]
 8002634:	b29c      	uxth	r4, r3
 8002636:	4623      	mov	r3, r4
 8002638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800263c:	2b00      	cmp	r3, #0
 800263e:	d014      	beq.n	800266a <USB_ActivateEndpoint+0x13a>
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	4413      	add	r3, r2
 800264a:	881b      	ldrh	r3, [r3, #0]
 800264c:	b29b      	uxth	r3, r3
 800264e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002656:	b29c      	uxth	r4, r3
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	441a      	add	r2, r3
 8002662:	4b6c      	ldr	r3, [pc, #432]	; (8002814 <USB_ActivateEndpoint+0x2e4>)
 8002664:	4323      	orrs	r3, r4
 8002666:	b29b      	uxth	r3, r3
 8002668:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	78db      	ldrb	r3, [r3, #3]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d018      	beq.n	80026a4 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	4413      	add	r3, r2
 800267c:	881b      	ldrh	r3, [r3, #0]
 800267e:	b29b      	uxth	r3, r3
 8002680:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002684:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002688:	b29c      	uxth	r4, r3
 800268a:	f084 0320 	eor.w	r3, r4, #32
 800268e:	b29c      	uxth	r4, r3
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	441a      	add	r2, r3
 800269a:	4b5d      	ldr	r3, [pc, #372]	; (8002810 <USB_ActivateEndpoint+0x2e0>)
 800269c:	4323      	orrs	r3, r4
 800269e:	b29b      	uxth	r3, r3
 80026a0:	8013      	strh	r3, [r2, #0]
 80026a2:	e22b      	b.n	8002afc <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	4413      	add	r3, r2
 80026ae:	881b      	ldrh	r3, [r3, #0]
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026ba:	b29c      	uxth	r4, r3
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	441a      	add	r2, r3
 80026c6:	4b52      	ldr	r3, [pc, #328]	; (8002810 <USB_ActivateEndpoint+0x2e0>)
 80026c8:	4323      	orrs	r3, r4
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	8013      	strh	r3, [r2, #0]
 80026ce:	e215      	b.n	8002afc <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80026d0:	687c      	ldr	r4, [r7, #4]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026d8:	b29b      	uxth	r3, r3
 80026da:	441c      	add	r4, r3
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	011b      	lsls	r3, r3, #4
 80026e2:	4423      	add	r3, r4
 80026e4:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80026e8:	461c      	mov	r4, r3
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	88db      	ldrh	r3, [r3, #6]
 80026ee:	085b      	lsrs	r3, r3, #1
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80026f8:	687c      	ldr	r4, [r7, #4]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002700:	b29b      	uxth	r3, r3
 8002702:	441c      	add	r4, r3
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	011b      	lsls	r3, r3, #4
 800270a:	4423      	add	r3, r4
 800270c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002710:	461c      	mov	r4, r3
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d10e      	bne.n	8002738 <USB_ActivateEndpoint+0x208>
 800271a:	8823      	ldrh	r3, [r4, #0]
 800271c:	b29b      	uxth	r3, r3
 800271e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002722:	b29b      	uxth	r3, r3
 8002724:	8023      	strh	r3, [r4, #0]
 8002726:	8823      	ldrh	r3, [r4, #0]
 8002728:	b29b      	uxth	r3, r3
 800272a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800272e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002732:	b29b      	uxth	r3, r3
 8002734:	8023      	strh	r3, [r4, #0]
 8002736:	e02d      	b.n	8002794 <USB_ActivateEndpoint+0x264>
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	2b3e      	cmp	r3, #62	; 0x3e
 800273e:	d812      	bhi.n	8002766 <USB_ActivateEndpoint+0x236>
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	691b      	ldr	r3, [r3, #16]
 8002744:	085b      	lsrs	r3, r3, #1
 8002746:	60bb      	str	r3, [r7, #8]
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	691b      	ldr	r3, [r3, #16]
 800274c:	f003 0301 	and.w	r3, r3, #1
 8002750:	2b00      	cmp	r3, #0
 8002752:	d002      	beq.n	800275a <USB_ActivateEndpoint+0x22a>
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	3301      	adds	r3, #1
 8002758:	60bb      	str	r3, [r7, #8]
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	b29b      	uxth	r3, r3
 800275e:	029b      	lsls	r3, r3, #10
 8002760:	b29b      	uxth	r3, r3
 8002762:	8023      	strh	r3, [r4, #0]
 8002764:	e016      	b.n	8002794 <USB_ActivateEndpoint+0x264>
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	095b      	lsrs	r3, r3, #5
 800276c:	60bb      	str	r3, [r7, #8]
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	f003 031f 	and.w	r3, r3, #31
 8002776:	2b00      	cmp	r3, #0
 8002778:	d102      	bne.n	8002780 <USB_ActivateEndpoint+0x250>
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	3b01      	subs	r3, #1
 800277e:	60bb      	str	r3, [r7, #8]
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	b29b      	uxth	r3, r3
 8002784:	029b      	lsls	r3, r3, #10
 8002786:	b29b      	uxth	r3, r3
 8002788:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800278c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002790:	b29b      	uxth	r3, r3
 8002792:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	4413      	add	r3, r2
 800279e:	881b      	ldrh	r3, [r3, #0]
 80027a0:	b29c      	uxth	r4, r3
 80027a2:	4623      	mov	r3, r4
 80027a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d014      	beq.n	80027d6 <USB_ActivateEndpoint+0x2a6>
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	4413      	add	r3, r2
 80027b6:	881b      	ldrh	r3, [r3, #0]
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027c2:	b29c      	uxth	r4, r3
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	441a      	add	r2, r3
 80027ce:	4b12      	ldr	r3, [pc, #72]	; (8002818 <USB_ActivateEndpoint+0x2e8>)
 80027d0:	4323      	orrs	r3, r4
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	4413      	add	r3, r2
 80027e0:	881b      	ldrh	r3, [r3, #0]
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ec:	b29c      	uxth	r4, r3
 80027ee:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80027f2:	b29c      	uxth	r4, r3
 80027f4:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80027f8:	b29c      	uxth	r4, r3
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	441a      	add	r2, r3
 8002804:	4b02      	ldr	r3, [pc, #8]	; (8002810 <USB_ActivateEndpoint+0x2e0>)
 8002806:	4323      	orrs	r3, r4
 8002808:	b29b      	uxth	r3, r3
 800280a:	8013      	strh	r3, [r2, #0]
 800280c:	e176      	b.n	8002afc <USB_ActivateEndpoint+0x5cc>
 800280e:	bf00      	nop
 8002810:	ffff8080 	.word	0xffff8080
 8002814:	ffff80c0 	.word	0xffff80c0
 8002818:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	4413      	add	r3, r2
 8002826:	881b      	ldrh	r3, [r3, #0]
 8002828:	b29b      	uxth	r3, r3
 800282a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800282e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002832:	b29c      	uxth	r4, r3
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	441a      	add	r2, r3
 800283e:	4b96      	ldr	r3, [pc, #600]	; (8002a98 <USB_ActivateEndpoint+0x568>)
 8002840:	4323      	orrs	r3, r4
 8002842:	b29b      	uxth	r3, r3
 8002844:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002846:	687c      	ldr	r4, [r7, #4]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800284e:	b29b      	uxth	r3, r3
 8002850:	441c      	add	r4, r3
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	011b      	lsls	r3, r3, #4
 8002858:	4423      	add	r3, r4
 800285a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800285e:	461c      	mov	r4, r3
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	891b      	ldrh	r3, [r3, #8]
 8002864:	085b      	lsrs	r3, r3, #1
 8002866:	b29b      	uxth	r3, r3
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	b29b      	uxth	r3, r3
 800286c:	8023      	strh	r3, [r4, #0]
 800286e:	687c      	ldr	r4, [r7, #4]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002876:	b29b      	uxth	r3, r3
 8002878:	441c      	add	r4, r3
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	011b      	lsls	r3, r3, #4
 8002880:	4423      	add	r3, r4
 8002882:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002886:	461c      	mov	r4, r3
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	895b      	ldrh	r3, [r3, #10]
 800288c:	085b      	lsrs	r3, r3, #1
 800288e:	b29b      	uxth	r3, r3
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	b29b      	uxth	r3, r3
 8002894:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	785b      	ldrb	r3, [r3, #1]
 800289a:	2b00      	cmp	r3, #0
 800289c:	f040 8088 	bne.w	80029b0 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	4413      	add	r3, r2
 80028aa:	881b      	ldrh	r3, [r3, #0]
 80028ac:	b29c      	uxth	r4, r3
 80028ae:	4623      	mov	r3, r4
 80028b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d014      	beq.n	80028e2 <USB_ActivateEndpoint+0x3b2>
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	4413      	add	r3, r2
 80028c2:	881b      	ldrh	r3, [r3, #0]
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ce:	b29c      	uxth	r4, r3
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	441a      	add	r2, r3
 80028da:	4b70      	ldr	r3, [pc, #448]	; (8002a9c <USB_ActivateEndpoint+0x56c>)
 80028dc:	4323      	orrs	r3, r4
 80028de:	b29b      	uxth	r3, r3
 80028e0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	4413      	add	r3, r2
 80028ec:	881b      	ldrh	r3, [r3, #0]
 80028ee:	b29c      	uxth	r4, r3
 80028f0:	4623      	mov	r3, r4
 80028f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d014      	beq.n	8002924 <USB_ActivateEndpoint+0x3f4>
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	4413      	add	r3, r2
 8002904:	881b      	ldrh	r3, [r3, #0]
 8002906:	b29b      	uxth	r3, r3
 8002908:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800290c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002910:	b29c      	uxth	r4, r3
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	441a      	add	r2, r3
 800291c:	4b60      	ldr	r3, [pc, #384]	; (8002aa0 <USB_ActivateEndpoint+0x570>)
 800291e:	4323      	orrs	r3, r4
 8002920:	b29b      	uxth	r3, r3
 8002922:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	4413      	add	r3, r2
 800292e:	881b      	ldrh	r3, [r3, #0]
 8002930:	b29b      	uxth	r3, r3
 8002932:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800293a:	b29c      	uxth	r4, r3
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	441a      	add	r2, r3
 8002946:	4b56      	ldr	r3, [pc, #344]	; (8002aa0 <USB_ActivateEndpoint+0x570>)
 8002948:	4323      	orrs	r3, r4
 800294a:	b29b      	uxth	r3, r3
 800294c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	4413      	add	r3, r2
 8002958:	881b      	ldrh	r3, [r3, #0]
 800295a:	b29b      	uxth	r3, r3
 800295c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002960:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002964:	b29c      	uxth	r4, r3
 8002966:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800296a:	b29c      	uxth	r4, r3
 800296c:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002970:	b29c      	uxth	r4, r3
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	441a      	add	r2, r3
 800297c:	4b49      	ldr	r3, [pc, #292]	; (8002aa4 <USB_ActivateEndpoint+0x574>)
 800297e:	4323      	orrs	r3, r4
 8002980:	b29b      	uxth	r3, r3
 8002982:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	4413      	add	r3, r2
 800298e:	881b      	ldrh	r3, [r3, #0]
 8002990:	b29b      	uxth	r3, r3
 8002992:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002996:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800299a:	b29c      	uxth	r4, r3
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	441a      	add	r2, r3
 80029a6:	4b3f      	ldr	r3, [pc, #252]	; (8002aa4 <USB_ActivateEndpoint+0x574>)
 80029a8:	4323      	orrs	r3, r4
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	8013      	strh	r3, [r2, #0]
 80029ae:	e0a5      	b.n	8002afc <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	4413      	add	r3, r2
 80029ba:	881b      	ldrh	r3, [r3, #0]
 80029bc:	b29c      	uxth	r4, r3
 80029be:	4623      	mov	r3, r4
 80029c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d014      	beq.n	80029f2 <USB_ActivateEndpoint+0x4c2>
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	4413      	add	r3, r2
 80029d2:	881b      	ldrh	r3, [r3, #0]
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029de:	b29c      	uxth	r4, r3
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	441a      	add	r2, r3
 80029ea:	4b2c      	ldr	r3, [pc, #176]	; (8002a9c <USB_ActivateEndpoint+0x56c>)
 80029ec:	4323      	orrs	r3, r4
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	4413      	add	r3, r2
 80029fc:	881b      	ldrh	r3, [r3, #0]
 80029fe:	b29c      	uxth	r4, r3
 8002a00:	4623      	mov	r3, r4
 8002a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d014      	beq.n	8002a34 <USB_ActivateEndpoint+0x504>
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	4413      	add	r3, r2
 8002a14:	881b      	ldrh	r3, [r3, #0]
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a20:	b29c      	uxth	r4, r3
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	441a      	add	r2, r3
 8002a2c:	4b1c      	ldr	r3, [pc, #112]	; (8002aa0 <USB_ActivateEndpoint+0x570>)
 8002a2e:	4323      	orrs	r3, r4
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	4413      	add	r3, r2
 8002a3e:	881b      	ldrh	r3, [r3, #0]
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a4a:	b29c      	uxth	r4, r3
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	441a      	add	r2, r3
 8002a56:	4b11      	ldr	r3, [pc, #68]	; (8002a9c <USB_ActivateEndpoint+0x56c>)
 8002a58:	4323      	orrs	r3, r4
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	78db      	ldrb	r3, [r3, #3]
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d020      	beq.n	8002aa8 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	4413      	add	r3, r2
 8002a70:	881b      	ldrh	r3, [r3, #0]
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a7c:	b29c      	uxth	r4, r3
 8002a7e:	f084 0320 	eor.w	r3, r4, #32
 8002a82:	b29c      	uxth	r4, r3
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	441a      	add	r2, r3
 8002a8e:	4b05      	ldr	r3, [pc, #20]	; (8002aa4 <USB_ActivateEndpoint+0x574>)
 8002a90:	4323      	orrs	r3, r4
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	8013      	strh	r3, [r2, #0]
 8002a96:	e01c      	b.n	8002ad2 <USB_ActivateEndpoint+0x5a2>
 8002a98:	ffff8180 	.word	0xffff8180
 8002a9c:	ffffc080 	.word	0xffffc080
 8002aa0:	ffff80c0 	.word	0xffff80c0
 8002aa4:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	4413      	add	r3, r2
 8002ab2:	881b      	ldrh	r3, [r3, #0]
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002aba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002abe:	b29c      	uxth	r4, r3
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	441a      	add	r2, r3
 8002aca:	4b0f      	ldr	r3, [pc, #60]	; (8002b08 <USB_ActivateEndpoint+0x5d8>)
 8002acc:	4323      	orrs	r3, r4
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	4413      	add	r3, r2
 8002adc:	881b      	ldrh	r3, [r3, #0]
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ae4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ae8:	b29c      	uxth	r4, r3
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	441a      	add	r2, r3
 8002af4:	4b04      	ldr	r3, [pc, #16]	; (8002b08 <USB_ActivateEndpoint+0x5d8>)
 8002af6:	4323      	orrs	r3, r4
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8002afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bc90      	pop	{r4, r7}
 8002b06:	4770      	bx	lr
 8002b08:	ffff8080 	.word	0xffff8080

08002b0c <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002b0c:	b490      	push	{r4, r7}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	7b1b      	ldrb	r3, [r3, #12]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d171      	bne.n	8002c02 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	785b      	ldrb	r3, [r3, #1]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d036      	beq.n	8002b94 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	4413      	add	r3, r2
 8002b30:	881b      	ldrh	r3, [r3, #0]
 8002b32:	b29c      	uxth	r4, r3
 8002b34:	4623      	mov	r3, r4
 8002b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d014      	beq.n	8002b68 <USB_DeactivateEndpoint+0x5c>
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	4413      	add	r3, r2
 8002b48:	881b      	ldrh	r3, [r3, #0]
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b54:	b29c      	uxth	r4, r3
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	441a      	add	r2, r3
 8002b60:	4b6b      	ldr	r3, [pc, #428]	; (8002d10 <USB_DeactivateEndpoint+0x204>)
 8002b62:	4323      	orrs	r3, r4
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	4413      	add	r3, r2
 8002b72:	881b      	ldrh	r3, [r3, #0]
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b7e:	b29c      	uxth	r4, r3
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	441a      	add	r2, r3
 8002b8a:	4b62      	ldr	r3, [pc, #392]	; (8002d14 <USB_DeactivateEndpoint+0x208>)
 8002b8c:	4323      	orrs	r3, r4
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	8013      	strh	r3, [r2, #0]
 8002b92:	e144      	b.n	8002e1e <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	4413      	add	r3, r2
 8002b9e:	881b      	ldrh	r3, [r3, #0]
 8002ba0:	b29c      	uxth	r4, r3
 8002ba2:	4623      	mov	r3, r4
 8002ba4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d014      	beq.n	8002bd6 <USB_DeactivateEndpoint+0xca>
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	4413      	add	r3, r2
 8002bb6:	881b      	ldrh	r3, [r3, #0]
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bc2:	b29c      	uxth	r4, r3
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	441a      	add	r2, r3
 8002bce:	4b52      	ldr	r3, [pc, #328]	; (8002d18 <USB_DeactivateEndpoint+0x20c>)
 8002bd0:	4323      	orrs	r3, r4
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	4413      	add	r3, r2
 8002be0:	881b      	ldrh	r3, [r3, #0]
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002be8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bec:	b29c      	uxth	r4, r3
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	441a      	add	r2, r3
 8002bf8:	4b46      	ldr	r3, [pc, #280]	; (8002d14 <USB_DeactivateEndpoint+0x208>)
 8002bfa:	4323      	orrs	r3, r4
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	8013      	strh	r3, [r2, #0]
 8002c00:	e10d      	b.n	8002e1e <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	785b      	ldrb	r3, [r3, #1]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f040 8088 	bne.w	8002d1c <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	4413      	add	r3, r2
 8002c16:	881b      	ldrh	r3, [r3, #0]
 8002c18:	b29c      	uxth	r4, r3
 8002c1a:	4623      	mov	r3, r4
 8002c1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d014      	beq.n	8002c4e <USB_DeactivateEndpoint+0x142>
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	4413      	add	r3, r2
 8002c2e:	881b      	ldrh	r3, [r3, #0]
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c3a:	b29c      	uxth	r4, r3
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	441a      	add	r2, r3
 8002c46:	4b34      	ldr	r3, [pc, #208]	; (8002d18 <USB_DeactivateEndpoint+0x20c>)
 8002c48:	4323      	orrs	r3, r4
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	4413      	add	r3, r2
 8002c58:	881b      	ldrh	r3, [r3, #0]
 8002c5a:	b29c      	uxth	r4, r3
 8002c5c:	4623      	mov	r3, r4
 8002c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d014      	beq.n	8002c90 <USB_DeactivateEndpoint+0x184>
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	4413      	add	r3, r2
 8002c70:	881b      	ldrh	r3, [r3, #0]
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c7c:	b29c      	uxth	r4, r3
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	441a      	add	r2, r3
 8002c88:	4b21      	ldr	r3, [pc, #132]	; (8002d10 <USB_DeactivateEndpoint+0x204>)
 8002c8a:	4323      	orrs	r3, r4
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	4413      	add	r3, r2
 8002c9a:	881b      	ldrh	r3, [r3, #0]
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ca6:	b29c      	uxth	r4, r3
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	441a      	add	r2, r3
 8002cb2:	4b17      	ldr	r3, [pc, #92]	; (8002d10 <USB_DeactivateEndpoint+0x204>)
 8002cb4:	4323      	orrs	r3, r4
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	4413      	add	r3, r2
 8002cc4:	881b      	ldrh	r3, [r3, #0]
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ccc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cd0:	b29c      	uxth	r4, r3
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	441a      	add	r2, r3
 8002cdc:	4b0d      	ldr	r3, [pc, #52]	; (8002d14 <USB_DeactivateEndpoint+0x208>)
 8002cde:	4323      	orrs	r3, r4
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	4413      	add	r3, r2
 8002cee:	881b      	ldrh	r3, [r3, #0]
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cfa:	b29c      	uxth	r4, r3
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	441a      	add	r2, r3
 8002d06:	4b03      	ldr	r3, [pc, #12]	; (8002d14 <USB_DeactivateEndpoint+0x208>)
 8002d08:	4323      	orrs	r3, r4
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	8013      	strh	r3, [r2, #0]
 8002d0e:	e086      	b.n	8002e1e <USB_DeactivateEndpoint+0x312>
 8002d10:	ffff80c0 	.word	0xffff80c0
 8002d14:	ffff8080 	.word	0xffff8080
 8002d18:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	4413      	add	r3, r2
 8002d26:	881b      	ldrh	r3, [r3, #0]
 8002d28:	b29c      	uxth	r4, r3
 8002d2a:	4623      	mov	r3, r4
 8002d2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d014      	beq.n	8002d5e <USB_DeactivateEndpoint+0x252>
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	4413      	add	r3, r2
 8002d3e:	881b      	ldrh	r3, [r3, #0]
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d4a:	b29c      	uxth	r4, r3
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	441a      	add	r2, r3
 8002d56:	4b35      	ldr	r3, [pc, #212]	; (8002e2c <USB_DeactivateEndpoint+0x320>)
 8002d58:	4323      	orrs	r3, r4
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	4413      	add	r3, r2
 8002d68:	881b      	ldrh	r3, [r3, #0]
 8002d6a:	b29c      	uxth	r4, r3
 8002d6c:	4623      	mov	r3, r4
 8002d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d014      	beq.n	8002da0 <USB_DeactivateEndpoint+0x294>
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	4413      	add	r3, r2
 8002d80:	881b      	ldrh	r3, [r3, #0]
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d8c:	b29c      	uxth	r4, r3
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	441a      	add	r2, r3
 8002d98:	4b25      	ldr	r3, [pc, #148]	; (8002e30 <USB_DeactivateEndpoint+0x324>)
 8002d9a:	4323      	orrs	r3, r4
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	4413      	add	r3, r2
 8002daa:	881b      	ldrh	r3, [r3, #0]
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002db6:	b29c      	uxth	r4, r3
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	441a      	add	r2, r3
 8002dc2:	4b1a      	ldr	r3, [pc, #104]	; (8002e2c <USB_DeactivateEndpoint+0x320>)
 8002dc4:	4323      	orrs	r3, r4
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	4413      	add	r3, r2
 8002dd4:	881b      	ldrh	r3, [r3, #0]
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ddc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002de0:	b29c      	uxth	r4, r3
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	441a      	add	r2, r3
 8002dec:	4b11      	ldr	r3, [pc, #68]	; (8002e34 <USB_DeactivateEndpoint+0x328>)
 8002dee:	4323      	orrs	r3, r4
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	4413      	add	r3, r2
 8002dfe:	881b      	ldrh	r3, [r3, #0]
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e0a:	b29c      	uxth	r4, r3
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	441a      	add	r2, r3
 8002e16:	4b07      	ldr	r3, [pc, #28]	; (8002e34 <USB_DeactivateEndpoint+0x328>)
 8002e18:	4323      	orrs	r3, r4
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3708      	adds	r7, #8
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bc90      	pop	{r4, r7}
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	ffffc080 	.word	0xffffc080
 8002e30:	ffff80c0 	.word	0xffff80c0
 8002e34:	ffff8080 	.word	0xffff8080

08002e38 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002e38:	b590      	push	{r4, r7, lr}
 8002e3a:	b08d      	sub	sp, #52	; 0x34
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	785b      	ldrb	r3, [r3, #1]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	f040 8160 	bne.w	800310c <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	699a      	ldr	r2, [r3, #24]
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d909      	bls.n	8002e6c <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	691b      	ldr	r3, [r3, #16]
 8002e5c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	699a      	ldr	r2, [r3, #24]
 8002e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e64:	1ad2      	subs	r2, r2, r3
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	619a      	str	r2, [r3, #24]
 8002e6a:	e005      	b.n	8002e78 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	2200      	movs	r2, #0
 8002e76:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	7b1b      	ldrb	r3, [r3, #12]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d119      	bne.n	8002eb4 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	6959      	ldr	r1, [r3, #20]
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	88da      	ldrh	r2, [r3, #6]
 8002e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f000 fba2 	bl	80035d6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8002e92:	687c      	ldr	r4, [r7, #4]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	441c      	add	r4, r3
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	011b      	lsls	r3, r3, #4
 8002ea4:	4423      	add	r3, r4
 8002ea6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002eaa:	461c      	mov	r4, r3
 8002eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	8023      	strh	r3, [r4, #0]
 8002eb2:	e10f      	b.n	80030d4 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	4413      	add	r3, r2
 8002ebe:	881b      	ldrh	r3, [r3, #0]
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d065      	beq.n	8002f96 <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002eca:	687c      	ldr	r4, [r7, #4]
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	785b      	ldrb	r3, [r3, #1]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d148      	bne.n	8002f66 <USB_EPStartXfer+0x12e>
 8002ed4:	687c      	ldr	r4, [r7, #4]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	441c      	add	r4, r3
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	011b      	lsls	r3, r3, #4
 8002ee6:	4423      	add	r3, r4
 8002ee8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002eec:	461c      	mov	r4, r3
 8002eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d10e      	bne.n	8002f12 <USB_EPStartXfer+0xda>
 8002ef4:	8823      	ldrh	r3, [r4, #0]
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	8023      	strh	r3, [r4, #0]
 8002f00:	8823      	ldrh	r3, [r4, #0]
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	8023      	strh	r3, [r4, #0]
 8002f10:	e03d      	b.n	8002f8e <USB_EPStartXfer+0x156>
 8002f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f14:	2b3e      	cmp	r3, #62	; 0x3e
 8002f16:	d810      	bhi.n	8002f3a <USB_EPStartXfer+0x102>
 8002f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f1a:	085b      	lsrs	r3, r3, #1
 8002f1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f20:	f003 0301 	and.w	r3, r3, #1
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d002      	beq.n	8002f2e <USB_EPStartXfer+0xf6>
 8002f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	029b      	lsls	r3, r3, #10
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	8023      	strh	r3, [r4, #0]
 8002f38:	e029      	b.n	8002f8e <USB_EPStartXfer+0x156>
 8002f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f3c:	095b      	lsrs	r3, r3, #5
 8002f3e:	627b      	str	r3, [r7, #36]	; 0x24
 8002f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f42:	f003 031f 	and.w	r3, r3, #31
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d102      	bne.n	8002f50 <USB_EPStartXfer+0x118>
 8002f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	627b      	str	r3, [r7, #36]	; 0x24
 8002f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	029b      	lsls	r3, r3, #10
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	8023      	strh	r3, [r4, #0]
 8002f64:	e013      	b.n	8002f8e <USB_EPStartXfer+0x156>
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	785b      	ldrb	r3, [r3, #1]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d10f      	bne.n	8002f8e <USB_EPStartXfer+0x156>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	441c      	add	r4, r3
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	011b      	lsls	r3, r3, #4
 8002f7e:	4423      	add	r3, r4
 8002f80:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f84:	60fb      	str	r3, [r7, #12]
 8002f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f88:	b29a      	uxth	r2, r3
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	895b      	ldrh	r3, [r3, #10]
 8002f92:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002f94:	e063      	b.n	800305e <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	785b      	ldrb	r3, [r3, #1]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d148      	bne.n	8003030 <USB_EPStartXfer+0x1f8>
 8002f9e:	687c      	ldr	r4, [r7, #4]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	441c      	add	r4, r3
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	011b      	lsls	r3, r3, #4
 8002fb0:	4423      	add	r3, r4
 8002fb2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002fb6:	461c      	mov	r4, r3
 8002fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10e      	bne.n	8002fdc <USB_EPStartXfer+0x1a4>
 8002fbe:	8823      	ldrh	r3, [r4, #0]
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	8023      	strh	r3, [r4, #0]
 8002fca:	8823      	ldrh	r3, [r4, #0]
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	8023      	strh	r3, [r4, #0]
 8002fda:	e03d      	b.n	8003058 <USB_EPStartXfer+0x220>
 8002fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fde:	2b3e      	cmp	r3, #62	; 0x3e
 8002fe0:	d810      	bhi.n	8003004 <USB_EPStartXfer+0x1cc>
 8002fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe4:	085b      	lsrs	r3, r3, #1
 8002fe6:	623b      	str	r3, [r7, #32]
 8002fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fea:	f003 0301 	and.w	r3, r3, #1
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d002      	beq.n	8002ff8 <USB_EPStartXfer+0x1c0>
 8002ff2:	6a3b      	ldr	r3, [r7, #32]
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	623b      	str	r3, [r7, #32]
 8002ff8:	6a3b      	ldr	r3, [r7, #32]
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	029b      	lsls	r3, r3, #10
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	8023      	strh	r3, [r4, #0]
 8003002:	e029      	b.n	8003058 <USB_EPStartXfer+0x220>
 8003004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003006:	095b      	lsrs	r3, r3, #5
 8003008:	623b      	str	r3, [r7, #32]
 800300a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800300c:	f003 031f 	and.w	r3, r3, #31
 8003010:	2b00      	cmp	r3, #0
 8003012:	d102      	bne.n	800301a <USB_EPStartXfer+0x1e2>
 8003014:	6a3b      	ldr	r3, [r7, #32]
 8003016:	3b01      	subs	r3, #1
 8003018:	623b      	str	r3, [r7, #32]
 800301a:	6a3b      	ldr	r3, [r7, #32]
 800301c:	b29b      	uxth	r3, r3
 800301e:	029b      	lsls	r3, r3, #10
 8003020:	b29b      	uxth	r3, r3
 8003022:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003026:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800302a:	b29b      	uxth	r3, r3
 800302c:	8023      	strh	r3, [r4, #0]
 800302e:	e013      	b.n	8003058 <USB_EPStartXfer+0x220>
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	785b      	ldrb	r3, [r3, #1]
 8003034:	2b01      	cmp	r3, #1
 8003036:	d10f      	bne.n	8003058 <USB_EPStartXfer+0x220>
 8003038:	687c      	ldr	r4, [r7, #4]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003040:	b29b      	uxth	r3, r3
 8003042:	441c      	add	r4, r3
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	011b      	lsls	r3, r3, #4
 800304a:	4423      	add	r3, r4
 800304c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003050:	461c      	mov	r4, r3
 8003052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003054:	b29b      	uxth	r3, r3
 8003056:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	891b      	ldrh	r3, [r3, #8]
 800305c:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	6959      	ldr	r1, [r3, #20]
 8003062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003064:	b29b      	uxth	r3, r3
 8003066:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f000 fab4 	bl	80035d6 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	785b      	ldrb	r3, [r3, #1]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d115      	bne.n	80030a2 <USB_EPStartXfer+0x26a>
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	4413      	add	r3, r2
 8003080:	881b      	ldrh	r3, [r3, #0]
 8003082:	b29b      	uxth	r3, r3
 8003084:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003088:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800308c:	b29c      	uxth	r4, r3
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	441a      	add	r2, r3
 8003098:	4b9a      	ldr	r3, [pc, #616]	; (8003304 <USB_EPStartXfer+0x4cc>)
 800309a:	4323      	orrs	r3, r4
 800309c:	b29b      	uxth	r3, r3
 800309e:	8013      	strh	r3, [r2, #0]
 80030a0:	e018      	b.n	80030d4 <USB_EPStartXfer+0x29c>
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	785b      	ldrb	r3, [r3, #1]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d114      	bne.n	80030d4 <USB_EPStartXfer+0x29c>
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	4413      	add	r3, r2
 80030b4:	881b      	ldrh	r3, [r3, #0]
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030c0:	b29c      	uxth	r4, r3
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	441a      	add	r2, r3
 80030cc:	4b8e      	ldr	r3, [pc, #568]	; (8003308 <USB_EPStartXfer+0x4d0>)
 80030ce:	4323      	orrs	r3, r4
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	4413      	add	r3, r2
 80030de:	881b      	ldrh	r3, [r3, #0]
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030ea:	b29c      	uxth	r4, r3
 80030ec:	f084 0310 	eor.w	r3, r4, #16
 80030f0:	b29c      	uxth	r4, r3
 80030f2:	f084 0320 	eor.w	r3, r4, #32
 80030f6:	b29c      	uxth	r4, r3
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	441a      	add	r2, r3
 8003102:	4b82      	ldr	r3, [pc, #520]	; (800330c <USB_EPStartXfer+0x4d4>)
 8003104:	4323      	orrs	r3, r4
 8003106:	b29b      	uxth	r3, r3
 8003108:	8013      	strh	r3, [r2, #0]
 800310a:	e146      	b.n	800339a <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	699a      	ldr	r2, [r3, #24]
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	429a      	cmp	r2, r3
 8003116:	d909      	bls.n	800312c <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	691b      	ldr	r3, [r3, #16]
 800311c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	699a      	ldr	r2, [r3, #24]
 8003122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003124:	1ad2      	subs	r2, r2, r3
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	619a      	str	r2, [r3, #24]
 800312a:	e005      	b.n	8003138 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	699b      	ldr	r3, [r3, #24]
 8003130:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	2200      	movs	r2, #0
 8003136:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	7b1b      	ldrb	r3, [r3, #12]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d148      	bne.n	80031d2 <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003140:	687c      	ldr	r4, [r7, #4]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003148:	b29b      	uxth	r3, r3
 800314a:	441c      	add	r4, r3
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	011b      	lsls	r3, r3, #4
 8003152:	4423      	add	r3, r4
 8003154:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003158:	461c      	mov	r4, r3
 800315a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800315c:	2b00      	cmp	r3, #0
 800315e:	d10e      	bne.n	800317e <USB_EPStartXfer+0x346>
 8003160:	8823      	ldrh	r3, [r4, #0]
 8003162:	b29b      	uxth	r3, r3
 8003164:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003168:	b29b      	uxth	r3, r3
 800316a:	8023      	strh	r3, [r4, #0]
 800316c:	8823      	ldrh	r3, [r4, #0]
 800316e:	b29b      	uxth	r3, r3
 8003170:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003174:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003178:	b29b      	uxth	r3, r3
 800317a:	8023      	strh	r3, [r4, #0]
 800317c:	e0f2      	b.n	8003364 <USB_EPStartXfer+0x52c>
 800317e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003180:	2b3e      	cmp	r3, #62	; 0x3e
 8003182:	d810      	bhi.n	80031a6 <USB_EPStartXfer+0x36e>
 8003184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003186:	085b      	lsrs	r3, r3, #1
 8003188:	61fb      	str	r3, [r7, #28]
 800318a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	2b00      	cmp	r3, #0
 8003192:	d002      	beq.n	800319a <USB_EPStartXfer+0x362>
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	3301      	adds	r3, #1
 8003198:	61fb      	str	r3, [r7, #28]
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	b29b      	uxth	r3, r3
 800319e:	029b      	lsls	r3, r3, #10
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	8023      	strh	r3, [r4, #0]
 80031a4:	e0de      	b.n	8003364 <USB_EPStartXfer+0x52c>
 80031a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a8:	095b      	lsrs	r3, r3, #5
 80031aa:	61fb      	str	r3, [r7, #28]
 80031ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ae:	f003 031f 	and.w	r3, r3, #31
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d102      	bne.n	80031bc <USB_EPStartXfer+0x384>
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	3b01      	subs	r3, #1
 80031ba:	61fb      	str	r3, [r7, #28]
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	b29b      	uxth	r3, r3
 80031c0:	029b      	lsls	r3, r3, #10
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	8023      	strh	r3, [r4, #0]
 80031d0:	e0c8      	b.n	8003364 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	785b      	ldrb	r3, [r3, #1]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d148      	bne.n	800326c <USB_EPStartXfer+0x434>
 80031da:	687c      	ldr	r4, [r7, #4]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	441c      	add	r4, r3
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	011b      	lsls	r3, r3, #4
 80031ec:	4423      	add	r3, r4
 80031ee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80031f2:	461c      	mov	r4, r3
 80031f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d10e      	bne.n	8003218 <USB_EPStartXfer+0x3e0>
 80031fa:	8823      	ldrh	r3, [r4, #0]
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003202:	b29b      	uxth	r3, r3
 8003204:	8023      	strh	r3, [r4, #0]
 8003206:	8823      	ldrh	r3, [r4, #0]
 8003208:	b29b      	uxth	r3, r3
 800320a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800320e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003212:	b29b      	uxth	r3, r3
 8003214:	8023      	strh	r3, [r4, #0]
 8003216:	e03d      	b.n	8003294 <USB_EPStartXfer+0x45c>
 8003218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800321a:	2b3e      	cmp	r3, #62	; 0x3e
 800321c:	d810      	bhi.n	8003240 <USB_EPStartXfer+0x408>
 800321e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003220:	085b      	lsrs	r3, r3, #1
 8003222:	61bb      	str	r3, [r7, #24]
 8003224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b00      	cmp	r3, #0
 800322c:	d002      	beq.n	8003234 <USB_EPStartXfer+0x3fc>
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	3301      	adds	r3, #1
 8003232:	61bb      	str	r3, [r7, #24]
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	b29b      	uxth	r3, r3
 8003238:	029b      	lsls	r3, r3, #10
 800323a:	b29b      	uxth	r3, r3
 800323c:	8023      	strh	r3, [r4, #0]
 800323e:	e029      	b.n	8003294 <USB_EPStartXfer+0x45c>
 8003240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003242:	095b      	lsrs	r3, r3, #5
 8003244:	61bb      	str	r3, [r7, #24]
 8003246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003248:	f003 031f 	and.w	r3, r3, #31
 800324c:	2b00      	cmp	r3, #0
 800324e:	d102      	bne.n	8003256 <USB_EPStartXfer+0x41e>
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	3b01      	subs	r3, #1
 8003254:	61bb      	str	r3, [r7, #24]
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	b29b      	uxth	r3, r3
 800325a:	029b      	lsls	r3, r3, #10
 800325c:	b29b      	uxth	r3, r3
 800325e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003262:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003266:	b29b      	uxth	r3, r3
 8003268:	8023      	strh	r3, [r4, #0]
 800326a:	e013      	b.n	8003294 <USB_EPStartXfer+0x45c>
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	785b      	ldrb	r3, [r3, #1]
 8003270:	2b01      	cmp	r3, #1
 8003272:	d10f      	bne.n	8003294 <USB_EPStartXfer+0x45c>
 8003274:	687c      	ldr	r4, [r7, #4]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800327c:	b29b      	uxth	r3, r3
 800327e:	441c      	add	r4, r3
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	011b      	lsls	r3, r3, #4
 8003286:	4423      	add	r3, r4
 8003288:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800328c:	461c      	mov	r4, r3
 800328e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003290:	b29b      	uxth	r3, r3
 8003292:	8023      	strh	r3, [r4, #0]
 8003294:	687c      	ldr	r4, [r7, #4]
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	785b      	ldrb	r3, [r3, #1]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d14e      	bne.n	800333c <USB_EPStartXfer+0x504>
 800329e:	687c      	ldr	r4, [r7, #4]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	441c      	add	r4, r3
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	011b      	lsls	r3, r3, #4
 80032b0:	4423      	add	r3, r4
 80032b2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80032b6:	461c      	mov	r4, r3
 80032b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d10e      	bne.n	80032dc <USB_EPStartXfer+0x4a4>
 80032be:	8823      	ldrh	r3, [r4, #0]
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	8023      	strh	r3, [r4, #0]
 80032ca:	8823      	ldrh	r3, [r4, #0]
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	8023      	strh	r3, [r4, #0]
 80032da:	e043      	b.n	8003364 <USB_EPStartXfer+0x52c>
 80032dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032de:	2b3e      	cmp	r3, #62	; 0x3e
 80032e0:	d816      	bhi.n	8003310 <USB_EPStartXfer+0x4d8>
 80032e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e4:	085b      	lsrs	r3, r3, #1
 80032e6:	617b      	str	r3, [r7, #20]
 80032e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d002      	beq.n	80032f8 <USB_EPStartXfer+0x4c0>
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	3301      	adds	r3, #1
 80032f6:	617b      	str	r3, [r7, #20]
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	029b      	lsls	r3, r3, #10
 80032fe:	b29b      	uxth	r3, r3
 8003300:	8023      	strh	r3, [r4, #0]
 8003302:	e02f      	b.n	8003364 <USB_EPStartXfer+0x52c>
 8003304:	ffff80c0 	.word	0xffff80c0
 8003308:	ffffc080 	.word	0xffffc080
 800330c:	ffff8080 	.word	0xffff8080
 8003310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003312:	095b      	lsrs	r3, r3, #5
 8003314:	617b      	str	r3, [r7, #20]
 8003316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003318:	f003 031f 	and.w	r3, r3, #31
 800331c:	2b00      	cmp	r3, #0
 800331e:	d102      	bne.n	8003326 <USB_EPStartXfer+0x4ee>
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	3b01      	subs	r3, #1
 8003324:	617b      	str	r3, [r7, #20]
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	b29b      	uxth	r3, r3
 800332a:	029b      	lsls	r3, r3, #10
 800332c:	b29b      	uxth	r3, r3
 800332e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003332:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003336:	b29b      	uxth	r3, r3
 8003338:	8023      	strh	r3, [r4, #0]
 800333a:	e013      	b.n	8003364 <USB_EPStartXfer+0x52c>
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	785b      	ldrb	r3, [r3, #1]
 8003340:	2b01      	cmp	r3, #1
 8003342:	d10f      	bne.n	8003364 <USB_EPStartXfer+0x52c>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800334a:	b29b      	uxth	r3, r3
 800334c:	441c      	add	r4, r3
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	011b      	lsls	r3, r3, #4
 8003354:	4423      	add	r3, r4
 8003356:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800335a:	613b      	str	r3, [r7, #16]
 800335c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800335e:	b29a      	uxth	r2, r3
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	4413      	add	r3, r2
 800336e:	881b      	ldrh	r3, [r3, #0]
 8003370:	b29b      	uxth	r3, r3
 8003372:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800337a:	b29c      	uxth	r4, r3
 800337c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003380:	b29c      	uxth	r4, r3
 8003382:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003386:	b29c      	uxth	r4, r3
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	441a      	add	r2, r3
 8003392:	4b04      	ldr	r3, [pc, #16]	; (80033a4 <USB_EPStartXfer+0x56c>)
 8003394:	4323      	orrs	r3, r4
 8003396:	b29b      	uxth	r3, r3
 8003398:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800339a:	2300      	movs	r3, #0
}
 800339c:	4618      	mov	r0, r3
 800339e:	3734      	adds	r7, #52	; 0x34
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd90      	pop	{r4, r7, pc}
 80033a4:	ffff8080 	.word	0xffff8080

080033a8 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80033a8:	b490      	push	{r4, r7}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	785b      	ldrb	r3, [r3, #1]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d018      	beq.n	80033ec <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	4413      	add	r3, r2
 80033c4:	881b      	ldrh	r3, [r3, #0]
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033d0:	b29c      	uxth	r4, r3
 80033d2:	f084 0310 	eor.w	r3, r4, #16
 80033d6:	b29c      	uxth	r4, r3
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	441a      	add	r2, r3
 80033e2:	4b11      	ldr	r3, [pc, #68]	; (8003428 <USB_EPSetStall+0x80>)
 80033e4:	4323      	orrs	r3, r4
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	8013      	strh	r3, [r2, #0]
 80033ea:	e017      	b.n	800341c <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	4413      	add	r3, r2
 80033f6:	881b      	ldrh	r3, [r3, #0]
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003402:	b29c      	uxth	r4, r3
 8003404:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003408:	b29c      	uxth	r4, r3
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	441a      	add	r2, r3
 8003414:	4b04      	ldr	r3, [pc, #16]	; (8003428 <USB_EPSetStall+0x80>)
 8003416:	4323      	orrs	r3, r4
 8003418:	b29b      	uxth	r3, r3
 800341a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3708      	adds	r7, #8
 8003422:	46bd      	mov	sp, r7
 8003424:	bc90      	pop	{r4, r7}
 8003426:	4770      	bx	lr
 8003428:	ffff8080 	.word	0xffff8080

0800342c <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800342c:	b490      	push	{r4, r7}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	7b1b      	ldrb	r3, [r3, #12]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d17d      	bne.n	800353a <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	785b      	ldrb	r3, [r3, #1]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d03d      	beq.n	80034c2 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	4413      	add	r3, r2
 8003450:	881b      	ldrh	r3, [r3, #0]
 8003452:	b29c      	uxth	r4, r3
 8003454:	4623      	mov	r3, r4
 8003456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800345a:	2b00      	cmp	r3, #0
 800345c:	d014      	beq.n	8003488 <USB_EPClearStall+0x5c>
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	4413      	add	r3, r2
 8003468:	881b      	ldrh	r3, [r3, #0]
 800346a:	b29b      	uxth	r3, r3
 800346c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003470:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003474:	b29c      	uxth	r4, r3
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	441a      	add	r2, r3
 8003480:	4b31      	ldr	r3, [pc, #196]	; (8003548 <USB_EPClearStall+0x11c>)
 8003482:	4323      	orrs	r3, r4
 8003484:	b29b      	uxth	r3, r3
 8003486:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	78db      	ldrb	r3, [r3, #3]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d054      	beq.n	800353a <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	4413      	add	r3, r2
 800349a:	881b      	ldrh	r3, [r3, #0]
 800349c:	b29b      	uxth	r3, r3
 800349e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034a6:	b29c      	uxth	r4, r3
 80034a8:	f084 0320 	eor.w	r3, r4, #32
 80034ac:	b29c      	uxth	r4, r3
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	441a      	add	r2, r3
 80034b8:	4b24      	ldr	r3, [pc, #144]	; (800354c <USB_EPClearStall+0x120>)
 80034ba:	4323      	orrs	r3, r4
 80034bc:	b29b      	uxth	r3, r3
 80034be:	8013      	strh	r3, [r2, #0]
 80034c0:	e03b      	b.n	800353a <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	4413      	add	r3, r2
 80034cc:	881b      	ldrh	r3, [r3, #0]
 80034ce:	b29c      	uxth	r4, r3
 80034d0:	4623      	mov	r3, r4
 80034d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d014      	beq.n	8003504 <USB_EPClearStall+0xd8>
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	4413      	add	r3, r2
 80034e4:	881b      	ldrh	r3, [r3, #0]
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034f0:	b29c      	uxth	r4, r3
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	441a      	add	r2, r3
 80034fc:	4b14      	ldr	r3, [pc, #80]	; (8003550 <USB_EPClearStall+0x124>)
 80034fe:	4323      	orrs	r3, r4
 8003500:	b29b      	uxth	r3, r3
 8003502:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	4413      	add	r3, r2
 800350e:	881b      	ldrh	r3, [r3, #0]
 8003510:	b29b      	uxth	r3, r3
 8003512:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800351a:	b29c      	uxth	r4, r3
 800351c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003520:	b29c      	uxth	r4, r3
 8003522:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003526:	b29c      	uxth	r4, r3
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	441a      	add	r2, r3
 8003532:	4b06      	ldr	r3, [pc, #24]	; (800354c <USB_EPClearStall+0x120>)
 8003534:	4323      	orrs	r3, r4
 8003536:	b29b      	uxth	r3, r3
 8003538:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800353a:	2300      	movs	r3, #0
}
 800353c:	4618      	mov	r0, r3
 800353e:	3708      	adds	r7, #8
 8003540:	46bd      	mov	sp, r7
 8003542:	bc90      	pop	{r4, r7}
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	ffff80c0 	.word	0xffff80c0
 800354c:	ffff8080 	.word	0xffff8080
 8003550:	ffffc080 	.word	0xffffc080

08003554 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	460b      	mov	r3, r1
 800355e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8003560:	78fb      	ldrb	r3, [r7, #3]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d103      	bne.n	800356e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2280      	movs	r2, #128	; 0x80
 800356a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800356e:	2300      	movs	r3, #0
}
 8003570:	4618      	mov	r0, r3
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	bc80      	pop	{r7}
 8003578:	4770      	bx	lr

0800357a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800357a:	b480      	push	{r7}
 800357c:	b083      	sub	sp, #12
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003582:	2300      	movs	r3, #0
}
 8003584:	4618      	mov	r0, r3
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	bc80      	pop	{r7}
 800358c:	4770      	bx	lr

0800358e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800358e:	b480      	push	{r7}
 8003590:	b083      	sub	sp, #12
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003596:	2300      	movs	r3, #0
}
 8003598:	4618      	mov	r0, r3
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	bc80      	pop	{r7}
 80035a0:	4770      	bx	lr

080035a2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80035a2:	b480      	push	{r7}
 80035a4:	b085      	sub	sp, #20
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80035b4:	68fb      	ldr	r3, [r7, #12]
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3714      	adds	r7, #20
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bc80      	pop	{r7}
 80035be:	4770      	bx	lr

080035c0 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80035ca:	2300      	movs	r3, #0
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bc80      	pop	{r7}
 80035d4:	4770      	bx	lr

080035d6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80035d6:	b480      	push	{r7}
 80035d8:	b08d      	sub	sp, #52	; 0x34
 80035da:	af00      	add	r7, sp, #0
 80035dc:	60f8      	str	r0, [r7, #12]
 80035de:	60b9      	str	r1, [r7, #8]
 80035e0:	4611      	mov	r1, r2
 80035e2:	461a      	mov	r2, r3
 80035e4:	460b      	mov	r3, r1
 80035e6:	80fb      	strh	r3, [r7, #6]
 80035e8:	4613      	mov	r3, r2
 80035ea:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80035ec:	88bb      	ldrh	r3, [r7, #4]
 80035ee:	3301      	adds	r3, #1
 80035f0:	085b      	lsrs	r3, r3, #1
 80035f2:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80035fc:	88fb      	ldrh	r3, [r7, #6]
 80035fe:	005a      	lsls	r2, r3, #1
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	4413      	add	r3, r2
 8003604:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003608:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800360a:	6a3b      	ldr	r3, [r7, #32]
 800360c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800360e:	e01e      	b.n	800364e <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8003610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8003616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003618:	3301      	adds	r3, #1
 800361a:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800361c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	b29b      	uxth	r3, r3
 8003622:	021b      	lsls	r3, r3, #8
 8003624:	b29b      	uxth	r3, r3
 8003626:	461a      	mov	r2, r3
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	4313      	orrs	r3, r2
 800362c:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	b29a      	uxth	r2, r3
 8003632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003634:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8003636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003638:	3302      	adds	r3, #2
 800363a:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800363c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800363e:	3302      	adds	r3, #2
 8003640:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8003642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003644:	3301      	adds	r3, #1
 8003646:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8003648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800364a:	3b01      	subs	r3, #1
 800364c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800364e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003650:	2b00      	cmp	r3, #0
 8003652:	d1dd      	bne.n	8003610 <USB_WritePMA+0x3a>
  }
}
 8003654:	bf00      	nop
 8003656:	3734      	adds	r7, #52	; 0x34
 8003658:	46bd      	mov	sp, r7
 800365a:	bc80      	pop	{r7}
 800365c:	4770      	bx	lr

0800365e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800365e:	b480      	push	{r7}
 8003660:	b08b      	sub	sp, #44	; 0x2c
 8003662:	af00      	add	r7, sp, #0
 8003664:	60f8      	str	r0, [r7, #12]
 8003666:	60b9      	str	r1, [r7, #8]
 8003668:	4611      	mov	r1, r2
 800366a:	461a      	mov	r2, r3
 800366c:	460b      	mov	r3, r1
 800366e:	80fb      	strh	r3, [r7, #6]
 8003670:	4613      	mov	r3, r2
 8003672:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8003674:	88bb      	ldrh	r3, [r7, #4]
 8003676:	085b      	lsrs	r3, r3, #1
 8003678:	b29b      	uxth	r3, r3
 800367a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003684:	88fb      	ldrh	r3, [r7, #6]
 8003686:	005a      	lsls	r2, r3, #1
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	4413      	add	r3, r2
 800368c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003690:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	627b      	str	r3, [r7, #36]	; 0x24
 8003696:	e01b      	b.n	80036d0 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8003698:	6a3b      	ldr	r3, [r7, #32]
 800369a:	881b      	ldrh	r3, [r3, #0]
 800369c:	b29b      	uxth	r3, r3
 800369e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80036a0:	6a3b      	ldr	r3, [r7, #32]
 80036a2:	3302      	adds	r3, #2
 80036a4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	b2da      	uxtb	r2, r3
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	3301      	adds	r3, #1
 80036b2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	0a1b      	lsrs	r3, r3, #8
 80036b8:	b2da      	uxtb	r2, r3
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	3301      	adds	r3, #1
 80036c2:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80036c4:	6a3b      	ldr	r3, [r7, #32]
 80036c6:	3302      	adds	r3, #2
 80036c8:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80036ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036cc:	3b01      	subs	r3, #1
 80036ce:	627b      	str	r3, [r7, #36]	; 0x24
 80036d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1e0      	bne.n	8003698 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80036d6:	88bb      	ldrh	r3, [r7, #4]
 80036d8:	f003 0301 	and.w	r3, r3, #1
 80036dc:	b29b      	uxth	r3, r3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d007      	beq.n	80036f2 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80036e2:	6a3b      	ldr	r3, [r7, #32]
 80036e4:	881b      	ldrh	r3, [r3, #0]
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	b2da      	uxtb	r2, r3
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	701a      	strb	r2, [r3, #0]
  }
}
 80036f2:	bf00      	nop
 80036f4:	372c      	adds	r7, #44	; 0x2c
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bc80      	pop	{r7}
 80036fa:	4770      	bx	lr

080036fc <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	460b      	mov	r3, r1
 8003706:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8003708:	2300      	movs	r3, #0
 800370a:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 800370c:	2340      	movs	r3, #64	; 0x40
 800370e:	2203      	movs	r2, #3
 8003710:	2181      	movs	r1, #129	; 0x81
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f002 fe01 	bl	800631a <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 800371e:	2340      	movs	r3, #64	; 0x40
 8003720:	2203      	movs	r2, #3
 8003722:	2101      	movs	r1, #1
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f002 fdf8 	bl	800631a <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2201      	movs	r2, #1
 800372e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8003732:	2054      	movs	r0, #84	; 0x54
 8003734:	f002 fefe 	bl	8006534 <USBD_static_malloc>
 8003738:	4602      	mov	r2, r0
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003746:	2b00      	cmp	r3, #0
 8003748:	d102      	bne.n	8003750 <USBD_CUSTOM_HID_Init+0x54>
  {
    ret = 1U;
 800374a:	2301      	movs	r3, #1
 800374c:	73fb      	strb	r3, [r7, #15]
 800374e:	e012      	b.n	8003776 <USBD_CUSTOM_HID_Init+0x7a>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003756:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 800376a:	68ba      	ldr	r2, [r7, #8]
 800376c:	2340      	movs	r3, #64	; 0x40
 800376e:	2101      	movs	r1, #1
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f002 febc 	bl	80064ee <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 8003776:	7bfb      	ldrb	r3, [r7, #15]
}
 8003778:	4618      	mov	r0, r3
 800377a:	3710      	adds	r7, #16
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	460b      	mov	r3, r1
 800378a:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 800378c:	2181      	movs	r1, #129	; 0x81
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f002 fde9 	bl	8006366 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 800379a:	2101      	movs	r1, #1
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f002 fde2 	bl	8006366 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d00e      	beq.n	80037d2 <USBD_CUSTOM_HID_DeInit+0x52>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80037c4:	4618      	mov	r0, r3
 80037c6:	f002 fec1 	bl	800654c <USBD_static_free>
    pdev->pClassData = NULL;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }
  return USBD_OK;
 80037d2:	2300      	movs	r3, #0
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3708      	adds	r7, #8
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b088      	sub	sp, #32
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80037ec:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 80037ee:	2300      	movs	r3, #0
 80037f0:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 80037f2:	2300      	movs	r3, #0
 80037f4:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 80037f6:	2300      	movs	r3, #0
 80037f8:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = USBD_OK;
 80037fa:	2300      	movs	r3, #0
 80037fc:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003806:	2b00      	cmp	r3, #0
 8003808:	d051      	beq.n	80038ae <USBD_CUSTOM_HID_Setup+0xd2>
 800380a:	2b20      	cmp	r3, #32
 800380c:	f040 80d8 	bne.w	80039c0 <USBD_CUSTOM_HID_Setup+0x1e4>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	785b      	ldrb	r3, [r3, #1]
 8003814:	3b02      	subs	r3, #2
 8003816:	2b09      	cmp	r3, #9
 8003818:	d841      	bhi.n	800389e <USBD_CUSTOM_HID_Setup+0xc2>
 800381a:	a201      	add	r2, pc, #4	; (adr r2, 8003820 <USBD_CUSTOM_HID_Setup+0x44>)
 800381c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003820:	08003879 	.word	0x08003879
 8003824:	08003857 	.word	0x08003857
 8003828:	0800389f 	.word	0x0800389f
 800382c:	0800389f 	.word	0x0800389f
 8003830:	0800389f 	.word	0x0800389f
 8003834:	0800389f 	.word	0x0800389f
 8003838:	0800389f 	.word	0x0800389f
 800383c:	08003889 	.word	0x08003889
 8003840:	08003867 	.word	0x08003867
 8003844:	08003849 	.word	0x08003849
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	885b      	ldrh	r3, [r3, #2]
 800384c:	b2db      	uxtb	r3, r3
 800384e:	461a      	mov	r2, r3
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 8003854:	e02a      	b.n	80038ac <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	3340      	adds	r3, #64	; 0x40
 800385a:	2201      	movs	r2, #1
 800385c:	4619      	mov	r1, r3
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f001 f992 	bl	8004b88 <USBD_CtlSendData>
          break;
 8003864:	e022      	b.n	80038ac <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	885b      	ldrh	r3, [r3, #2]
 800386a:	0a1b      	lsrs	r3, r3, #8
 800386c:	b29b      	uxth	r3, r3
 800386e:	b2db      	uxtb	r3, r3
 8003870:	461a      	mov	r2, r3
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	645a      	str	r2, [r3, #68]	; 0x44
          break;
 8003876:	e019      	b.n	80038ac <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	3344      	adds	r3, #68	; 0x44
 800387c:	2201      	movs	r2, #1
 800387e:	4619      	mov	r1, r3
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f001 f981 	bl	8004b88 <USBD_CtlSendData>
          break;
 8003886:	e011      	b.n	80038ac <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	2201      	movs	r2, #1
 800388c:	64da      	str	r2, [r3, #76]	; 0x4c
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 800388e:	6939      	ldr	r1, [r7, #16]
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	88db      	ldrh	r3, [r3, #6]
 8003894:	461a      	mov	r2, r3
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f001 f9a4 	bl	8004be4 <USBD_CtlPrepareRx>
          break;
 800389c:	e006      	b.n	80038ac <USBD_CUSTOM_HID_Setup+0xd0>

        default:
          USBD_CtlError(pdev, req);
 800389e:	6839      	ldr	r1, [r7, #0]
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f001 f907 	bl	8004ab4 <USBD_CtlError>
          ret = USBD_FAIL;
 80038a6:	2302      	movs	r3, #2
 80038a8:	75fb      	strb	r3, [r7, #23]
          break;
 80038aa:	bf00      	nop
      }
      break;
 80038ac:	e08f      	b.n	80039ce <USBD_CUSTOM_HID_Setup+0x1f2>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	785b      	ldrb	r3, [r3, #1]
 80038b2:	2b0b      	cmp	r3, #11
 80038b4:	d87c      	bhi.n	80039b0 <USBD_CUSTOM_HID_Setup+0x1d4>
 80038b6:	a201      	add	r2, pc, #4	; (adr r2, 80038bc <USBD_CUSTOM_HID_Setup+0xe0>)
 80038b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038bc:	080038ed 	.word	0x080038ed
 80038c0:	080039b1 	.word	0x080039b1
 80038c4:	080039b1 	.word	0x080039b1
 80038c8:	080039b1 	.word	0x080039b1
 80038cc:	080039b1 	.word	0x080039b1
 80038d0:	080039b1 	.word	0x080039b1
 80038d4:	08003915 	.word	0x08003915
 80038d8:	080039b1 	.word	0x080039b1
 80038dc:	080039b1 	.word	0x080039b1
 80038e0:	080039b1 	.word	0x080039b1
 80038e4:	08003963 	.word	0x08003963
 80038e8:	0800398b 	.word	0x0800398b
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80038f2:	2b03      	cmp	r3, #3
 80038f4:	d107      	bne.n	8003906 <USBD_CUSTOM_HID_Setup+0x12a>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80038f6:	f107 030e 	add.w	r3, r7, #14
 80038fa:	2202      	movs	r2, #2
 80038fc:	4619      	mov	r1, r3
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f001 f942 	bl	8004b88 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8003904:	e05b      	b.n	80039be <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8003906:	6839      	ldr	r1, [r7, #0]
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f001 f8d3 	bl	8004ab4 <USBD_CtlError>
            ret = USBD_FAIL;
 800390e:	2302      	movs	r3, #2
 8003910:	75fb      	strb	r3, [r7, #23]
          break;
 8003912:	e054      	b.n	80039be <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	885b      	ldrh	r3, [r3, #2]
 8003918:	0a1b      	lsrs	r3, r3, #8
 800391a:	b29b      	uxth	r3, r3
 800391c:	2b22      	cmp	r3, #34	; 0x22
 800391e:	d10b      	bne.n	8003938 <USBD_CUSTOM_HID_Setup+0x15c>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	88db      	ldrh	r3, [r3, #6]
 8003924:	2b21      	cmp	r3, #33	; 0x21
 8003926:	bf28      	it	cs
 8003928:	2321      	movcs	r3, #33	; 0x21
 800392a:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	61bb      	str	r3, [r7, #24]
 8003936:	e00d      	b.n	8003954 <USBD_CUSTOM_HID_Setup+0x178>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	885b      	ldrh	r3, [r3, #2]
 800393c:	0a1b      	lsrs	r3, r3, #8
 800393e:	b29b      	uxth	r3, r3
 8003940:	2b21      	cmp	r3, #33	; 0x21
 8003942:	d107      	bne.n	8003954 <USBD_CUSTOM_HID_Setup+0x178>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8003944:	4b24      	ldr	r3, [pc, #144]	; (80039d8 <USBD_CUSTOM_HID_Setup+0x1fc>)
 8003946:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	88db      	ldrh	r3, [r3, #6]
 800394c:	2b21      	cmp	r3, #33	; 0x21
 800394e:	bf28      	it	cs
 8003950:	2321      	movcs	r3, #33	; 0x21
 8003952:	83fb      	strh	r3, [r7, #30]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 8003954:	8bfb      	ldrh	r3, [r7, #30]
 8003956:	461a      	mov	r2, r3
 8003958:	69b9      	ldr	r1, [r7, #24]
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f001 f914 	bl	8004b88 <USBD_CtlSendData>
          break;
 8003960:	e02d      	b.n	80039be <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003968:	2b03      	cmp	r3, #3
 800396a:	d107      	bne.n	800397c <USBD_CUSTOM_HID_Setup+0x1a0>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	3348      	adds	r3, #72	; 0x48
 8003970:	2201      	movs	r2, #1
 8003972:	4619      	mov	r1, r3
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f001 f907 	bl	8004b88 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800397a:	e020      	b.n	80039be <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 800397c:	6839      	ldr	r1, [r7, #0]
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f001 f898 	bl	8004ab4 <USBD_CtlError>
            ret = USBD_FAIL;
 8003984:	2302      	movs	r3, #2
 8003986:	75fb      	strb	r3, [r7, #23]
          break;
 8003988:	e019      	b.n	80039be <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003990:	2b03      	cmp	r3, #3
 8003992:	d106      	bne.n	80039a2 <USBD_CUSTOM_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	885b      	ldrh	r3, [r3, #2]
 8003998:	b2db      	uxtb	r3, r3
 800399a:	461a      	mov	r2, r3
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	649a      	str	r2, [r3, #72]	; 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80039a0:	e00d      	b.n	80039be <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 80039a2:	6839      	ldr	r1, [r7, #0]
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f001 f885 	bl	8004ab4 <USBD_CtlError>
            ret = USBD_FAIL;
 80039aa:	2302      	movs	r3, #2
 80039ac:	75fb      	strb	r3, [r7, #23]
          break;
 80039ae:	e006      	b.n	80039be <USBD_CUSTOM_HID_Setup+0x1e2>

        default:
          USBD_CtlError(pdev, req);
 80039b0:	6839      	ldr	r1, [r7, #0]
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f001 f87e 	bl	8004ab4 <USBD_CtlError>
          ret = USBD_FAIL;
 80039b8:	2302      	movs	r3, #2
 80039ba:	75fb      	strb	r3, [r7, #23]
          break;
 80039bc:	bf00      	nop
      }
      break;
 80039be:	e006      	b.n	80039ce <USBD_CUSTOM_HID_Setup+0x1f2>

    default:
      USBD_CtlError(pdev, req);
 80039c0:	6839      	ldr	r1, [r7, #0]
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f001 f876 	bl	8004ab4 <USBD_CtlError>
      ret = USBD_FAIL;
 80039c8:	2302      	movs	r3, #2
 80039ca:	75fb      	strb	r3, [r7, #23]
      break;
 80039cc:	bf00      	nop
  }
  return ret;
 80039ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3720      	adds	r7, #32
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	200000c4 	.word	0x200000c4

080039dc <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef  *pdev,
                                   uint8_t *report,
                                   uint16_t len)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b086      	sub	sp, #24
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	4613      	mov	r3, r2
 80039e8:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80039f0:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80039f8:	2b03      	cmp	r3, #3
 80039fa:	d111      	bne.n	8003a20 <USBD_CUSTOM_HID_SendReport+0x44>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d10a      	bne.n	8003a1c <USBD_CUSTOM_HID_SendReport+0x40>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 8003a0e:	88fb      	ldrh	r3, [r7, #6]
 8003a10:	68ba      	ldr	r2, [r7, #8]
 8003a12:	2181      	movs	r1, #129	; 0x81
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	f002 fd47 	bl	80064a8 <USBD_LL_Transmit>
 8003a1a:	e001      	b.n	8003a20 <USBD_CUSTOM_HID_SendReport+0x44>
    }
    else
    {
      return USBD_BUSY;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e000      	b.n	8003a22 <USBD_CUSTOM_HID_SendReport+0x46>
    }
  }
  return USBD_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3718      	adds	r7, #24
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
	...

08003a2c <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2229      	movs	r2, #41	; 0x29
 8003a38:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 8003a3a:	4b03      	ldr	r3, [pc, #12]	; (8003a48 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bc80      	pop	{r7}
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	20000040 	.word	0x20000040

08003a4c <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2229      	movs	r2, #41	; 0x29
 8003a58:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 8003a5a:	4b03      	ldr	r3, [pc, #12]	; (8003a68 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bc80      	pop	{r7}
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	2000006c 	.word	0x2000006c

08003a6c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2229      	movs	r2, #41	; 0x29
 8003a78:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 8003a7a:	4b03      	ldr	r3, [pc, #12]	; (8003a88 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bc80      	pop	{r7}
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	20000098 	.word	0x20000098

08003a8c <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	460b      	mov	r3, r1
 8003a96:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return USBD_OK;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	370c      	adds	r7, #12
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bc80      	pop	{r7}
 8003aae:	4770      	bx	lr

08003ab0 <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	460b      	mov	r3, r1
 8003aba:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003ac2:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	7810      	ldrb	r0, [r2, #0]
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	7852      	ldrb	r2, [r2, #1]
 8003ad4:	4611      	mov	r1, r2
 8003ad6:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	2340      	movs	r3, #64	; 0x40
 8003adc:	2101      	movs	r1, #1
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f002 fd05 	bl	80064ee <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b084      	sub	sp, #16
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003afc:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d10c      	bne.n	8003b20 <USBD_CUSTOM_HID_EP0_RxReady+0x32>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	7810      	ldrb	r0, [r2, #0]
 8003b12:	68fa      	ldr	r2, [r7, #12]
 8003b14:	7852      	ldrb	r2, [r2, #1]
 8003b16:	4611      	mov	r1, r2
 8003b18:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return USBD_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3710      	adds	r7, #16
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
	...

08003b2c <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	220a      	movs	r2, #10
 8003b38:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8003b3a:	4b03      	ldr	r3, [pc, #12]	; (8003b48 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bc80      	pop	{r7}
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	200000e8 	.word	0x200000e8

08003b4c <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8003b56:	2302      	movs	r3, #2
 8003b58:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d005      	beq.n	8003b6c <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	683a      	ldr	r2, [r7, #0]
 8003b64:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8003b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3714      	adds	r7, #20
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bc80      	pop	{r7}
 8003b76:	4770      	bx	lr

08003b78 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	4613      	mov	r3, r2
 8003b84:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d101      	bne.n	8003b90 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8003b8c:	2302      	movs	r3, #2
 8003b8e:	e01a      	b.n	8003bc6 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d003      	beq.n	8003ba2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d003      	beq.n	8003bb0 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	68ba      	ldr	r2, [r7, #8]
 8003bac:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	79fa      	ldrb	r2, [r7, #7]
 8003bbc:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8003bbe:	68f8      	ldr	r0, [r7, #12]
 8003bc0:	f002 fb40 	bl	8006244 <USBD_LL_Init>

  return USBD_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3710      	adds	r7, #16
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8003bce:	b480      	push	{r7}
 8003bd0:	b085      	sub	sp, #20
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
 8003bd6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d006      	beq.n	8003bf0 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	683a      	ldr	r2, [r7, #0]
 8003be6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8003bea:	2300      	movs	r3, #0
 8003bec:	73fb      	strb	r3, [r7, #15]
 8003bee:	e001      	b.n	8003bf4 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8003bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3714      	adds	r7, #20
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bc80      	pop	{r7}
 8003bfe:	4770      	bx	lr

08003c00 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f002 fb6b 	bl	80062e4 <USBD_LL_Start>

  return USBD_OK;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3708      	adds	r7, #8
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	370c      	adds	r7, #12
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bc80      	pop	{r7}
 8003c2a:	4770      	bx	lr

08003c2c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	460b      	mov	r3, r1
 8003c36:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8003c38:	2302      	movs	r3, #2
 8003c3a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00c      	beq.n	8003c60 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	78fa      	ldrb	r2, [r7, #3]
 8003c50:	4611      	mov	r1, r2
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	4798      	blx	r3
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d101      	bne.n	8003c60 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8003c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3710      	adds	r7, #16
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}

08003c6a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003c6a:	b580      	push	{r7, lr}
 8003c6c:	b082      	sub	sp, #8
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
 8003c72:	460b      	mov	r3, r1
 8003c74:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	78fa      	ldrb	r2, [r7, #3]
 8003c80:	4611      	mov	r1, r2
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	4798      	blx	r3

  return USBD_OK;
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3708      	adds	r7, #8
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8003ca0:	6839      	ldr	r1, [r7, #0]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f000 feca 	bl	8004a3c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003cc4:	f003 031f 	and.w	r3, r3, #31
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d00c      	beq.n	8003ce6 <USBD_LL_SetupStage+0x56>
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d302      	bcc.n	8003cd6 <USBD_LL_SetupStage+0x46>
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d010      	beq.n	8003cf6 <USBD_LL_SetupStage+0x66>
 8003cd4:	e017      	b.n	8003d06 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8003cdc:	4619      	mov	r1, r3
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 f9ca 	bl	8004078 <USBD_StdDevReq>
      break;
 8003ce4:	e01a      	b.n	8003d1c <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8003cec:	4619      	mov	r1, r3
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 fa2c 	bl	800414c <USBD_StdItfReq>
      break;
 8003cf4:	e012      	b.n	8003d1c <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 fa6a 	bl	80041d8 <USBD_StdEPReq>
      break;
 8003d04:	e00a      	b.n	8003d1c <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003d0c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	4619      	mov	r1, r3
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f002 fb45 	bl	80063a4 <USBD_LL_StallEP>
      break;
 8003d1a:	bf00      	nop
  }

  return USBD_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3708      	adds	r7, #8
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b086      	sub	sp, #24
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	60f8      	str	r0, [r7, #12]
 8003d2e:	460b      	mov	r3, r1
 8003d30:	607a      	str	r2, [r7, #4]
 8003d32:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8003d34:	7afb      	ldrb	r3, [r7, #11]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d14b      	bne.n	8003dd2 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8003d40:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8003d48:	2b03      	cmp	r3, #3
 8003d4a:	d134      	bne.n	8003db6 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	68da      	ldr	r2, [r3, #12]
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	691b      	ldr	r3, [r3, #16]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d919      	bls.n	8003d8c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	68da      	ldr	r2, [r3, #12]
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	691b      	ldr	r3, [r3, #16]
 8003d60:	1ad2      	subs	r2, r2, r3
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	68da      	ldr	r2, [r3, #12]
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d203      	bcs.n	8003d7a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	e002      	b.n	8003d80 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	461a      	mov	r2, r3
 8003d82:	6879      	ldr	r1, [r7, #4]
 8003d84:	68f8      	ldr	r0, [r7, #12]
 8003d86:	f000 ff4b 	bl	8004c20 <USBD_CtlContinueRx>
 8003d8a:	e038      	b.n	8003dfe <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d00a      	beq.n	8003dae <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8003d9e:	2b03      	cmp	r3, #3
 8003da0:	d105      	bne.n	8003dae <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	68f8      	ldr	r0, [r7, #12]
 8003dac:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8003dae:	68f8      	ldr	r0, [r7, #12]
 8003db0:	f000 ff48 	bl	8004c44 <USBD_CtlSendStatus>
 8003db4:	e023      	b.n	8003dfe <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8003dbc:	2b05      	cmp	r3, #5
 8003dbe:	d11e      	bne.n	8003dfe <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8003dc8:	2100      	movs	r1, #0
 8003dca:	68f8      	ldr	r0, [r7, #12]
 8003dcc:	f002 faea 	bl	80063a4 <USBD_LL_StallEP>
 8003dd0:	e015      	b.n	8003dfe <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00d      	beq.n	8003dfa <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8003de4:	2b03      	cmp	r3, #3
 8003de6:	d108      	bne.n	8003dfa <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	7afa      	ldrb	r2, [r7, #11]
 8003df2:	4611      	mov	r1, r2
 8003df4:	68f8      	ldr	r0, [r7, #12]
 8003df6:	4798      	blx	r3
 8003df8:	e001      	b.n	8003dfe <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8003dfa:	2302      	movs	r3, #2
 8003dfc:	e000      	b.n	8003e00 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3718      	adds	r7, #24
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b086      	sub	sp, #24
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	460b      	mov	r3, r1
 8003e12:	607a      	str	r2, [r7, #4]
 8003e14:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8003e16:	7afb      	ldrb	r3, [r7, #11]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d17f      	bne.n	8003f1c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	3314      	adds	r3, #20
 8003e20:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d15c      	bne.n	8003ee6 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	68da      	ldr	r2, [r3, #12]
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	691b      	ldr	r3, [r3, #16]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d915      	bls.n	8003e64 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	68da      	ldr	r2, [r3, #12]
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	691b      	ldr	r3, [r3, #16]
 8003e40:	1ad2      	subs	r2, r2, r3
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	6879      	ldr	r1, [r7, #4]
 8003e50:	68f8      	ldr	r0, [r7, #12]
 8003e52:	f000 feb5 	bl	8004bc0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003e56:	2300      	movs	r3, #0
 8003e58:	2200      	movs	r2, #0
 8003e5a:	2100      	movs	r1, #0
 8003e5c:	68f8      	ldr	r0, [r7, #12]
 8003e5e:	f002 fb46 	bl	80064ee <USBD_LL_PrepareReceive>
 8003e62:	e04e      	b.n	8003f02 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	697a      	ldr	r2, [r7, #20]
 8003e6a:	6912      	ldr	r2, [r2, #16]
 8003e6c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003e70:	fb02 f201 	mul.w	r2, r2, r1
 8003e74:	1a9b      	subs	r3, r3, r2
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d11c      	bne.n	8003eb4 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	689a      	ldr	r2, [r3, #8]
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d316      	bcc.n	8003eb4 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	689a      	ldr	r2, [r3, #8]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d20f      	bcs.n	8003eb4 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8003e94:	2200      	movs	r2, #0
 8003e96:	2100      	movs	r1, #0
 8003e98:	68f8      	ldr	r0, [r7, #12]
 8003e9a:	f000 fe91 	bl	8004bc0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	2100      	movs	r1, #0
 8003eac:	68f8      	ldr	r0, [r7, #12]
 8003eae:	f002 fb1e 	bl	80064ee <USBD_LL_PrepareReceive>
 8003eb2:	e026      	b.n	8003f02 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d00a      	beq.n	8003ed6 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8003ec6:	2b03      	cmp	r3, #3
 8003ec8:	d105      	bne.n	8003ed6 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	68f8      	ldr	r0, [r7, #12]
 8003ed4:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8003ed6:	2180      	movs	r1, #128	; 0x80
 8003ed8:	68f8      	ldr	r0, [r7, #12]
 8003eda:	f002 fa63 	bl	80063a4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8003ede:	68f8      	ldr	r0, [r7, #12]
 8003ee0:	f000 fec3 	bl	8004c6a <USBD_CtlReceiveStatus>
 8003ee4:	e00d      	b.n	8003f02 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8003eec:	2b04      	cmp	r3, #4
 8003eee:	d004      	beq.n	8003efa <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d103      	bne.n	8003f02 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8003efa:	2180      	movs	r1, #128	; 0x80
 8003efc:	68f8      	ldr	r0, [r7, #12]
 8003efe:	f002 fa51 	bl	80063a4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d11d      	bne.n	8003f48 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8003f0c:	68f8      	ldr	r0, [r7, #12]
 8003f0e:	f7ff fe83 	bl	8003c18 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8003f1a:	e015      	b.n	8003f48 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003f22:	695b      	ldr	r3, [r3, #20]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00d      	beq.n	8003f44 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8003f2e:	2b03      	cmp	r3, #3
 8003f30:	d108      	bne.n	8003f44 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003f38:	695b      	ldr	r3, [r3, #20]
 8003f3a:	7afa      	ldrb	r2, [r7, #11]
 8003f3c:	4611      	mov	r1, r2
 8003f3e:	68f8      	ldr	r0, [r7, #12]
 8003f40:	4798      	blx	r3
 8003f42:	e001      	b.n	8003f48 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8003f44:	2302      	movs	r3, #2
 8003f46:	e000      	b.n	8003f4a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3718      	adds	r7, #24
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8003f52:	b580      	push	{r7, lr}
 8003f54:	b082      	sub	sp, #8
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003f5a:	2340      	movs	r3, #64	; 0x40
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	2100      	movs	r1, #0
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f002 f9da 	bl	800631a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2240      	movs	r2, #64	; 0x40
 8003f72:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003f76:	2340      	movs	r3, #64	; 0x40
 8003f78:	2200      	movs	r2, #0
 8003f7a:	2180      	movs	r1, #128	; 0x80
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f002 f9cc 	bl	800631a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2201      	movs	r2, #1
 8003f86:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2240      	movs	r2, #64	; 0x40
 8003f8c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2201      	movs	r2, #1
 8003f92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d009      	beq.n	8003fca <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	6852      	ldr	r2, [r2, #4]
 8003fc2:	b2d2      	uxtb	r2, r2
 8003fc4:	4611      	mov	r1, r2
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	4798      	blx	r3
  }

  return USBD_OK;
 8003fca:	2300      	movs	r3, #0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3708      	adds	r7, #8
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	460b      	mov	r3, r1
 8003fde:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	78fa      	ldrb	r2, [r7, #3]
 8003fe4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8003fe6:	2300      	movs	r3, #0
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bc80      	pop	{r7}
 8003ff0:	4770      	bx	lr

08003ff2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	b083      	sub	sp, #12
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2204      	movs	r2, #4
 800400a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800400e:	2300      	movs	r3, #0
}
 8004010:	4618      	mov	r0, r3
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	bc80      	pop	{r7}
 8004018:	4770      	bx	lr

0800401a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800401a:	b480      	push	{r7}
 800401c:	b083      	sub	sp, #12
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004028:	2b04      	cmp	r3, #4
 800402a:	d105      	bne.n	8004038 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	370c      	adds	r7, #12
 800403e:	46bd      	mov	sp, r7
 8004040:	bc80      	pop	{r7}
 8004042:	4770      	bx	lr

08004044 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b082      	sub	sp, #8
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004052:	2b03      	cmp	r3, #3
 8004054:	d10b      	bne.n	800406e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800405c:	69db      	ldr	r3, [r3, #28]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d005      	beq.n	800406e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004068:	69db      	ldr	r3, [r3, #28]
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800406e:	2300      	movs	r3, #0
}
 8004070:	4618      	mov	r0, r3
 8004072:	3708      	adds	r7, #8
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004082:	2300      	movs	r3, #0
 8004084:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800408e:	2b20      	cmp	r3, #32
 8004090:	d004      	beq.n	800409c <USBD_StdDevReq+0x24>
 8004092:	2b40      	cmp	r3, #64	; 0x40
 8004094:	d002      	beq.n	800409c <USBD_StdDevReq+0x24>
 8004096:	2b00      	cmp	r3, #0
 8004098:	d008      	beq.n	80040ac <USBD_StdDevReq+0x34>
 800409a:	e04c      	b.n	8004136 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	6839      	ldr	r1, [r7, #0]
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	4798      	blx	r3
      break;
 80040aa:	e049      	b.n	8004140 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	785b      	ldrb	r3, [r3, #1]
 80040b0:	2b09      	cmp	r3, #9
 80040b2:	d83a      	bhi.n	800412a <USBD_StdDevReq+0xb2>
 80040b4:	a201      	add	r2, pc, #4	; (adr r2, 80040bc <USBD_StdDevReq+0x44>)
 80040b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ba:	bf00      	nop
 80040bc:	0800410d 	.word	0x0800410d
 80040c0:	08004121 	.word	0x08004121
 80040c4:	0800412b 	.word	0x0800412b
 80040c8:	08004117 	.word	0x08004117
 80040cc:	0800412b 	.word	0x0800412b
 80040d0:	080040ef 	.word	0x080040ef
 80040d4:	080040e5 	.word	0x080040e5
 80040d8:	0800412b 	.word	0x0800412b
 80040dc:	08004103 	.word	0x08004103
 80040e0:	080040f9 	.word	0x080040f9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80040e4:	6839      	ldr	r1, [r7, #0]
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 f9d4 	bl	8004494 <USBD_GetDescriptor>
          break;
 80040ec:	e022      	b.n	8004134 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80040ee:	6839      	ldr	r1, [r7, #0]
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f000 fb37 	bl	8004764 <USBD_SetAddress>
          break;
 80040f6:	e01d      	b.n	8004134 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80040f8:	6839      	ldr	r1, [r7, #0]
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 fb74 	bl	80047e8 <USBD_SetConfig>
          break;
 8004100:	e018      	b.n	8004134 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8004102:	6839      	ldr	r1, [r7, #0]
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f000 fbfd 	bl	8004904 <USBD_GetConfig>
          break;
 800410a:	e013      	b.n	8004134 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800410c:	6839      	ldr	r1, [r7, #0]
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 fc2c 	bl	800496c <USBD_GetStatus>
          break;
 8004114:	e00e      	b.n	8004134 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8004116:	6839      	ldr	r1, [r7, #0]
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f000 fc5a 	bl	80049d2 <USBD_SetFeature>
          break;
 800411e:	e009      	b.n	8004134 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8004120:	6839      	ldr	r1, [r7, #0]
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 fc69 	bl	80049fa <USBD_ClrFeature>
          break;
 8004128:	e004      	b.n	8004134 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800412a:	6839      	ldr	r1, [r7, #0]
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f000 fcc1 	bl	8004ab4 <USBD_CtlError>
          break;
 8004132:	bf00      	nop
      }
      break;
 8004134:	e004      	b.n	8004140 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8004136:	6839      	ldr	r1, [r7, #0]
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f000 fcbb 	bl	8004ab4 <USBD_CtlError>
      break;
 800413e:	bf00      	nop
  }

  return ret;
 8004140:	7bfb      	ldrb	r3, [r7, #15]
}
 8004142:	4618      	mov	r0, r3
 8004144:	3710      	adds	r7, #16
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop

0800414c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004156:	2300      	movs	r3, #0
 8004158:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004162:	2b20      	cmp	r3, #32
 8004164:	d003      	beq.n	800416e <USBD_StdItfReq+0x22>
 8004166:	2b40      	cmp	r3, #64	; 0x40
 8004168:	d001      	beq.n	800416e <USBD_StdItfReq+0x22>
 800416a:	2b00      	cmp	r3, #0
 800416c:	d12a      	bne.n	80041c4 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004174:	3b01      	subs	r3, #1
 8004176:	2b02      	cmp	r3, #2
 8004178:	d81d      	bhi.n	80041b6 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	889b      	ldrh	r3, [r3, #4]
 800417e:	b2db      	uxtb	r3, r3
 8004180:	2b01      	cmp	r3, #1
 8004182:	d813      	bhi.n	80041ac <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	6839      	ldr	r1, [r7, #0]
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	4798      	blx	r3
 8004192:	4603      	mov	r3, r0
 8004194:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	88db      	ldrh	r3, [r3, #6]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d110      	bne.n	80041c0 <USBD_StdItfReq+0x74>
 800419e:	7bfb      	ldrb	r3, [r7, #15]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d10d      	bne.n	80041c0 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 fd4d 	bl	8004c44 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80041aa:	e009      	b.n	80041c0 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 80041ac:	6839      	ldr	r1, [r7, #0]
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 fc80 	bl	8004ab4 <USBD_CtlError>
          break;
 80041b4:	e004      	b.n	80041c0 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 80041b6:	6839      	ldr	r1, [r7, #0]
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f000 fc7b 	bl	8004ab4 <USBD_CtlError>
          break;
 80041be:	e000      	b.n	80041c2 <USBD_StdItfReq+0x76>
          break;
 80041c0:	bf00      	nop
      }
      break;
 80041c2:	e004      	b.n	80041ce <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 80041c4:	6839      	ldr	r1, [r7, #0]
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 fc74 	bl	8004ab4 <USBD_CtlError>
      break;
 80041cc:	bf00      	nop
  }

  return USBD_OK;
 80041ce:	2300      	movs	r3, #0
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3710      	adds	r7, #16
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80041e2:	2300      	movs	r3, #0
 80041e4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	889b      	ldrh	r3, [r3, #4]
 80041ea:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80041f4:	2b20      	cmp	r3, #32
 80041f6:	d004      	beq.n	8004202 <USBD_StdEPReq+0x2a>
 80041f8:	2b40      	cmp	r3, #64	; 0x40
 80041fa:	d002      	beq.n	8004202 <USBD_StdEPReq+0x2a>
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d008      	beq.n	8004212 <USBD_StdEPReq+0x3a>
 8004200:	e13d      	b.n	800447e <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	6839      	ldr	r1, [r7, #0]
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	4798      	blx	r3
      break;
 8004210:	e13a      	b.n	8004488 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800421a:	2b20      	cmp	r3, #32
 800421c:	d10a      	bne.n	8004234 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	6839      	ldr	r1, [r7, #0]
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	4798      	blx	r3
 800422c:	4603      	mov	r3, r0
 800422e:	73fb      	strb	r3, [r7, #15]

        return ret;
 8004230:	7bfb      	ldrb	r3, [r7, #15]
 8004232:	e12a      	b.n	800448a <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	785b      	ldrb	r3, [r3, #1]
 8004238:	2b01      	cmp	r3, #1
 800423a:	d03e      	beq.n	80042ba <USBD_StdEPReq+0xe2>
 800423c:	2b03      	cmp	r3, #3
 800423e:	d002      	beq.n	8004246 <USBD_StdEPReq+0x6e>
 8004240:	2b00      	cmp	r3, #0
 8004242:	d070      	beq.n	8004326 <USBD_StdEPReq+0x14e>
 8004244:	e115      	b.n	8004472 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800424c:	2b02      	cmp	r3, #2
 800424e:	d002      	beq.n	8004256 <USBD_StdEPReq+0x7e>
 8004250:	2b03      	cmp	r3, #3
 8004252:	d015      	beq.n	8004280 <USBD_StdEPReq+0xa8>
 8004254:	e02b      	b.n	80042ae <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004256:	7bbb      	ldrb	r3, [r7, #14]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d00c      	beq.n	8004276 <USBD_StdEPReq+0x9e>
 800425c:	7bbb      	ldrb	r3, [r7, #14]
 800425e:	2b80      	cmp	r3, #128	; 0x80
 8004260:	d009      	beq.n	8004276 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8004262:	7bbb      	ldrb	r3, [r7, #14]
 8004264:	4619      	mov	r1, r3
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f002 f89c 	bl	80063a4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800426c:	2180      	movs	r1, #128	; 0x80
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f002 f898 	bl	80063a4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8004274:	e020      	b.n	80042b8 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8004276:	6839      	ldr	r1, [r7, #0]
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f000 fc1b 	bl	8004ab4 <USBD_CtlError>
              break;
 800427e:	e01b      	b.n	80042b8 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	885b      	ldrh	r3, [r3, #2]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d10e      	bne.n	80042a6 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8004288:	7bbb      	ldrb	r3, [r7, #14]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00b      	beq.n	80042a6 <USBD_StdEPReq+0xce>
 800428e:	7bbb      	ldrb	r3, [r7, #14]
 8004290:	2b80      	cmp	r3, #128	; 0x80
 8004292:	d008      	beq.n	80042a6 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	88db      	ldrh	r3, [r3, #6]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d104      	bne.n	80042a6 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800429c:	7bbb      	ldrb	r3, [r7, #14]
 800429e:	4619      	mov	r1, r3
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f002 f87f 	bl	80063a4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 fccc 	bl	8004c44 <USBD_CtlSendStatus>

              break;
 80042ac:	e004      	b.n	80042b8 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 80042ae:	6839      	ldr	r1, [r7, #0]
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f000 fbff 	bl	8004ab4 <USBD_CtlError>
              break;
 80042b6:	bf00      	nop
          }
          break;
 80042b8:	e0e0      	b.n	800447c <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d002      	beq.n	80042ca <USBD_StdEPReq+0xf2>
 80042c4:	2b03      	cmp	r3, #3
 80042c6:	d015      	beq.n	80042f4 <USBD_StdEPReq+0x11c>
 80042c8:	e026      	b.n	8004318 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80042ca:	7bbb      	ldrb	r3, [r7, #14]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00c      	beq.n	80042ea <USBD_StdEPReq+0x112>
 80042d0:	7bbb      	ldrb	r3, [r7, #14]
 80042d2:	2b80      	cmp	r3, #128	; 0x80
 80042d4:	d009      	beq.n	80042ea <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80042d6:	7bbb      	ldrb	r3, [r7, #14]
 80042d8:	4619      	mov	r1, r3
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f002 f862 	bl	80063a4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80042e0:	2180      	movs	r1, #128	; 0x80
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f002 f85e 	bl	80063a4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80042e8:	e01c      	b.n	8004324 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 80042ea:	6839      	ldr	r1, [r7, #0]
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f000 fbe1 	bl	8004ab4 <USBD_CtlError>
              break;
 80042f2:	e017      	b.n	8004324 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	885b      	ldrh	r3, [r3, #2]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d112      	bne.n	8004322 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80042fc:	7bbb      	ldrb	r3, [r7, #14]
 80042fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004302:	2b00      	cmp	r3, #0
 8004304:	d004      	beq.n	8004310 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8004306:	7bbb      	ldrb	r3, [r7, #14]
 8004308:	4619      	mov	r1, r3
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f002 f869 	bl	80063e2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f000 fc97 	bl	8004c44 <USBD_CtlSendStatus>
              }
              break;
 8004316:	e004      	b.n	8004322 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8004318:	6839      	ldr	r1, [r7, #0]
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 fbca 	bl	8004ab4 <USBD_CtlError>
              break;
 8004320:	e000      	b.n	8004324 <USBD_StdEPReq+0x14c>
              break;
 8004322:	bf00      	nop
          }
          break;
 8004324:	e0aa      	b.n	800447c <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800432c:	2b02      	cmp	r3, #2
 800432e:	d002      	beq.n	8004336 <USBD_StdEPReq+0x15e>
 8004330:	2b03      	cmp	r3, #3
 8004332:	d032      	beq.n	800439a <USBD_StdEPReq+0x1c2>
 8004334:	e097      	b.n	8004466 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004336:	7bbb      	ldrb	r3, [r7, #14]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d007      	beq.n	800434c <USBD_StdEPReq+0x174>
 800433c:	7bbb      	ldrb	r3, [r7, #14]
 800433e:	2b80      	cmp	r3, #128	; 0x80
 8004340:	d004      	beq.n	800434c <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8004342:	6839      	ldr	r1, [r7, #0]
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f000 fbb5 	bl	8004ab4 <USBD_CtlError>
                break;
 800434a:	e091      	b.n	8004470 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800434c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004350:	2b00      	cmp	r3, #0
 8004352:	da0b      	bge.n	800436c <USBD_StdEPReq+0x194>
 8004354:	7bbb      	ldrb	r3, [r7, #14]
 8004356:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800435a:	4613      	mov	r3, r2
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	4413      	add	r3, r2
 8004360:	009b      	lsls	r3, r3, #2
 8004362:	3310      	adds	r3, #16
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	4413      	add	r3, r2
 8004368:	3304      	adds	r3, #4
 800436a:	e00b      	b.n	8004384 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800436c:	7bbb      	ldrb	r3, [r7, #14]
 800436e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004372:	4613      	mov	r3, r2
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	4413      	add	r3, r2
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	4413      	add	r3, r2
 8004382:	3304      	adds	r3, #4
 8004384:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	2200      	movs	r2, #0
 800438a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	2202      	movs	r2, #2
 8004390:	4619      	mov	r1, r3
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 fbf8 	bl	8004b88 <USBD_CtlSendData>
              break;
 8004398:	e06a      	b.n	8004470 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800439a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	da11      	bge.n	80043c6 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80043a2:	7bbb      	ldrb	r3, [r7, #14]
 80043a4:	f003 020f 	and.w	r2, r3, #15
 80043a8:	6879      	ldr	r1, [r7, #4]
 80043aa:	4613      	mov	r3, r2
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	4413      	add	r3, r2
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	440b      	add	r3, r1
 80043b4:	3318      	adds	r3, #24
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d117      	bne.n	80043ec <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80043bc:	6839      	ldr	r1, [r7, #0]
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f000 fb78 	bl	8004ab4 <USBD_CtlError>
                  break;
 80043c4:	e054      	b.n	8004470 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80043c6:	7bbb      	ldrb	r3, [r7, #14]
 80043c8:	f003 020f 	and.w	r2, r3, #15
 80043cc:	6879      	ldr	r1, [r7, #4]
 80043ce:	4613      	mov	r3, r2
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	4413      	add	r3, r2
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	440b      	add	r3, r1
 80043d8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d104      	bne.n	80043ec <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80043e2:	6839      	ldr	r1, [r7, #0]
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f000 fb65 	bl	8004ab4 <USBD_CtlError>
                  break;
 80043ea:	e041      	b.n	8004470 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80043ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	da0b      	bge.n	800440c <USBD_StdEPReq+0x234>
 80043f4:	7bbb      	ldrb	r3, [r7, #14]
 80043f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80043fa:	4613      	mov	r3, r2
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	4413      	add	r3, r2
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	3310      	adds	r3, #16
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	4413      	add	r3, r2
 8004408:	3304      	adds	r3, #4
 800440a:	e00b      	b.n	8004424 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800440c:	7bbb      	ldrb	r3, [r7, #14]
 800440e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004412:	4613      	mov	r3, r2
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	4413      	add	r3, r2
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	4413      	add	r3, r2
 8004422:	3304      	adds	r3, #4
 8004424:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8004426:	7bbb      	ldrb	r3, [r7, #14]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d002      	beq.n	8004432 <USBD_StdEPReq+0x25a>
 800442c:	7bbb      	ldrb	r3, [r7, #14]
 800442e:	2b80      	cmp	r3, #128	; 0x80
 8004430:	d103      	bne.n	800443a <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	2200      	movs	r2, #0
 8004436:	601a      	str	r2, [r3, #0]
 8004438:	e00e      	b.n	8004458 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800443a:	7bbb      	ldrb	r3, [r7, #14]
 800443c:	4619      	mov	r1, r3
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f001 ffee 	bl	8006420 <USBD_LL_IsStallEP>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d003      	beq.n	8004452 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	2201      	movs	r2, #1
 800444e:	601a      	str	r2, [r3, #0]
 8004450:	e002      	b.n	8004458 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	2200      	movs	r2, #0
 8004456:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	2202      	movs	r2, #2
 800445c:	4619      	mov	r1, r3
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 fb92 	bl	8004b88 <USBD_CtlSendData>
              break;
 8004464:	e004      	b.n	8004470 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8004466:	6839      	ldr	r1, [r7, #0]
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f000 fb23 	bl	8004ab4 <USBD_CtlError>
              break;
 800446e:	bf00      	nop
          }
          break;
 8004470:	e004      	b.n	800447c <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8004472:	6839      	ldr	r1, [r7, #0]
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f000 fb1d 	bl	8004ab4 <USBD_CtlError>
          break;
 800447a:	bf00      	nop
      }
      break;
 800447c:	e004      	b.n	8004488 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800447e:	6839      	ldr	r1, [r7, #0]
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f000 fb17 	bl	8004ab4 <USBD_CtlError>
      break;
 8004486:	bf00      	nop
  }

  return ret;
 8004488:	7bfb      	ldrb	r3, [r7, #15]
}
 800448a:	4618      	mov	r0, r3
 800448c:	3710      	adds	r7, #16
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
	...

08004494 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800449e:	2300      	movs	r3, #0
 80044a0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80044a2:	2300      	movs	r3, #0
 80044a4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80044a6:	2300      	movs	r3, #0
 80044a8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	885b      	ldrh	r3, [r3, #2]
 80044ae:	0a1b      	lsrs	r3, r3, #8
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	3b01      	subs	r3, #1
 80044b4:	2b06      	cmp	r3, #6
 80044b6:	f200 8128 	bhi.w	800470a <USBD_GetDescriptor+0x276>
 80044ba:	a201      	add	r2, pc, #4	; (adr r2, 80044c0 <USBD_GetDescriptor+0x2c>)
 80044bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c0:	080044dd 	.word	0x080044dd
 80044c4:	080044f5 	.word	0x080044f5
 80044c8:	08004535 	.word	0x08004535
 80044cc:	0800470b 	.word	0x0800470b
 80044d0:	0800470b 	.word	0x0800470b
 80044d4:	080046ab 	.word	0x080046ab
 80044d8:	080046d7 	.word	0x080046d7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	7c12      	ldrb	r2, [r2, #16]
 80044e8:	f107 0108 	add.w	r1, r7, #8
 80044ec:	4610      	mov	r0, r2
 80044ee:	4798      	blx	r3
 80044f0:	60f8      	str	r0, [r7, #12]
      break;
 80044f2:	e112      	b.n	800471a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	7c1b      	ldrb	r3, [r3, #16]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d10d      	bne.n	8004518 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004504:	f107 0208 	add.w	r2, r7, #8
 8004508:	4610      	mov	r0, r2
 800450a:	4798      	blx	r3
 800450c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	3301      	adds	r3, #1
 8004512:	2202      	movs	r2, #2
 8004514:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8004516:	e100      	b.n	800471a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800451e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004520:	f107 0208 	add.w	r2, r7, #8
 8004524:	4610      	mov	r0, r2
 8004526:	4798      	blx	r3
 8004528:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	3301      	adds	r3, #1
 800452e:	2202      	movs	r2, #2
 8004530:	701a      	strb	r2, [r3, #0]
      break;
 8004532:	e0f2      	b.n	800471a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	885b      	ldrh	r3, [r3, #2]
 8004538:	b2db      	uxtb	r3, r3
 800453a:	2b05      	cmp	r3, #5
 800453c:	f200 80ac 	bhi.w	8004698 <USBD_GetDescriptor+0x204>
 8004540:	a201      	add	r2, pc, #4	; (adr r2, 8004548 <USBD_GetDescriptor+0xb4>)
 8004542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004546:	bf00      	nop
 8004548:	08004561 	.word	0x08004561
 800454c:	08004595 	.word	0x08004595
 8004550:	080045c9 	.word	0x080045c9
 8004554:	080045fd 	.word	0x080045fd
 8004558:	08004631 	.word	0x08004631
 800455c:	08004665 	.word	0x08004665
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d00b      	beq.n	8004584 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	7c12      	ldrb	r2, [r2, #16]
 8004578:	f107 0108 	add.w	r1, r7, #8
 800457c:	4610      	mov	r0, r2
 800457e:	4798      	blx	r3
 8004580:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004582:	e091      	b.n	80046a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004584:	6839      	ldr	r1, [r7, #0]
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 fa94 	bl	8004ab4 <USBD_CtlError>
            err++;
 800458c:	7afb      	ldrb	r3, [r7, #11]
 800458e:	3301      	adds	r3, #1
 8004590:	72fb      	strb	r3, [r7, #11]
          break;
 8004592:	e089      	b.n	80046a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d00b      	beq.n	80045b8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	7c12      	ldrb	r2, [r2, #16]
 80045ac:	f107 0108 	add.w	r1, r7, #8
 80045b0:	4610      	mov	r0, r2
 80045b2:	4798      	blx	r3
 80045b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80045b6:	e077      	b.n	80046a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80045b8:	6839      	ldr	r1, [r7, #0]
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 fa7a 	bl	8004ab4 <USBD_CtlError>
            err++;
 80045c0:	7afb      	ldrb	r3, [r7, #11]
 80045c2:	3301      	adds	r3, #1
 80045c4:	72fb      	strb	r3, [r7, #11]
          break;
 80045c6:	e06f      	b.n	80046a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d00b      	beq.n	80045ec <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	7c12      	ldrb	r2, [r2, #16]
 80045e0:	f107 0108 	add.w	r1, r7, #8
 80045e4:	4610      	mov	r0, r2
 80045e6:	4798      	blx	r3
 80045e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80045ea:	e05d      	b.n	80046a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80045ec:	6839      	ldr	r1, [r7, #0]
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 fa60 	bl	8004ab4 <USBD_CtlError>
            err++;
 80045f4:	7afb      	ldrb	r3, [r7, #11]
 80045f6:	3301      	adds	r3, #1
 80045f8:	72fb      	strb	r3, [r7, #11]
          break;
 80045fa:	e055      	b.n	80046a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d00b      	beq.n	8004620 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800460e:	691b      	ldr	r3, [r3, #16]
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	7c12      	ldrb	r2, [r2, #16]
 8004614:	f107 0108 	add.w	r1, r7, #8
 8004618:	4610      	mov	r0, r2
 800461a:	4798      	blx	r3
 800461c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800461e:	e043      	b.n	80046a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004620:	6839      	ldr	r1, [r7, #0]
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 fa46 	bl	8004ab4 <USBD_CtlError>
            err++;
 8004628:	7afb      	ldrb	r3, [r7, #11]
 800462a:	3301      	adds	r3, #1
 800462c:	72fb      	strb	r3, [r7, #11]
          break;
 800462e:	e03b      	b.n	80046a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004636:	695b      	ldr	r3, [r3, #20]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d00b      	beq.n	8004654 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004642:	695b      	ldr	r3, [r3, #20]
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	7c12      	ldrb	r2, [r2, #16]
 8004648:	f107 0108 	add.w	r1, r7, #8
 800464c:	4610      	mov	r0, r2
 800464e:	4798      	blx	r3
 8004650:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004652:	e029      	b.n	80046a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004654:	6839      	ldr	r1, [r7, #0]
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 fa2c 	bl	8004ab4 <USBD_CtlError>
            err++;
 800465c:	7afb      	ldrb	r3, [r7, #11]
 800465e:	3301      	adds	r3, #1
 8004660:	72fb      	strb	r3, [r7, #11]
          break;
 8004662:	e021      	b.n	80046a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d00b      	beq.n	8004688 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004676:	699b      	ldr	r3, [r3, #24]
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	7c12      	ldrb	r2, [r2, #16]
 800467c:	f107 0108 	add.w	r1, r7, #8
 8004680:	4610      	mov	r0, r2
 8004682:	4798      	blx	r3
 8004684:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004686:	e00f      	b.n	80046a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004688:	6839      	ldr	r1, [r7, #0]
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 fa12 	bl	8004ab4 <USBD_CtlError>
            err++;
 8004690:	7afb      	ldrb	r3, [r7, #11]
 8004692:	3301      	adds	r3, #1
 8004694:	72fb      	strb	r3, [r7, #11]
          break;
 8004696:	e007      	b.n	80046a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8004698:	6839      	ldr	r1, [r7, #0]
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 fa0a 	bl	8004ab4 <USBD_CtlError>
          err++;
 80046a0:	7afb      	ldrb	r3, [r7, #11]
 80046a2:	3301      	adds	r3, #1
 80046a4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80046a6:	e038      	b.n	800471a <USBD_GetDescriptor+0x286>
 80046a8:	e037      	b.n	800471a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	7c1b      	ldrb	r3, [r3, #16]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d109      	bne.n	80046c6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80046b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ba:	f107 0208 	add.w	r2, r7, #8
 80046be:	4610      	mov	r0, r2
 80046c0:	4798      	blx	r3
 80046c2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80046c4:	e029      	b.n	800471a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80046c6:	6839      	ldr	r1, [r7, #0]
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f000 f9f3 	bl	8004ab4 <USBD_CtlError>
        err++;
 80046ce:	7afb      	ldrb	r3, [r7, #11]
 80046d0:	3301      	adds	r3, #1
 80046d2:	72fb      	strb	r3, [r7, #11]
      break;
 80046d4:	e021      	b.n	800471a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	7c1b      	ldrb	r3, [r3, #16]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d10d      	bne.n	80046fa <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80046e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e6:	f107 0208 	add.w	r2, r7, #8
 80046ea:	4610      	mov	r0, r2
 80046ec:	4798      	blx	r3
 80046ee:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	3301      	adds	r3, #1
 80046f4:	2207      	movs	r2, #7
 80046f6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80046f8:	e00f      	b.n	800471a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80046fa:	6839      	ldr	r1, [r7, #0]
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f000 f9d9 	bl	8004ab4 <USBD_CtlError>
        err++;
 8004702:	7afb      	ldrb	r3, [r7, #11]
 8004704:	3301      	adds	r3, #1
 8004706:	72fb      	strb	r3, [r7, #11]
      break;
 8004708:	e007      	b.n	800471a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800470a:	6839      	ldr	r1, [r7, #0]
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f000 f9d1 	bl	8004ab4 <USBD_CtlError>
      err++;
 8004712:	7afb      	ldrb	r3, [r7, #11]
 8004714:	3301      	adds	r3, #1
 8004716:	72fb      	strb	r3, [r7, #11]
      break;
 8004718:	bf00      	nop
  }

  if (err != 0U)
 800471a:	7afb      	ldrb	r3, [r7, #11]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d11c      	bne.n	800475a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8004720:	893b      	ldrh	r3, [r7, #8]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d011      	beq.n	800474a <USBD_GetDescriptor+0x2b6>
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	88db      	ldrh	r3, [r3, #6]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00d      	beq.n	800474a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	88da      	ldrh	r2, [r3, #6]
 8004732:	893b      	ldrh	r3, [r7, #8]
 8004734:	4293      	cmp	r3, r2
 8004736:	bf28      	it	cs
 8004738:	4613      	movcs	r3, r2
 800473a:	b29b      	uxth	r3, r3
 800473c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800473e:	893b      	ldrh	r3, [r7, #8]
 8004740:	461a      	mov	r2, r3
 8004742:	68f9      	ldr	r1, [r7, #12]
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f000 fa1f 	bl	8004b88 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	88db      	ldrh	r3, [r3, #6]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d104      	bne.n	800475c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 fa76 	bl	8004c44 <USBD_CtlSendStatus>
 8004758:	e000      	b.n	800475c <USBD_GetDescriptor+0x2c8>
    return;
 800475a:	bf00      	nop
    }
  }
}
 800475c:	3710      	adds	r7, #16
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop

08004764 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	889b      	ldrh	r3, [r3, #4]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d130      	bne.n	80047d8 <USBD_SetAddress+0x74>
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	88db      	ldrh	r3, [r3, #6]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d12c      	bne.n	80047d8 <USBD_SetAddress+0x74>
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	885b      	ldrh	r3, [r3, #2]
 8004782:	2b7f      	cmp	r3, #127	; 0x7f
 8004784:	d828      	bhi.n	80047d8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	885b      	ldrh	r3, [r3, #2]
 800478a:	b2db      	uxtb	r3, r3
 800478c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004790:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004798:	2b03      	cmp	r3, #3
 800479a:	d104      	bne.n	80047a6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800479c:	6839      	ldr	r1, [r7, #0]
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 f988 	bl	8004ab4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80047a4:	e01c      	b.n	80047e0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	7bfa      	ldrb	r2, [r7, #15]
 80047aa:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80047ae:	7bfb      	ldrb	r3, [r7, #15]
 80047b0:	4619      	mov	r1, r3
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f001 fe59 	bl	800646a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f000 fa43 	bl	8004c44 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80047be:	7bfb      	ldrb	r3, [r7, #15]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d004      	beq.n	80047ce <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2202      	movs	r2, #2
 80047c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80047cc:	e008      	b.n	80047e0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2201      	movs	r2, #1
 80047d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80047d6:	e003      	b.n	80047e0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80047d8:	6839      	ldr	r1, [r7, #0]
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 f96a 	bl	8004ab4 <USBD_CtlError>
  }
}
 80047e0:	bf00      	nop
 80047e2:	3710      	adds	r7, #16
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	885b      	ldrh	r3, [r3, #2]
 80047f6:	b2da      	uxtb	r2, r3
 80047f8:	4b41      	ldr	r3, [pc, #260]	; (8004900 <USBD_SetConfig+0x118>)
 80047fa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80047fc:	4b40      	ldr	r3, [pc, #256]	; (8004900 <USBD_SetConfig+0x118>)
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	2b01      	cmp	r3, #1
 8004802:	d904      	bls.n	800480e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8004804:	6839      	ldr	r1, [r7, #0]
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 f954 	bl	8004ab4 <USBD_CtlError>
 800480c:	e075      	b.n	80048fa <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004814:	2b02      	cmp	r3, #2
 8004816:	d002      	beq.n	800481e <USBD_SetConfig+0x36>
 8004818:	2b03      	cmp	r3, #3
 800481a:	d023      	beq.n	8004864 <USBD_SetConfig+0x7c>
 800481c:	e062      	b.n	80048e4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800481e:	4b38      	ldr	r3, [pc, #224]	; (8004900 <USBD_SetConfig+0x118>)
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d01a      	beq.n	800485c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8004826:	4b36      	ldr	r3, [pc, #216]	; (8004900 <USBD_SetConfig+0x118>)
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	461a      	mov	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2203      	movs	r2, #3
 8004834:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8004838:	4b31      	ldr	r3, [pc, #196]	; (8004900 <USBD_SetConfig+0x118>)
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	4619      	mov	r1, r3
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f7ff f9f4 	bl	8003c2c <USBD_SetClassConfig>
 8004844:	4603      	mov	r3, r0
 8004846:	2b02      	cmp	r3, #2
 8004848:	d104      	bne.n	8004854 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800484a:	6839      	ldr	r1, [r7, #0]
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f000 f931 	bl	8004ab4 <USBD_CtlError>
            return;
 8004852:	e052      	b.n	80048fa <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f000 f9f5 	bl	8004c44 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800485a:	e04e      	b.n	80048fa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f000 f9f1 	bl	8004c44 <USBD_CtlSendStatus>
        break;
 8004862:	e04a      	b.n	80048fa <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8004864:	4b26      	ldr	r3, [pc, #152]	; (8004900 <USBD_SetConfig+0x118>)
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d112      	bne.n	8004892 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2202      	movs	r2, #2
 8004870:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8004874:	4b22      	ldr	r3, [pc, #136]	; (8004900 <USBD_SetConfig+0x118>)
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	461a      	mov	r2, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800487e:	4b20      	ldr	r3, [pc, #128]	; (8004900 <USBD_SetConfig+0x118>)
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	4619      	mov	r1, r3
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f7ff f9f0 	bl	8003c6a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 f9da 	bl	8004c44 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8004890:	e033      	b.n	80048fa <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8004892:	4b1b      	ldr	r3, [pc, #108]	; (8004900 <USBD_SetConfig+0x118>)
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	461a      	mov	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	429a      	cmp	r2, r3
 800489e:	d01d      	beq.n	80048dc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	4619      	mov	r1, r3
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f7ff f9de 	bl	8003c6a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80048ae:	4b14      	ldr	r3, [pc, #80]	; (8004900 <USBD_SetConfig+0x118>)
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	461a      	mov	r2, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80048b8:	4b11      	ldr	r3, [pc, #68]	; (8004900 <USBD_SetConfig+0x118>)
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	4619      	mov	r1, r3
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f7ff f9b4 	bl	8003c2c <USBD_SetClassConfig>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	d104      	bne.n	80048d4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80048ca:	6839      	ldr	r1, [r7, #0]
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f000 f8f1 	bl	8004ab4 <USBD_CtlError>
            return;
 80048d2:	e012      	b.n	80048fa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f000 f9b5 	bl	8004c44 <USBD_CtlSendStatus>
        break;
 80048da:	e00e      	b.n	80048fa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f000 f9b1 	bl	8004c44 <USBD_CtlSendStatus>
        break;
 80048e2:	e00a      	b.n	80048fa <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80048e4:	6839      	ldr	r1, [r7, #0]
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 f8e4 	bl	8004ab4 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80048ec:	4b04      	ldr	r3, [pc, #16]	; (8004900 <USBD_SetConfig+0x118>)
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	4619      	mov	r1, r3
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f7ff f9b9 	bl	8003c6a <USBD_ClrClassConfig>
        break;
 80048f8:	bf00      	nop
    }
  }
}
 80048fa:	3708      	adds	r7, #8
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	2000037c 	.word	0x2000037c

08004904 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b082      	sub	sp, #8
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	88db      	ldrh	r3, [r3, #6]
 8004912:	2b01      	cmp	r3, #1
 8004914:	d004      	beq.n	8004920 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8004916:	6839      	ldr	r1, [r7, #0]
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f000 f8cb 	bl	8004ab4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800491e:	e021      	b.n	8004964 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004926:	2b01      	cmp	r3, #1
 8004928:	db17      	blt.n	800495a <USBD_GetConfig+0x56>
 800492a:	2b02      	cmp	r3, #2
 800492c:	dd02      	ble.n	8004934 <USBD_GetConfig+0x30>
 800492e:	2b03      	cmp	r3, #3
 8004930:	d00b      	beq.n	800494a <USBD_GetConfig+0x46>
 8004932:	e012      	b.n	800495a <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	3308      	adds	r3, #8
 800493e:	2201      	movs	r2, #1
 8004940:	4619      	mov	r1, r3
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 f920 	bl	8004b88 <USBD_CtlSendData>
        break;
 8004948:	e00c      	b.n	8004964 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	3304      	adds	r3, #4
 800494e:	2201      	movs	r2, #1
 8004950:	4619      	mov	r1, r3
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 f918 	bl	8004b88 <USBD_CtlSendData>
        break;
 8004958:	e004      	b.n	8004964 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800495a:	6839      	ldr	r1, [r7, #0]
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f000 f8a9 	bl	8004ab4 <USBD_CtlError>
        break;
 8004962:	bf00      	nop
}
 8004964:	bf00      	nop
 8004966:	3708      	adds	r7, #8
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}

0800496c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b082      	sub	sp, #8
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800497c:	3b01      	subs	r3, #1
 800497e:	2b02      	cmp	r3, #2
 8004980:	d81e      	bhi.n	80049c0 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	88db      	ldrh	r3, [r3, #6]
 8004986:	2b02      	cmp	r3, #2
 8004988:	d004      	beq.n	8004994 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800498a:	6839      	ldr	r1, [r7, #0]
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f000 f891 	bl	8004ab4 <USBD_CtlError>
        break;
 8004992:	e01a      	b.n	80049ca <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d005      	beq.n	80049b0 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	f043 0202 	orr.w	r2, r3, #2
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	330c      	adds	r3, #12
 80049b4:	2202      	movs	r2, #2
 80049b6:	4619      	mov	r1, r3
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f000 f8e5 	bl	8004b88 <USBD_CtlSendData>
      break;
 80049be:	e004      	b.n	80049ca <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80049c0:	6839      	ldr	r1, [r7, #0]
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 f876 	bl	8004ab4 <USBD_CtlError>
      break;
 80049c8:	bf00      	nop
  }
}
 80049ca:	bf00      	nop
 80049cc:	3708      	adds	r7, #8
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}

080049d2 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80049d2:	b580      	push	{r7, lr}
 80049d4:	b082      	sub	sp, #8
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
 80049da:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	885b      	ldrh	r3, [r3, #2]
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d106      	bne.n	80049f2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f000 f929 	bl	8004c44 <USBD_CtlSendStatus>
  }
}
 80049f2:	bf00      	nop
 80049f4:	3708      	adds	r7, #8
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}

080049fa <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80049fa:	b580      	push	{r7, lr}
 80049fc:	b082      	sub	sp, #8
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
 8004a02:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	d80b      	bhi.n	8004a28 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	885b      	ldrh	r3, [r3, #2]
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d10c      	bne.n	8004a32 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f000 f90f 	bl	8004c44 <USBD_CtlSendStatus>
      }
      break;
 8004a26:	e004      	b.n	8004a32 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8004a28:	6839      	ldr	r1, [r7, #0]
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 f842 	bl	8004ab4 <USBD_CtlError>
      break;
 8004a30:	e000      	b.n	8004a34 <USBD_ClrFeature+0x3a>
      break;
 8004a32:	bf00      	nop
  }
}
 8004a34:	bf00      	nop
 8004a36:	3708      	adds	r7, #8
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	781a      	ldrb	r2, [r3, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	785a      	ldrb	r2, [r3, #1]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	3302      	adds	r3, #2
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	b29a      	uxth	r2, r3
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	3303      	adds	r3, #3
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	021b      	lsls	r3, r3, #8
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	4413      	add	r3, r2
 8004a6c:	b29a      	uxth	r2, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	3304      	adds	r3, #4
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	b29a      	uxth	r2, r3
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	3305      	adds	r3, #5
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	021b      	lsls	r3, r3, #8
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	4413      	add	r3, r2
 8004a88:	b29a      	uxth	r2, r3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	3306      	adds	r3, #6
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	b29a      	uxth	r2, r3
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	3307      	adds	r3, #7
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	021b      	lsls	r3, r3, #8
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	4413      	add	r3, r2
 8004aa4:	b29a      	uxth	r2, r3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	80da      	strh	r2, [r3, #6]

}
 8004aaa:	bf00      	nop
 8004aac:	370c      	adds	r7, #12
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bc80      	pop	{r7}
 8004ab2:	4770      	bx	lr

08004ab4 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8004abe:	2180      	movs	r1, #128	; 0x80
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f001 fc6f 	bl	80063a4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8004ac6:	2100      	movs	r1, #0
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f001 fc6b 	bl	80063a4 <USBD_LL_StallEP>
}
 8004ace:	bf00      	nop
 8004ad0:	3708      	adds	r7, #8
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}

08004ad6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8004ad6:	b580      	push	{r7, lr}
 8004ad8:	b086      	sub	sp, #24
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	60f8      	str	r0, [r7, #12]
 8004ade:	60b9      	str	r1, [r7, #8]
 8004ae0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d032      	beq.n	8004b52 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8004aec:	68f8      	ldr	r0, [r7, #12]
 8004aee:	f000 f834 	bl	8004b5a <USBD_GetLen>
 8004af2:	4603      	mov	r3, r0
 8004af4:	3301      	adds	r3, #1
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	005b      	lsls	r3, r3, #1
 8004afa:	b29a      	uxth	r2, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8004b00:	7dfb      	ldrb	r3, [r7, #23]
 8004b02:	1c5a      	adds	r2, r3, #1
 8004b04:	75fa      	strb	r2, [r7, #23]
 8004b06:	461a      	mov	r2, r3
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	7812      	ldrb	r2, [r2, #0]
 8004b10:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8004b12:	7dfb      	ldrb	r3, [r7, #23]
 8004b14:	1c5a      	adds	r2, r3, #1
 8004b16:	75fa      	strb	r2, [r7, #23]
 8004b18:	461a      	mov	r2, r3
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	4413      	add	r3, r2
 8004b1e:	2203      	movs	r2, #3
 8004b20:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8004b22:	e012      	b.n	8004b4a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	1c5a      	adds	r2, r3, #1
 8004b28:	60fa      	str	r2, [r7, #12]
 8004b2a:	7dfa      	ldrb	r2, [r7, #23]
 8004b2c:	1c51      	adds	r1, r2, #1
 8004b2e:	75f9      	strb	r1, [r7, #23]
 8004b30:	4611      	mov	r1, r2
 8004b32:	68ba      	ldr	r2, [r7, #8]
 8004b34:	440a      	add	r2, r1
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8004b3a:	7dfb      	ldrb	r3, [r7, #23]
 8004b3c:	1c5a      	adds	r2, r3, #1
 8004b3e:	75fa      	strb	r2, [r7, #23]
 8004b40:	461a      	mov	r2, r3
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	4413      	add	r3, r2
 8004b46:	2200      	movs	r2, #0
 8004b48:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d1e8      	bne.n	8004b24 <USBD_GetString+0x4e>
    }
  }
}
 8004b52:	bf00      	nop
 8004b54:	3718      	adds	r7, #24
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}

08004b5a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8004b5a:	b480      	push	{r7}
 8004b5c:	b085      	sub	sp, #20
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8004b62:	2300      	movs	r3, #0
 8004b64:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8004b66:	e005      	b.n	8004b74 <USBD_GetLen+0x1a>
  {
    len++;
 8004b68:	7bfb      	ldrb	r3, [r7, #15]
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	73fb      	strb	r3, [r7, #15]
    buf++;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	3301      	adds	r3, #1
 8004b72:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d1f5      	bne.n	8004b68 <USBD_GetLen+0xe>
  }

  return len;
 8004b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3714      	adds	r7, #20
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bc80      	pop	{r7}
 8004b86:	4770      	bx	lr

08004b88 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	4613      	mov	r3, r2
 8004b94:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2202      	movs	r2, #2
 8004b9a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8004b9e:	88fa      	ldrh	r2, [r7, #6]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8004ba4:	88fa      	ldrh	r2, [r7, #6]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004baa:	88fb      	ldrh	r3, [r7, #6]
 8004bac:	68ba      	ldr	r2, [r7, #8]
 8004bae:	2100      	movs	r1, #0
 8004bb0:	68f8      	ldr	r0, [r7, #12]
 8004bb2:	f001 fc79 	bl	80064a8 <USBD_LL_Transmit>

  return USBD_OK;
 8004bb6:	2300      	movs	r3, #0
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3710      	adds	r7, #16
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	60b9      	str	r1, [r7, #8]
 8004bca:	4613      	mov	r3, r2
 8004bcc:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004bce:	88fb      	ldrh	r3, [r7, #6]
 8004bd0:	68ba      	ldr	r2, [r7, #8]
 8004bd2:	2100      	movs	r1, #0
 8004bd4:	68f8      	ldr	r0, [r7, #12]
 8004bd6:	f001 fc67 	bl	80064a8 <USBD_LL_Transmit>

  return USBD_OK;
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3710      	adds	r7, #16
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	4613      	mov	r3, r2
 8004bf0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2203      	movs	r2, #3
 8004bf6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8004bfa:	88fa      	ldrh	r2, [r7, #6]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8004c02:	88fa      	ldrh	r2, [r7, #6]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004c0a:	88fb      	ldrh	r3, [r7, #6]
 8004c0c:	68ba      	ldr	r2, [r7, #8]
 8004c0e:	2100      	movs	r1, #0
 8004c10:	68f8      	ldr	r0, [r7, #12]
 8004c12:	f001 fc6c 	bl	80064ee <USBD_LL_PrepareReceive>

  return USBD_OK;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3710      	adds	r7, #16
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	4613      	mov	r3, r2
 8004c2c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004c2e:	88fb      	ldrh	r3, [r7, #6]
 8004c30:	68ba      	ldr	r2, [r7, #8]
 8004c32:	2100      	movs	r1, #0
 8004c34:	68f8      	ldr	r0, [r7, #12]
 8004c36:	f001 fc5a 	bl	80064ee <USBD_LL_PrepareReceive>

  return USBD_OK;
 8004c3a:	2300      	movs	r3, #0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3710      	adds	r7, #16
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b082      	sub	sp, #8
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2204      	movs	r2, #4
 8004c50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8004c54:	2300      	movs	r3, #0
 8004c56:	2200      	movs	r2, #0
 8004c58:	2100      	movs	r1, #0
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f001 fc24 	bl	80064a8 <USBD_LL_Transmit>

  return USBD_OK;
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3708      	adds	r7, #8
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}

08004c6a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8004c6a:	b580      	push	{r7, lr}
 8004c6c:	b082      	sub	sp, #8
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2205      	movs	r2, #5
 8004c76:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	2100      	movs	r1, #0
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f001 fc34 	bl	80064ee <USBD_LL_PrepareReceive>

  return USBD_OK;
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3708      	adds	r7, #8
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <__NVIC_SystemReset>:
{
 8004c90:	b480      	push	{r7}
 8004c92:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004c94:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004c98:	4b05      	ldr	r3, [pc, #20]	; (8004cb0 <__NVIC_SystemReset+0x20>)
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004ca0:	4903      	ldr	r1, [pc, #12]	; (8004cb0 <__NVIC_SystemReset+0x20>)
 8004ca2:	4b04      	ldr	r3, [pc, #16]	; (8004cb4 <__NVIC_SystemReset+0x24>)
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	60cb      	str	r3, [r1, #12]
 8004ca8:	f3bf 8f4f 	dsb	sy
    __NOP();
 8004cac:	bf00      	nop
 8004cae:	e7fd      	b.n	8004cac <__NVIC_SystemReset+0x1c>
 8004cb0:	e000ed00 	.word	0xe000ed00
 8004cb4:	05fa0004 	.word	0x05fa0004

08004cb8 <Initialize_SIM800>:
uint8_t	PID_enable = 0;
uint8_t	PID_timeout = 0;
uint8_t	PID_damp_cntr = 0;
uint8_t report_status = 0;
////////////////
void	Initialize_SIM800(void){
 8004cb8:	b5b0      	push	{r4, r5, r7, lr}
 8004cba:	af00      	add	r7, sp, #0
	//
	HAL_Delay(10000);
 8004cbc:	f242 7010 	movw	r0, #10000	; 0x2710
 8004cc0:	f7fb fab8 	bl	8000234 <HAL_Delay>
	tmp_str[0] = '\0';
 8004cc4:	4b41      	ldr	r3, [pc, #260]	; (8004dcc <Initialize_SIM800+0x114>)
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	701a      	strb	r2, [r3, #0]
	sprintf(tmp_str,"AT+CMGF=1\r"); // Make SMS mode into text mode
 8004cca:	4b40      	ldr	r3, [pc, #256]	; (8004dcc <Initialize_SIM800+0x114>)
 8004ccc:	4a40      	ldr	r2, [pc, #256]	; (8004dd0 <Initialize_SIM800+0x118>)
 8004cce:	ca07      	ldmia	r2, {r0, r1, r2}
 8004cd0:	c303      	stmia	r3!, {r0, r1}
 8004cd2:	801a      	strh	r2, [r3, #0]
 8004cd4:	3302      	adds	r3, #2
 8004cd6:	0c12      	lsrs	r2, r2, #16
 8004cd8:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart3,(unsigned char *)tmp_str,strlen(tmp_str),1000);
 8004cda:	483c      	ldr	r0, [pc, #240]	; (8004dcc <Initialize_SIM800+0x114>)
 8004cdc:	f7fb fa40 	bl	8000160 <strlen>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	b29a      	uxth	r2, r3
 8004ce4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ce8:	4938      	ldr	r1, [pc, #224]	; (8004dcc <Initialize_SIM800+0x114>)
 8004cea:	483a      	ldr	r0, [pc, #232]	; (8004dd4 <Initialize_SIM800+0x11c>)
 8004cec:	f7fd f949 	bl	8001f82 <HAL_UART_Transmit>
	//
	HAL_Delay(2000);
 8004cf0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004cf4:	f7fb fa9e 	bl	8000234 <HAL_Delay>
	tmp_str[0] = '\0';
 8004cf8:	4b34      	ldr	r3, [pc, #208]	; (8004dcc <Initialize_SIM800+0x114>)
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	701a      	strb	r2, [r3, #0]
	sprintf(tmp_str,"AT+CFUN=1\r"); // make module ready to call and sms
 8004cfe:	4b33      	ldr	r3, [pc, #204]	; (8004dcc <Initialize_SIM800+0x114>)
 8004d00:	4a35      	ldr	r2, [pc, #212]	; (8004dd8 <Initialize_SIM800+0x120>)
 8004d02:	ca07      	ldmia	r2, {r0, r1, r2}
 8004d04:	c303      	stmia	r3!, {r0, r1}
 8004d06:	801a      	strh	r2, [r3, #0]
 8004d08:	3302      	adds	r3, #2
 8004d0a:	0c12      	lsrs	r2, r2, #16
 8004d0c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart3,(unsigned char *)tmp_str,strlen(tmp_str),1000);
 8004d0e:	482f      	ldr	r0, [pc, #188]	; (8004dcc <Initialize_SIM800+0x114>)
 8004d10:	f7fb fa26 	bl	8000160 <strlen>
 8004d14:	4603      	mov	r3, r0
 8004d16:	b29a      	uxth	r2, r3
 8004d18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d1c:	492b      	ldr	r1, [pc, #172]	; (8004dcc <Initialize_SIM800+0x114>)
 8004d1e:	482d      	ldr	r0, [pc, #180]	; (8004dd4 <Initialize_SIM800+0x11c>)
 8004d20:	f7fd f92f 	bl	8001f82 <HAL_UART_Transmit>
	//
	HAL_Delay(2000);
 8004d24:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004d28:	f7fb fa84 	bl	8000234 <HAL_Delay>
	tmp_str[0] = '\0';
 8004d2c:	4b27      	ldr	r3, [pc, #156]	; (8004dcc <Initialize_SIM800+0x114>)
 8004d2e:	2200      	movs	r2, #0
 8004d30:	701a      	strb	r2, [r3, #0]
	sprintf(tmp_str,"AT+IPR=115200\r"); // set sim800 uart baudrate to 115200
 8004d32:	4a26      	ldr	r2, [pc, #152]	; (8004dcc <Initialize_SIM800+0x114>)
 8004d34:	4b29      	ldr	r3, [pc, #164]	; (8004ddc <Initialize_SIM800+0x124>)
 8004d36:	4614      	mov	r4, r2
 8004d38:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004d3a:	c407      	stmia	r4!, {r0, r1, r2}
 8004d3c:	8023      	strh	r3, [r4, #0]
 8004d3e:	3402      	adds	r4, #2
 8004d40:	0c1b      	lsrs	r3, r3, #16
 8004d42:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart3,(unsigned char *)tmp_str,strlen(tmp_str),1000);
 8004d44:	4821      	ldr	r0, [pc, #132]	; (8004dcc <Initialize_SIM800+0x114>)
 8004d46:	f7fb fa0b 	bl	8000160 <strlen>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	b29a      	uxth	r2, r3
 8004d4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d52:	491e      	ldr	r1, [pc, #120]	; (8004dcc <Initialize_SIM800+0x114>)
 8004d54:	481f      	ldr	r0, [pc, #124]	; (8004dd4 <Initialize_SIM800+0x11c>)
 8004d56:	f7fd f914 	bl	8001f82 <HAL_UART_Transmit>
	//
	HAL_Delay(2000);
 8004d5a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004d5e:	f7fb fa69 	bl	8000234 <HAL_Delay>
	tmp_str[0] = '\0';
 8004d62:	4b1a      	ldr	r3, [pc, #104]	; (8004dcc <Initialize_SIM800+0x114>)
 8004d64:	2200      	movs	r2, #0
 8004d66:	701a      	strb	r2, [r3, #0]
	sprintf(tmp_str,"ATE0\r"); // turn at command echo off
 8004d68:	4b18      	ldr	r3, [pc, #96]	; (8004dcc <Initialize_SIM800+0x114>)
 8004d6a:	4a1d      	ldr	r2, [pc, #116]	; (8004de0 <Initialize_SIM800+0x128>)
 8004d6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004d70:	6018      	str	r0, [r3, #0]
 8004d72:	3304      	adds	r3, #4
 8004d74:	8019      	strh	r1, [r3, #0]
	HAL_UART_Transmit(&huart3,(unsigned char *)tmp_str,strlen(tmp_str),1000);
 8004d76:	4815      	ldr	r0, [pc, #84]	; (8004dcc <Initialize_SIM800+0x114>)
 8004d78:	f7fb f9f2 	bl	8000160 <strlen>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	b29a      	uxth	r2, r3
 8004d80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d84:	4911      	ldr	r1, [pc, #68]	; (8004dcc <Initialize_SIM800+0x114>)
 8004d86:	4813      	ldr	r0, [pc, #76]	; (8004dd4 <Initialize_SIM800+0x11c>)
 8004d88:	f7fd f8fb 	bl	8001f82 <HAL_UART_Transmit>
	//
	HAL_Delay(2000);
 8004d8c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004d90:	f7fb fa50 	bl	8000234 <HAL_Delay>
	tmp_str[0] = '\0';
 8004d94:	4b0d      	ldr	r3, [pc, #52]	; (8004dcc <Initialize_SIM800+0x114>)
 8004d96:	2200      	movs	r2, #0
 8004d98:	701a      	strb	r2, [r3, #0]
	sprintf(tmp_str,"AT+CMGDA=\"DEL ALL\"\r"); // Delete all previous messages
 8004d9a:	4a0c      	ldr	r2, [pc, #48]	; (8004dcc <Initialize_SIM800+0x114>)
 8004d9c:	4b11      	ldr	r3, [pc, #68]	; (8004de4 <Initialize_SIM800+0x12c>)
 8004d9e:	4614      	mov	r4, r2
 8004da0:	461d      	mov	r5, r3
 8004da2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004da4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004da6:	682b      	ldr	r3, [r5, #0]
 8004da8:	6023      	str	r3, [r4, #0]
	HAL_UART_Transmit(&huart3,(unsigned char *)tmp_str,strlen(tmp_str),1000);
 8004daa:	4808      	ldr	r0, [pc, #32]	; (8004dcc <Initialize_SIM800+0x114>)
 8004dac:	f7fb f9d8 	bl	8000160 <strlen>
 8004db0:	4603      	mov	r3, r0
 8004db2:	b29a      	uxth	r2, r3
 8004db4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004db8:	4904      	ldr	r1, [pc, #16]	; (8004dcc <Initialize_SIM800+0x114>)
 8004dba:	4806      	ldr	r0, [pc, #24]	; (8004dd4 <Initialize_SIM800+0x11c>)
 8004dbc:	f7fd f8e1 	bl	8001f82 <HAL_UART_Transmit>
	HAL_Delay(5000);
 8004dc0:	f241 3088 	movw	r0, #5000	; 0x1388
 8004dc4:	f7fb fa36 	bl	8000234 <HAL_Delay>
}
 8004dc8:	bf00      	nop
 8004dca:	bdb0      	pop	{r4, r5, r7, pc}
 8004dcc:	20000384 	.word	0x20000384
 8004dd0:	08007324 	.word	0x08007324
 8004dd4:	20000678 	.word	0x20000678
 8004dd8:	08007330 	.word	0x08007330
 8004ddc:	0800733c 	.word	0x0800733c
 8004de0:	0800734c 	.word	0x0800734c
 8004de4:	08007354 	.word	0x08007354

08004de8 <Checking_inputs>:
//////////
void	Checking_inputs(void){
 8004de8:	b5b0      	push	{r4, r5, r7, lr}
 8004dea:	af00      	add	r7, sp, #0
	//
	LED1_GPIO_Port -> BSRR = LED1_Pin;
 8004dec:	4ba1      	ldr	r3, [pc, #644]	; (8005074 <Checking_inputs+0x28c>)
 8004dee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004df2:	611a      	str	r2, [r3, #16]
	if (knock_timeout > 0){
 8004df4:	4ba0      	ldr	r3, [pc, #640]	; (8005078 <Checking_inputs+0x290>)
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d005      	beq.n	8004e08 <Checking_inputs+0x20>
		knock_timeout--;
 8004dfc:	4b9e      	ldr	r3, [pc, #632]	; (8005078 <Checking_inputs+0x290>)
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	3b01      	subs	r3, #1
 8004e02:	b2da      	uxtb	r2, r3
 8004e04:	4b9c      	ldr	r3, [pc, #624]	; (8005078 <Checking_inputs+0x290>)
 8004e06:	701a      	strb	r2, [r3, #0]
	}
	if (PID_timeout > 0){
 8004e08:	4b9c      	ldr	r3, [pc, #624]	; (800507c <Checking_inputs+0x294>)
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d005      	beq.n	8004e1c <Checking_inputs+0x34>
		PID_timeout--;
 8004e10:	4b9a      	ldr	r3, [pc, #616]	; (800507c <Checking_inputs+0x294>)
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	3b01      	subs	r3, #1
 8004e16:	b2da      	uxtb	r2, r3
 8004e18:	4b98      	ldr	r3, [pc, #608]	; (800507c <Checking_inputs+0x294>)
 8004e1a:	701a      	strb	r2, [r3, #0]
	}
	//
	for (k = 0; k < 30; k++){
 8004e1c:	4b98      	ldr	r3, [pc, #608]	; (8005080 <Checking_inputs+0x298>)
 8004e1e:	2200      	movs	r2, #0
 8004e20:	801a      	strh	r2, [r3, #0]
 8004e22:	e11b      	b.n	800505c <Checking_inputs+0x274>
		//
		if((KEY0_GPIO_Port->IDR & KEY0_Pin) == (uint32_t)GPIO_PIN_RESET)
 8004e24:	4b93      	ldr	r3, [pc, #588]	; (8005074 <Checking_inputs+0x28c>)
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d11a      	bne.n	8004e66 <Checking_inputs+0x7e>
		{
			test_key_cntr++;
 8004e30:	4b94      	ldr	r3, [pc, #592]	; (8005084 <Checking_inputs+0x29c>)
 8004e32:	881b      	ldrh	r3, [r3, #0]
 8004e34:	3301      	adds	r3, #1
 8004e36:	b29a      	uxth	r2, r3
 8004e38:	4b92      	ldr	r3, [pc, #584]	; (8005084 <Checking_inputs+0x29c>)
 8004e3a:	801a      	strh	r2, [r3, #0]
			if (test_key_cntr > 3){
 8004e3c:	4b91      	ldr	r3, [pc, #580]	; (8005084 <Checking_inputs+0x29c>)
 8004e3e:	881b      	ldrh	r3, [r3, #0]
 8004e40:	2b03      	cmp	r3, #3
 8004e42:	d913      	bls.n	8004e6c <Checking_inputs+0x84>
				sprintf(sending_sms_str,"Key pressed \nBat: %d%%", Bat_val);
 8004e44:	4b90      	ldr	r3, [pc, #576]	; (8005088 <Checking_inputs+0x2a0>)
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	461a      	mov	r2, r3
 8004e4a:	4990      	ldr	r1, [pc, #576]	; (800508c <Checking_inputs+0x2a4>)
 8004e4c:	4890      	ldr	r0, [pc, #576]	; (8005090 <Checking_inputs+0x2a8>)
 8004e4e:	f001 fd67 	bl	8006920 <siprintf>
				sending_sms_cmd = 1;
 8004e52:	4b90      	ldr	r3, [pc, #576]	; (8005094 <Checking_inputs+0x2ac>)
 8004e54:	2201      	movs	r2, #1
 8004e56:	701a      	strb	r2, [r3, #0]
				calling_cmd = 1;
 8004e58:	4b8f      	ldr	r3, [pc, #572]	; (8005098 <Checking_inputs+0x2b0>)
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	701a      	strb	r2, [r3, #0]
				test_key_cntr = 0;
 8004e5e:	4b89      	ldr	r3, [pc, #548]	; (8005084 <Checking_inputs+0x29c>)
 8004e60:	2200      	movs	r2, #0
 8004e62:	801a      	strh	r2, [r3, #0]
 8004e64:	e002      	b.n	8004e6c <Checking_inputs+0x84>
			}
		}
		else{
			test_key_cntr = 0;
 8004e66:	4b87      	ldr	r3, [pc, #540]	; (8005084 <Checking_inputs+0x29c>)
 8004e68:	2200      	movs	r2, #0
 8004e6a:	801a      	strh	r2, [r3, #0]
		}
		//
		//if(((*InPwr_GPIO_Port).IDR & InPwr_Pin) == (uint32_t)GPIO_PIN_RESET)
		if((InPwr_GPIO_Port->IDR & InPwr_Pin) == (uint32_t)GPIO_PIN_RESET)
 8004e6c:	4b8b      	ldr	r3, [pc, #556]	; (800509c <Checking_inputs+0x2b4>)
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	f003 0308 	and.w	r3, r3, #8
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d123      	bne.n	8004ec0 <Checking_inputs+0xd8>
		{
			if (inPwr_enable == 1){
 8004e78:	4b89      	ldr	r3, [pc, #548]	; (80050a0 <Checking_inputs+0x2b8>)
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d125      	bne.n	8004ecc <Checking_inputs+0xe4>
				inPwr_damp_cntr++;
 8004e80:	4b88      	ldr	r3, [pc, #544]	; (80050a4 <Checking_inputs+0x2bc>)
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	3301      	adds	r3, #1
 8004e86:	b2da      	uxtb	r2, r3
 8004e88:	4b86      	ldr	r3, [pc, #536]	; (80050a4 <Checking_inputs+0x2bc>)
 8004e8a:	701a      	strb	r2, [r3, #0]
				if (inPwr_damp_cntr > 100){
 8004e8c:	4b85      	ldr	r3, [pc, #532]	; (80050a4 <Checking_inputs+0x2bc>)
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	2b64      	cmp	r3, #100	; 0x64
 8004e92:	d91b      	bls.n	8004ecc <Checking_inputs+0xe4>
					//if (Armed == 1){
						strcpy(sending_sms_str, "Power went off");
 8004e94:	4a7e      	ldr	r2, [pc, #504]	; (8005090 <Checking_inputs+0x2a8>)
 8004e96:	4b84      	ldr	r3, [pc, #528]	; (80050a8 <Checking_inputs+0x2c0>)
 8004e98:	4614      	mov	r4, r2
 8004e9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004e9c:	c407      	stmia	r4!, {r0, r1, r2}
 8004e9e:	8023      	strh	r3, [r4, #0]
 8004ea0:	3402      	adds	r4, #2
 8004ea2:	0c1b      	lsrs	r3, r3, #16
 8004ea4:	7023      	strb	r3, [r4, #0]
						sending_sms_cmd = 1;
 8004ea6:	4b7b      	ldr	r3, [pc, #492]	; (8005094 <Checking_inputs+0x2ac>)
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	701a      	strb	r2, [r3, #0]
						calling_cmd = 1;
 8004eac:	4b7a      	ldr	r3, [pc, #488]	; (8005098 <Checking_inputs+0x2b0>)
 8004eae:	2201      	movs	r2, #1
 8004eb0:	701a      	strb	r2, [r3, #0]
					//}
					inPwr_damp_cntr = 0;
 8004eb2:	4b7c      	ldr	r3, [pc, #496]	; (80050a4 <Checking_inputs+0x2bc>)
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	701a      	strb	r2, [r3, #0]
					inPwr_enable = 0;
 8004eb8:	4b79      	ldr	r3, [pc, #484]	; (80050a0 <Checking_inputs+0x2b8>)
 8004eba:	2200      	movs	r2, #0
 8004ebc:	701a      	strb	r2, [r3, #0]
 8004ebe:	e005      	b.n	8004ecc <Checking_inputs+0xe4>
				}
			}
		}
		else{
			inPwr_enable = 1;
 8004ec0:	4b77      	ldr	r3, [pc, #476]	; (80050a0 <Checking_inputs+0x2b8>)
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	701a      	strb	r2, [r3, #0]
			inPwr_damp_cntr = 0;
 8004ec6:	4b77      	ldr	r3, [pc, #476]	; (80050a4 <Checking_inputs+0x2bc>)
 8004ec8:	2200      	movs	r2, #0
 8004eca:	701a      	strb	r2, [r3, #0]
		}
		//
		if (HAL_GPIO_ReadPin(OnSw_GPIO_Port, OnSw_Pin) == GPIO_PIN_SET)
 8004ecc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004ed0:	4872      	ldr	r0, [pc, #456]	; (800509c <Checking_inputs+0x2b4>)
 8004ed2:	f7fb fc39 	bl	8000748 <HAL_GPIO_ReadPin>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d124      	bne.n	8004f26 <Checking_inputs+0x13e>
		//if((OnSw_GPIO_Port->IDR & OnSw_Pin) == (uint32_t)GPIO_PIN_SET)
		{
			if (OnSw_enable == 1){
 8004edc:	4b73      	ldr	r3, [pc, #460]	; (80050ac <Checking_inputs+0x2c4>)
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d126      	bne.n	8004f32 <Checking_inputs+0x14a>
				OnSw_damp_cntr++;
 8004ee4:	4b72      	ldr	r3, [pc, #456]	; (80050b0 <Checking_inputs+0x2c8>)
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	3301      	adds	r3, #1
 8004eea:	b2da      	uxtb	r2, r3
 8004eec:	4b70      	ldr	r3, [pc, #448]	; (80050b0 <Checking_inputs+0x2c8>)
 8004eee:	701a      	strb	r2, [r3, #0]
				if (OnSw_damp_cntr > 20){
 8004ef0:	4b6f      	ldr	r3, [pc, #444]	; (80050b0 <Checking_inputs+0x2c8>)
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	2b14      	cmp	r3, #20
 8004ef6:	d91c      	bls.n	8004f32 <Checking_inputs+0x14a>
					if (Armed == 1){
 8004ef8:	4b6e      	ldr	r3, [pc, #440]	; (80050b4 <Checking_inputs+0x2cc>)
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d10b      	bne.n	8004f18 <Checking_inputs+0x130>
						strcpy(sending_sms_str,"On-Switch ON");
 8004f00:	4a63      	ldr	r2, [pc, #396]	; (8005090 <Checking_inputs+0x2a8>)
 8004f02:	4b6d      	ldr	r3, [pc, #436]	; (80050b8 <Checking_inputs+0x2d0>)
 8004f04:	4614      	mov	r4, r2
 8004f06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004f08:	c407      	stmia	r4!, {r0, r1, r2}
 8004f0a:	7023      	strb	r3, [r4, #0]
						sending_sms_cmd = 1;
 8004f0c:	4b61      	ldr	r3, [pc, #388]	; (8005094 <Checking_inputs+0x2ac>)
 8004f0e:	2201      	movs	r2, #1
 8004f10:	701a      	strb	r2, [r3, #0]
						calling_cmd = 1;
 8004f12:	4b61      	ldr	r3, [pc, #388]	; (8005098 <Checking_inputs+0x2b0>)
 8004f14:	2201      	movs	r2, #1
 8004f16:	701a      	strb	r2, [r3, #0]
					}
					OnSw_damp_cntr = 0;
 8004f18:	4b65      	ldr	r3, [pc, #404]	; (80050b0 <Checking_inputs+0x2c8>)
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	701a      	strb	r2, [r3, #0]
					OnSw_enable = 0;
 8004f1e:	4b63      	ldr	r3, [pc, #396]	; (80050ac <Checking_inputs+0x2c4>)
 8004f20:	2200      	movs	r2, #0
 8004f22:	701a      	strb	r2, [r3, #0]
 8004f24:	e005      	b.n	8004f32 <Checking_inputs+0x14a>
				}
			}
		}
		else{
			OnSw_enable = 1;
 8004f26:	4b61      	ldr	r3, [pc, #388]	; (80050ac <Checking_inputs+0x2c4>)
 8004f28:	2201      	movs	r2, #1
 8004f2a:	701a      	strb	r2, [r3, #0]
			OnSw_damp_cntr = 0;
 8004f2c:	4b60      	ldr	r3, [pc, #384]	; (80050b0 <Checking_inputs+0x2c8>)
 8004f2e:	2200      	movs	r2, #0
 8004f30:	701a      	strb	r2, [r3, #0]
		}
		//
		//
		if (HAL_GPIO_ReadPin(OnSw_GPIO_Port, OnSw_Pin) == GPIO_PIN_RESET)
 8004f32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004f36:	4859      	ldr	r0, [pc, #356]	; (800509c <Checking_inputs+0x2b4>)
 8004f38:	f7fb fc06 	bl	8000748 <HAL_GPIO_ReadPin>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	f040 8083 	bne.w	800504a <Checking_inputs+0x262>
		{
			if (HAL_GPIO_ReadPin(PID_GPIO_Port, PID_Pin) == GPIO_PIN_SET){
 8004f44:	2104      	movs	r1, #4
 8004f46:	484b      	ldr	r0, [pc, #300]	; (8005074 <Checking_inputs+0x28c>)
 8004f48:	f7fb fbfe 	bl	8000748 <HAL_GPIO_ReadPin>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d132      	bne.n	8004fb8 <Checking_inputs+0x1d0>
				LED2_GPIO_Port -> BSRR = LED2_Pin;
 8004f52:	4b48      	ldr	r3, [pc, #288]	; (8005074 <Checking_inputs+0x28c>)
 8004f54:	2220      	movs	r2, #32
 8004f56:	611a      	str	r2, [r3, #16]
				if ((PID_enable == 1) && (PID_timeout == 0)){
 8004f58:	4b58      	ldr	r3, [pc, #352]	; (80050bc <Checking_inputs+0x2d4>)
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d134      	bne.n	8004fca <Checking_inputs+0x1e2>
 8004f60:	4b46      	ldr	r3, [pc, #280]	; (800507c <Checking_inputs+0x294>)
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d130      	bne.n	8004fca <Checking_inputs+0x1e2>
					PID_damp_cntr++;
 8004f68:	4b55      	ldr	r3, [pc, #340]	; (80050c0 <Checking_inputs+0x2d8>)
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	3301      	adds	r3, #1
 8004f6e:	b2da      	uxtb	r2, r3
 8004f70:	4b53      	ldr	r3, [pc, #332]	; (80050c0 <Checking_inputs+0x2d8>)
 8004f72:	701a      	strb	r2, [r3, #0]
					if (PID_damp_cntr > 5){
 8004f74:	4b52      	ldr	r3, [pc, #328]	; (80050c0 <Checking_inputs+0x2d8>)
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	2b05      	cmp	r3, #5
 8004f7a:	d926      	bls.n	8004fca <Checking_inputs+0x1e2>
						if (Armed == 1){
 8004f7c:	4b4d      	ldr	r3, [pc, #308]	; (80050b4 <Checking_inputs+0x2cc>)
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d10f      	bne.n	8004fa4 <Checking_inputs+0x1bc>
							strcpy(sending_sms_str,"Motion sensor triggered");
 8004f84:	4a42      	ldr	r2, [pc, #264]	; (8005090 <Checking_inputs+0x2a8>)
 8004f86:	4b4f      	ldr	r3, [pc, #316]	; (80050c4 <Checking_inputs+0x2dc>)
 8004f88:	4614      	mov	r4, r2
 8004f8a:	461d      	mov	r5, r3
 8004f8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004f90:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004f94:	e884 0003 	stmia.w	r4, {r0, r1}
							sending_sms_cmd = 1;
 8004f98:	4b3e      	ldr	r3, [pc, #248]	; (8005094 <Checking_inputs+0x2ac>)
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	701a      	strb	r2, [r3, #0]
							calling_cmd = 1;
 8004f9e:	4b3e      	ldr	r3, [pc, #248]	; (8005098 <Checking_inputs+0x2b0>)
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	701a      	strb	r2, [r3, #0]
						}

						PID_damp_cntr = 0;
 8004fa4:	4b46      	ldr	r3, [pc, #280]	; (80050c0 <Checking_inputs+0x2d8>)
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	701a      	strb	r2, [r3, #0]
						PID_timeout = 20;
 8004faa:	4b34      	ldr	r3, [pc, #208]	; (800507c <Checking_inputs+0x294>)
 8004fac:	2214      	movs	r2, #20
 8004fae:	701a      	strb	r2, [r3, #0]
						PID_enable = 0;
 8004fb0:	4b42      	ldr	r3, [pc, #264]	; (80050bc <Checking_inputs+0x2d4>)
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	701a      	strb	r2, [r3, #0]
 8004fb6:	e008      	b.n	8004fca <Checking_inputs+0x1e2>
					}
				}

			}
			else{
				LED2_GPIO_Port -> BRR = LED2_Pin;
 8004fb8:	4b2e      	ldr	r3, [pc, #184]	; (8005074 <Checking_inputs+0x28c>)
 8004fba:	2220      	movs	r2, #32
 8004fbc:	615a      	str	r2, [r3, #20]
				PID_enable = 1;
 8004fbe:	4b3f      	ldr	r3, [pc, #252]	; (80050bc <Checking_inputs+0x2d4>)
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	701a      	strb	r2, [r3, #0]
				PID_damp_cntr = 0;
 8004fc4:	4b3e      	ldr	r3, [pc, #248]	; (80050c0 <Checking_inputs+0x2d8>)
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	701a      	strb	r2, [r3, #0]
			}

			if((knock_GPIO_Port->IDR & knock_Pin) == (uint32_t)GPIO_PIN_RESET)
 8004fca:	4b2a      	ldr	r3, [pc, #168]	; (8005074 <Checking_inputs+0x28c>)
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	f003 0302 	and.w	r3, r3, #2
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d133      	bne.n	800503e <Checking_inputs+0x256>
			{
				if ((knock_enable == 1) && (knock_timeout == 0)){
 8004fd6:	4b3c      	ldr	r3, [pc, #240]	; (80050c8 <Checking_inputs+0x2e0>)
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d135      	bne.n	800504a <Checking_inputs+0x262>
 8004fde:	4b26      	ldr	r3, [pc, #152]	; (8005078 <Checking_inputs+0x290>)
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d131      	bne.n	800504a <Checking_inputs+0x262>
					knock_damp_cntr++;
 8004fe6:	4b39      	ldr	r3, [pc, #228]	; (80050cc <Checking_inputs+0x2e4>)
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	3301      	adds	r3, #1
 8004fec:	b2da      	uxtb	r2, r3
 8004fee:	4b37      	ldr	r3, [pc, #220]	; (80050cc <Checking_inputs+0x2e4>)
 8004ff0:	701a      	strb	r2, [r3, #0]
					if (knock_damp_cntr > 5){
 8004ff2:	4b36      	ldr	r3, [pc, #216]	; (80050cc <Checking_inputs+0x2e4>)
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	2b05      	cmp	r3, #5
 8004ff8:	d927      	bls.n	800504a <Checking_inputs+0x262>
						if (Armed == 1){
 8004ffa:	4b2e      	ldr	r3, [pc, #184]	; (80050b4 <Checking_inputs+0x2cc>)
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d113      	bne.n	800502a <Checking_inputs+0x242>
							strcpy(sending_sms_str,"knock sensor triggered");
 8005002:	4a23      	ldr	r2, [pc, #140]	; (8005090 <Checking_inputs+0x2a8>)
 8005004:	4b32      	ldr	r3, [pc, #200]	; (80050d0 <Checking_inputs+0x2e8>)
 8005006:	4614      	mov	r4, r2
 8005008:	461d      	mov	r5, r3
 800500a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800500c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800500e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005012:	6020      	str	r0, [r4, #0]
 8005014:	3404      	adds	r4, #4
 8005016:	8021      	strh	r1, [r4, #0]
 8005018:	3402      	adds	r4, #2
 800501a:	0c0b      	lsrs	r3, r1, #16
 800501c:	7023      	strb	r3, [r4, #0]
							sending_sms_cmd = 1;
 800501e:	4b1d      	ldr	r3, [pc, #116]	; (8005094 <Checking_inputs+0x2ac>)
 8005020:	2201      	movs	r2, #1
 8005022:	701a      	strb	r2, [r3, #0]
							calling_cmd = 1;
 8005024:	4b1c      	ldr	r3, [pc, #112]	; (8005098 <Checking_inputs+0x2b0>)
 8005026:	2201      	movs	r2, #1
 8005028:	701a      	strb	r2, [r3, #0]
						}

						knock_damp_cntr = 0;
 800502a:	4b28      	ldr	r3, [pc, #160]	; (80050cc <Checking_inputs+0x2e4>)
 800502c:	2200      	movs	r2, #0
 800502e:	701a      	strb	r2, [r3, #0]
						knock_timeout = 50;
 8005030:	4b11      	ldr	r3, [pc, #68]	; (8005078 <Checking_inputs+0x290>)
 8005032:	2232      	movs	r2, #50	; 0x32
 8005034:	701a      	strb	r2, [r3, #0]
						knock_enable = 0;
 8005036:	4b24      	ldr	r3, [pc, #144]	; (80050c8 <Checking_inputs+0x2e0>)
 8005038:	2200      	movs	r2, #0
 800503a:	701a      	strb	r2, [r3, #0]
 800503c:	e005      	b.n	800504a <Checking_inputs+0x262>
					}
				}
			}
			else{
				knock_enable = 1;
 800503e:	4b22      	ldr	r3, [pc, #136]	; (80050c8 <Checking_inputs+0x2e0>)
 8005040:	2201      	movs	r2, #1
 8005042:	701a      	strb	r2, [r3, #0]
				knock_damp_cntr = 0;
 8005044:	4b21      	ldr	r3, [pc, #132]	; (80050cc <Checking_inputs+0x2e4>)
 8005046:	2200      	movs	r2, #0
 8005048:	701a      	strb	r2, [r3, #0]
			}
		}
		//

		HAL_Delay(50);
 800504a:	2032      	movs	r0, #50	; 0x32
 800504c:	f7fb f8f2 	bl	8000234 <HAL_Delay>
	for (k = 0; k < 30; k++){
 8005050:	4b0b      	ldr	r3, [pc, #44]	; (8005080 <Checking_inputs+0x298>)
 8005052:	881b      	ldrh	r3, [r3, #0]
 8005054:	3301      	adds	r3, #1
 8005056:	b29a      	uxth	r2, r3
 8005058:	4b09      	ldr	r3, [pc, #36]	; (8005080 <Checking_inputs+0x298>)
 800505a:	801a      	strh	r2, [r3, #0]
 800505c:	4b08      	ldr	r3, [pc, #32]	; (8005080 <Checking_inputs+0x298>)
 800505e:	881b      	ldrh	r3, [r3, #0]
 8005060:	2b1d      	cmp	r3, #29
 8005062:	f67f aedf 	bls.w	8004e24 <Checking_inputs+0x3c>
	}
	//return ret_value;
	LED1_GPIO_Port -> BRR = LED1_Pin;
 8005066:	4b03      	ldr	r3, [pc, #12]	; (8005074 <Checking_inputs+0x28c>)
 8005068:	f44f 7280 	mov.w	r2, #256	; 0x100
 800506c:	615a      	str	r2, [r3, #20]
}
 800506e:	bf00      	nop
 8005070:	bdb0      	pop	{r4, r5, r7, pc}
 8005072:	bf00      	nop
 8005074:	40010c00 	.word	0x40010c00
 8005078:	20000607 	.word	0x20000607
 800507c:	2000060a 	.word	0x2000060a
 8005080:	20000380 	.word	0x20000380
 8005084:	20000600 	.word	0x20000600
 8005088:	200005fa 	.word	0x200005fa
 800508c:	08007368 	.word	0x08007368
 8005090:	2000059c 	.word	0x2000059c
 8005094:	200005fd 	.word	0x200005fd
 8005098:	200005fe 	.word	0x200005fe
 800509c:	40010800 	.word	0x40010800
 80050a0:	20000602 	.word	0x20000602
 80050a4:	20000603 	.word	0x20000603
 80050a8:	08007380 	.word	0x08007380
 80050ac:	20000604 	.word	0x20000604
 80050b0:	20000605 	.word	0x20000605
 80050b4:	200005f2 	.word	0x200005f2
 80050b8:	08007390 	.word	0x08007390
 80050bc:	20000609 	.word	0x20000609
 80050c0:	2000060b 	.word	0x2000060b
 80050c4:	080073a0 	.word	0x080073a0
 80050c8:	20000606 	.word	0x20000606
 80050cc:	20000608 	.word	0x20000608
 80050d0:	080073b8 	.word	0x080073b8

080050d4 <sending_sms_func>:
//
void	sending_sms_func(void){
 80050d4:	b5b0      	push	{r4, r5, r7, lr}
 80050d6:	af00      	add	r7, sp, #0
	LED2_GPIO_Port -> BSRR = LED2_Pin;
 80050d8:	4b27      	ldr	r3, [pc, #156]	; (8005178 <sending_sms_func+0xa4>)
 80050da:	2220      	movs	r2, #32
 80050dc:	611a      	str	r2, [r3, #16]
	send_str[0] = '\0';
 80050de:	4b27      	ldr	r3, [pc, #156]	; (800517c <sending_sms_func+0xa8>)
 80050e0:	2200      	movs	r2, #0
 80050e2:	701a      	strb	r2, [r3, #0]
	sprintf(send_str,"AT+CSMP=17,167,0,0\r");
 80050e4:	4a25      	ldr	r2, [pc, #148]	; (800517c <sending_sms_func+0xa8>)
 80050e6:	4b26      	ldr	r3, [pc, #152]	; (8005180 <sending_sms_func+0xac>)
 80050e8:	4614      	mov	r4, r2
 80050ea:	461d      	mov	r5, r3
 80050ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80050ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80050f0:	682b      	ldr	r3, [r5, #0]
 80050f2:	6023      	str	r3, [r4, #0]
	HAL_UART_Transmit(&huart3,(unsigned char *)send_str,strlen(send_str),1000);
 80050f4:	4821      	ldr	r0, [pc, #132]	; (800517c <sending_sms_func+0xa8>)
 80050f6:	f7fb f833 	bl	8000160 <strlen>
 80050fa:	4603      	mov	r3, r0
 80050fc:	b29a      	uxth	r2, r3
 80050fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005102:	491e      	ldr	r1, [pc, #120]	; (800517c <sending_sms_func+0xa8>)
 8005104:	481f      	ldr	r0, [pc, #124]	; (8005184 <sending_sms_func+0xb0>)
 8005106:	f7fc ff3c 	bl	8001f82 <HAL_UART_Transmit>
	HAL_Delay(300);
 800510a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800510e:	f7fb f891 	bl	8000234 <HAL_Delay>
	send_str[0] = '\0';
 8005112:	4b1a      	ldr	r3, [pc, #104]	; (800517c <sending_sms_func+0xa8>)
 8005114:	2200      	movs	r2, #0
 8005116:	701a      	strb	r2, [r3, #0]
	sprintf(send_str,"AT+CMGS=\"+98%s\"\r",Num_str);
 8005118:	4a1b      	ldr	r2, [pc, #108]	; (8005188 <sending_sms_func+0xb4>)
 800511a:	491c      	ldr	r1, [pc, #112]	; (800518c <sending_sms_func+0xb8>)
 800511c:	4817      	ldr	r0, [pc, #92]	; (800517c <sending_sms_func+0xa8>)
 800511e:	f001 fbff 	bl	8006920 <siprintf>
	HAL_UART_Transmit(&huart3,(unsigned char *)send_str,strlen(send_str),1000);
 8005122:	4816      	ldr	r0, [pc, #88]	; (800517c <sending_sms_func+0xa8>)
 8005124:	f7fb f81c 	bl	8000160 <strlen>
 8005128:	4603      	mov	r3, r0
 800512a:	b29a      	uxth	r2, r3
 800512c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005130:	4912      	ldr	r1, [pc, #72]	; (800517c <sending_sms_func+0xa8>)
 8005132:	4814      	ldr	r0, [pc, #80]	; (8005184 <sending_sms_func+0xb0>)
 8005134:	f7fc ff25 	bl	8001f82 <HAL_UART_Transmit>
	HAL_Delay(300);
 8005138:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800513c:	f7fb f87a 	bl	8000234 <HAL_Delay>
	HAL_UART_Transmit(&huart3,(unsigned char *)sending_sms_str,strlen(sending_sms_str),1000);
 8005140:	4813      	ldr	r0, [pc, #76]	; (8005190 <sending_sms_func+0xbc>)
 8005142:	f7fb f80d 	bl	8000160 <strlen>
 8005146:	4603      	mov	r3, r0
 8005148:	b29a      	uxth	r2, r3
 800514a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800514e:	4910      	ldr	r1, [pc, #64]	; (8005190 <sending_sms_func+0xbc>)
 8005150:	480c      	ldr	r0, [pc, #48]	; (8005184 <sending_sms_func+0xb0>)
 8005152:	f7fc ff16 	bl	8001f82 <HAL_UART_Transmit>
	SUB
 8005156:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800515a:	2201      	movs	r2, #1
 800515c:	490d      	ldr	r1, [pc, #52]	; (8005194 <sending_sms_func+0xc0>)
 800515e:	4809      	ldr	r0, [pc, #36]	; (8005184 <sending_sms_func+0xb0>)
 8005160:	f7fc ff0f 	bl	8001f82 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8005164:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005168:	f7fb f864 	bl	8000234 <HAL_Delay>
	LED2_GPIO_Port -> BRR = LED2_Pin;
 800516c:	4b02      	ldr	r3, [pc, #8]	; (8005178 <sending_sms_func+0xa4>)
 800516e:	2220      	movs	r2, #32
 8005170:	615a      	str	r2, [r3, #20]
}
 8005172:	bf00      	nop
 8005174:	bdb0      	pop	{r4, r5, r7, pc}
 8005176:	bf00      	nop
 8005178:	40010c00 	.word	0x40010c00
 800517c:	200003c8 	.word	0x200003c8
 8005180:	080073d0 	.word	0x080073d0
 8005184:	20000678 	.word	0x20000678
 8005188:	200000fc 	.word	0x200000fc
 800518c:	080073e4 	.word	0x080073e4
 8005190:	2000059c 	.word	0x2000059c
 8005194:	200000f4 	.word	0x200000f4

08005198 <calling_func>:
//
void	calling_func(void){
 8005198:	b580      	push	{r7, lr}
 800519a:	af00      	add	r7, sp, #0
	HAL_Delay(5000);
 800519c:	f241 3088 	movw	r0, #5000	; 0x1388
 80051a0:	f7fb f848 	bl	8000234 <HAL_Delay>
	send_str[0] = '\0';
 80051a4:	4b18      	ldr	r3, [pc, #96]	; (8005208 <calling_func+0x70>)
 80051a6:	2200      	movs	r2, #0
 80051a8:	701a      	strb	r2, [r3, #0]
	sprintf(send_str,"ATD+98%s;\r",Num_str);
 80051aa:	4a18      	ldr	r2, [pc, #96]	; (800520c <calling_func+0x74>)
 80051ac:	4918      	ldr	r1, [pc, #96]	; (8005210 <calling_func+0x78>)
 80051ae:	4816      	ldr	r0, [pc, #88]	; (8005208 <calling_func+0x70>)
 80051b0:	f001 fbb6 	bl	8006920 <siprintf>
	HAL_UART_Transmit(&huart3,(unsigned char*)send_str,strlen(send_str),1000);
 80051b4:	4814      	ldr	r0, [pc, #80]	; (8005208 <calling_func+0x70>)
 80051b6:	f7fa ffd3 	bl	8000160 <strlen>
 80051ba:	4603      	mov	r3, r0
 80051bc:	b29a      	uxth	r2, r3
 80051be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80051c2:	4911      	ldr	r1, [pc, #68]	; (8005208 <calling_func+0x70>)
 80051c4:	4813      	ldr	r0, [pc, #76]	; (8005214 <calling_func+0x7c>)
 80051c6:	f7fc fedc 	bl	8001f82 <HAL_UART_Transmit>

	HAL_Delay(35000);
 80051ca:	f648 00b8 	movw	r0, #35000	; 0x88b8
 80051ce:	f7fb f831 	bl	8000234 <HAL_Delay>
	send_str[0] = '\0';
 80051d2:	4b0d      	ldr	r3, [pc, #52]	; (8005208 <calling_func+0x70>)
 80051d4:	2200      	movs	r2, #0
 80051d6:	701a      	strb	r2, [r3, #0]
	sprintf(send_str,"ATH\r");
 80051d8:	4b0b      	ldr	r3, [pc, #44]	; (8005208 <calling_func+0x70>)
 80051da:	4a0f      	ldr	r2, [pc, #60]	; (8005218 <calling_func+0x80>)
 80051dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80051e0:	6018      	str	r0, [r3, #0]
 80051e2:	3304      	adds	r3, #4
 80051e4:	7019      	strb	r1, [r3, #0]
	HAL_UART_Transmit(&huart3,(unsigned char*)send_str,strlen(send_str),1000);
 80051e6:	4808      	ldr	r0, [pc, #32]	; (8005208 <calling_func+0x70>)
 80051e8:	f7fa ffba 	bl	8000160 <strlen>
 80051ec:	4603      	mov	r3, r0
 80051ee:	b29a      	uxth	r2, r3
 80051f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80051f4:	4904      	ldr	r1, [pc, #16]	; (8005208 <calling_func+0x70>)
 80051f6:	4807      	ldr	r0, [pc, #28]	; (8005214 <calling_func+0x7c>)
 80051f8:	f7fc fec3 	bl	8001f82 <HAL_UART_Transmit>
	HAL_Delay(1000);
 80051fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005200:	f7fb f818 	bl	8000234 <HAL_Delay>
}
 8005204:	bf00      	nop
 8005206:	bd80      	pop	{r7, pc}
 8005208:	200003c8 	.word	0x200003c8
 800520c:	200000fc 	.word	0x200000fc
 8005210:	080073f8 	.word	0x080073f8
 8005214:	20000678 	.word	0x20000678
 8005218:	08007404 	.word	0x08007404

0800521c <check_for_incoming_sms>:
//
void	check_for_incoming_sms(void){
 800521c:	b598      	push	{r3, r4, r7, lr}
 800521e:	af00      	add	r7, sp, #0
	send_str[0] = '\0';
 8005220:	4b71      	ldr	r3, [pc, #452]	; (80053e8 <check_for_incoming_sms+0x1cc>)
 8005222:	2200      	movs	r2, #0
 8005224:	701a      	strb	r2, [r3, #0]
	for (k = 0; k < 128; k++)
 8005226:	4b71      	ldr	r3, [pc, #452]	; (80053ec <check_for_incoming_sms+0x1d0>)
 8005228:	2200      	movs	r2, #0
 800522a:	801a      	strh	r2, [r3, #0]
 800522c:	e00b      	b.n	8005246 <check_for_incoming_sms+0x2a>
	{recv_str[k] = '\0';}
 800522e:	4b6f      	ldr	r3, [pc, #444]	; (80053ec <check_for_incoming_sms+0x1d0>)
 8005230:	881b      	ldrh	r3, [r3, #0]
 8005232:	461a      	mov	r2, r3
 8005234:	4b6e      	ldr	r3, [pc, #440]	; (80053f0 <check_for_incoming_sms+0x1d4>)
 8005236:	2100      	movs	r1, #0
 8005238:	5499      	strb	r1, [r3, r2]
	for (k = 0; k < 128; k++)
 800523a:	4b6c      	ldr	r3, [pc, #432]	; (80053ec <check_for_incoming_sms+0x1d0>)
 800523c:	881b      	ldrh	r3, [r3, #0]
 800523e:	3301      	adds	r3, #1
 8005240:	b29a      	uxth	r2, r3
 8005242:	4b6a      	ldr	r3, [pc, #424]	; (80053ec <check_for_incoming_sms+0x1d0>)
 8005244:	801a      	strh	r2, [r3, #0]
 8005246:	4b69      	ldr	r3, [pc, #420]	; (80053ec <check_for_incoming_sms+0x1d0>)
 8005248:	881b      	ldrh	r3, [r3, #0]
 800524a:	2b7f      	cmp	r3, #127	; 0x7f
 800524c:	d9ef      	bls.n	800522e <check_for_incoming_sms+0x12>
	sprintf(send_str,"AT+CMGR=1\r");
 800524e:	4b66      	ldr	r3, [pc, #408]	; (80053e8 <check_for_incoming_sms+0x1cc>)
 8005250:	4a68      	ldr	r2, [pc, #416]	; (80053f4 <check_for_incoming_sms+0x1d8>)
 8005252:	ca07      	ldmia	r2, {r0, r1, r2}
 8005254:	c303      	stmia	r3!, {r0, r1}
 8005256:	801a      	strh	r2, [r3, #0]
 8005258:	3302      	adds	r3, #2
 800525a:	0c12      	lsrs	r2, r2, #16
 800525c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart3,(unsigned char *)send_str,strlen(send_str),1000);
 800525e:	4862      	ldr	r0, [pc, #392]	; (80053e8 <check_for_incoming_sms+0x1cc>)
 8005260:	f7fa ff7e 	bl	8000160 <strlen>
 8005264:	4603      	mov	r3, r0
 8005266:	b29a      	uxth	r2, r3
 8005268:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800526c:	495e      	ldr	r1, [pc, #376]	; (80053e8 <check_for_incoming_sms+0x1cc>)
 800526e:	4862      	ldr	r0, [pc, #392]	; (80053f8 <check_for_incoming_sms+0x1dc>)
 8005270:	f7fc fe87 	bl	8001f82 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart3,(unsigned char *)recv_str, 128, 100);
 8005274:	2364      	movs	r3, #100	; 0x64
 8005276:	2280      	movs	r2, #128	; 0x80
 8005278:	495d      	ldr	r1, [pc, #372]	; (80053f0 <check_for_incoming_sms+0x1d4>)
 800527a:	485f      	ldr	r0, [pc, #380]	; (80053f8 <check_for_incoming_sms+0x1dc>)
 800527c:	f7fc ff1a 	bl	80020b4 <HAL_UART_Receive>
	NewSMS = 0;
 8005280:	4b5e      	ldr	r3, [pc, #376]	; (80053fc <check_for_incoming_sms+0x1e0>)
 8005282:	2200      	movs	r2, #0
 8005284:	701a      	strb	r2, [r3, #0]
	New_status = 0;
 8005286:	4b5e      	ldr	r3, [pc, #376]	; (8005400 <check_for_incoming_sms+0x1e4>)
 8005288:	2200      	movs	r2, #0
 800528a:	701a      	strb	r2, [r3, #0]
	unread_str[0] = '\0';
 800528c:	4b5d      	ldr	r3, [pc, #372]	; (8005404 <check_for_incoming_sms+0x1e8>)
 800528e:	2200      	movs	r2, #0
 8005290:	701a      	strb	r2, [r3, #0]
	read_str[0] = '\0';
 8005292:	4b5d      	ldr	r3, [pc, #372]	; (8005408 <check_for_incoming_sms+0x1ec>)
 8005294:	2200      	movs	r2, #0
 8005296:	701a      	strb	r2, [r3, #0]
	cmd_str[0] = '\0';
 8005298:	4b5c      	ldr	r3, [pc, #368]	; (800540c <check_for_incoming_sms+0x1f0>)
 800529a:	2200      	movs	r2, #0
 800529c:	701a      	strb	r2, [r3, #0]
	for (k = 0; k < 30; k++){
 800529e:	4b53      	ldr	r3, [pc, #332]	; (80053ec <check_for_incoming_sms+0x1d0>)
 80052a0:	2200      	movs	r2, #0
 80052a2:	801a      	strh	r2, [r3, #0]
 80052a4:	e04b      	b.n	800533e <check_for_incoming_sms+0x122>
		unread_str[0] = recv_str[k];
 80052a6:	4b51      	ldr	r3, [pc, #324]	; (80053ec <check_for_incoming_sms+0x1d0>)
 80052a8:	881b      	ldrh	r3, [r3, #0]
 80052aa:	461a      	mov	r2, r3
 80052ac:	4b50      	ldr	r3, [pc, #320]	; (80053f0 <check_for_incoming_sms+0x1d4>)
 80052ae:	5c9a      	ldrb	r2, [r3, r2]
 80052b0:	4b54      	ldr	r3, [pc, #336]	; (8005404 <check_for_incoming_sms+0x1e8>)
 80052b2:	701a      	strb	r2, [r3, #0]
		unread_str[1] = recv_str[k+1];
 80052b4:	4b4d      	ldr	r3, [pc, #308]	; (80053ec <check_for_incoming_sms+0x1d0>)
 80052b6:	881b      	ldrh	r3, [r3, #0]
 80052b8:	3301      	adds	r3, #1
 80052ba:	4a4d      	ldr	r2, [pc, #308]	; (80053f0 <check_for_incoming_sms+0x1d4>)
 80052bc:	5cd2      	ldrb	r2, [r2, r3]
 80052be:	4b51      	ldr	r3, [pc, #324]	; (8005404 <check_for_incoming_sms+0x1e8>)
 80052c0:	705a      	strb	r2, [r3, #1]
		unread_str[2] = recv_str[k+2];
 80052c2:	4b4a      	ldr	r3, [pc, #296]	; (80053ec <check_for_incoming_sms+0x1d0>)
 80052c4:	881b      	ldrh	r3, [r3, #0]
 80052c6:	3302      	adds	r3, #2
 80052c8:	4a49      	ldr	r2, [pc, #292]	; (80053f0 <check_for_incoming_sms+0x1d4>)
 80052ca:	5cd2      	ldrb	r2, [r2, r3]
 80052cc:	4b4d      	ldr	r3, [pc, #308]	; (8005404 <check_for_incoming_sms+0x1e8>)
 80052ce:	709a      	strb	r2, [r3, #2]
		unread_str[3] = recv_str[k+3];
 80052d0:	4b46      	ldr	r3, [pc, #280]	; (80053ec <check_for_incoming_sms+0x1d0>)
 80052d2:	881b      	ldrh	r3, [r3, #0]
 80052d4:	3303      	adds	r3, #3
 80052d6:	4a46      	ldr	r2, [pc, #280]	; (80053f0 <check_for_incoming_sms+0x1d4>)
 80052d8:	5cd2      	ldrb	r2, [r2, r3]
 80052da:	4b4a      	ldr	r3, [pc, #296]	; (8005404 <check_for_incoming_sms+0x1e8>)
 80052dc:	70da      	strb	r2, [r3, #3]
		unread_str[4] = recv_str[k+4];
 80052de:	4b43      	ldr	r3, [pc, #268]	; (80053ec <check_for_incoming_sms+0x1d0>)
 80052e0:	881b      	ldrh	r3, [r3, #0]
 80052e2:	3304      	adds	r3, #4
 80052e4:	4a42      	ldr	r2, [pc, #264]	; (80053f0 <check_for_incoming_sms+0x1d4>)
 80052e6:	5cd2      	ldrb	r2, [r2, r3]
 80052e8:	4b46      	ldr	r3, [pc, #280]	; (8005404 <check_for_incoming_sms+0x1e8>)
 80052ea:	711a      	strb	r2, [r3, #4]
		unread_str[5] = recv_str[k+5];
 80052ec:	4b3f      	ldr	r3, [pc, #252]	; (80053ec <check_for_incoming_sms+0x1d0>)
 80052ee:	881b      	ldrh	r3, [r3, #0]
 80052f0:	3305      	adds	r3, #5
 80052f2:	4a3f      	ldr	r2, [pc, #252]	; (80053f0 <check_for_incoming_sms+0x1d4>)
 80052f4:	5cd2      	ldrb	r2, [r2, r3]
 80052f6:	4b43      	ldr	r3, [pc, #268]	; (8005404 <check_for_incoming_sms+0x1e8>)
 80052f8:	715a      	strb	r2, [r3, #5]
		if ((unread_str[0] == 'U') && (unread_str[1] == 'N') && (unread_str[2] == 'R') && (unread_str[3] == 'E') && (unread_str[4] == 'A') && (unread_str[5] == 'D')){
 80052fa:	4b42      	ldr	r3, [pc, #264]	; (8005404 <check_for_incoming_sms+0x1e8>)
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	2b55      	cmp	r3, #85	; 0x55
 8005300:	d117      	bne.n	8005332 <check_for_incoming_sms+0x116>
 8005302:	4b40      	ldr	r3, [pc, #256]	; (8005404 <check_for_incoming_sms+0x1e8>)
 8005304:	785b      	ldrb	r3, [r3, #1]
 8005306:	2b4e      	cmp	r3, #78	; 0x4e
 8005308:	d113      	bne.n	8005332 <check_for_incoming_sms+0x116>
 800530a:	4b3e      	ldr	r3, [pc, #248]	; (8005404 <check_for_incoming_sms+0x1e8>)
 800530c:	789b      	ldrb	r3, [r3, #2]
 800530e:	2b52      	cmp	r3, #82	; 0x52
 8005310:	d10f      	bne.n	8005332 <check_for_incoming_sms+0x116>
 8005312:	4b3c      	ldr	r3, [pc, #240]	; (8005404 <check_for_incoming_sms+0x1e8>)
 8005314:	78db      	ldrb	r3, [r3, #3]
 8005316:	2b45      	cmp	r3, #69	; 0x45
 8005318:	d10b      	bne.n	8005332 <check_for_incoming_sms+0x116>
 800531a:	4b3a      	ldr	r3, [pc, #232]	; (8005404 <check_for_incoming_sms+0x1e8>)
 800531c:	791b      	ldrb	r3, [r3, #4]
 800531e:	2b41      	cmp	r3, #65	; 0x41
 8005320:	d107      	bne.n	8005332 <check_for_incoming_sms+0x116>
 8005322:	4b38      	ldr	r3, [pc, #224]	; (8005404 <check_for_incoming_sms+0x1e8>)
 8005324:	795b      	ldrb	r3, [r3, #5]
 8005326:	2b44      	cmp	r3, #68	; 0x44
 8005328:	d103      	bne.n	8005332 <check_for_incoming_sms+0x116>
			NewSMS = 1;
 800532a:	4b34      	ldr	r3, [pc, #208]	; (80053fc <check_for_incoming_sms+0x1e0>)
 800532c:	2201      	movs	r2, #1
 800532e:	701a      	strb	r2, [r3, #0]
			break;
 8005330:	e009      	b.n	8005346 <check_for_incoming_sms+0x12a>
	for (k = 0; k < 30; k++){
 8005332:	4b2e      	ldr	r3, [pc, #184]	; (80053ec <check_for_incoming_sms+0x1d0>)
 8005334:	881b      	ldrh	r3, [r3, #0]
 8005336:	3301      	adds	r3, #1
 8005338:	b29a      	uxth	r2, r3
 800533a:	4b2c      	ldr	r3, [pc, #176]	; (80053ec <check_for_incoming_sms+0x1d0>)
 800533c:	801a      	strh	r2, [r3, #0]
 800533e:	4b2b      	ldr	r3, [pc, #172]	; (80053ec <check_for_incoming_sms+0x1d0>)
 8005340:	881b      	ldrh	r3, [r3, #0]
 8005342:	2b1d      	cmp	r3, #29
 8005344:	d9af      	bls.n	80052a6 <check_for_incoming_sms+0x8a>
		}
	}
	if (NewSMS == 0){
 8005346:	4b2d      	ldr	r3, [pc, #180]	; (80053fc <check_for_incoming_sms+0x1e0>)
 8005348:	781b      	ldrb	r3, [r3, #0]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d13d      	bne.n	80053ca <check_for_incoming_sms+0x1ae>
		for (k = 0; k < 30; k++){
 800534e:	4b27      	ldr	r3, [pc, #156]	; (80053ec <check_for_incoming_sms+0x1d0>)
 8005350:	2200      	movs	r2, #0
 8005352:	801a      	strh	r2, [r3, #0]
 8005354:	e035      	b.n	80053c2 <check_for_incoming_sms+0x1a6>
			read_str[0] = recv_str[k];
 8005356:	4b25      	ldr	r3, [pc, #148]	; (80053ec <check_for_incoming_sms+0x1d0>)
 8005358:	881b      	ldrh	r3, [r3, #0]
 800535a:	461a      	mov	r2, r3
 800535c:	4b24      	ldr	r3, [pc, #144]	; (80053f0 <check_for_incoming_sms+0x1d4>)
 800535e:	5c9a      	ldrb	r2, [r3, r2]
 8005360:	4b29      	ldr	r3, [pc, #164]	; (8005408 <check_for_incoming_sms+0x1ec>)
 8005362:	701a      	strb	r2, [r3, #0]
			read_str[1] = recv_str[k+1];
 8005364:	4b21      	ldr	r3, [pc, #132]	; (80053ec <check_for_incoming_sms+0x1d0>)
 8005366:	881b      	ldrh	r3, [r3, #0]
 8005368:	3301      	adds	r3, #1
 800536a:	4a21      	ldr	r2, [pc, #132]	; (80053f0 <check_for_incoming_sms+0x1d4>)
 800536c:	5cd2      	ldrb	r2, [r2, r3]
 800536e:	4b26      	ldr	r3, [pc, #152]	; (8005408 <check_for_incoming_sms+0x1ec>)
 8005370:	705a      	strb	r2, [r3, #1]
			read_str[2] = recv_str[k+2];
 8005372:	4b1e      	ldr	r3, [pc, #120]	; (80053ec <check_for_incoming_sms+0x1d0>)
 8005374:	881b      	ldrh	r3, [r3, #0]
 8005376:	3302      	adds	r3, #2
 8005378:	4a1d      	ldr	r2, [pc, #116]	; (80053f0 <check_for_incoming_sms+0x1d4>)
 800537a:	5cd2      	ldrb	r2, [r2, r3]
 800537c:	4b22      	ldr	r3, [pc, #136]	; (8005408 <check_for_incoming_sms+0x1ec>)
 800537e:	709a      	strb	r2, [r3, #2]
			read_str[3] = recv_str[k+3];
 8005380:	4b1a      	ldr	r3, [pc, #104]	; (80053ec <check_for_incoming_sms+0x1d0>)
 8005382:	881b      	ldrh	r3, [r3, #0]
 8005384:	3303      	adds	r3, #3
 8005386:	4a1a      	ldr	r2, [pc, #104]	; (80053f0 <check_for_incoming_sms+0x1d4>)
 8005388:	5cd2      	ldrb	r2, [r2, r3]
 800538a:	4b1f      	ldr	r3, [pc, #124]	; (8005408 <check_for_incoming_sms+0x1ec>)
 800538c:	70da      	strb	r2, [r3, #3]
			if ((read_str[0] == 'R') && (read_str[1] == 'E') && (read_str[2] == 'A') && (read_str[3] == 'D')){
 800538e:	4b1e      	ldr	r3, [pc, #120]	; (8005408 <check_for_incoming_sms+0x1ec>)
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	2b52      	cmp	r3, #82	; 0x52
 8005394:	d10f      	bne.n	80053b6 <check_for_incoming_sms+0x19a>
 8005396:	4b1c      	ldr	r3, [pc, #112]	; (8005408 <check_for_incoming_sms+0x1ec>)
 8005398:	785b      	ldrb	r3, [r3, #1]
 800539a:	2b45      	cmp	r3, #69	; 0x45
 800539c:	d10b      	bne.n	80053b6 <check_for_incoming_sms+0x19a>
 800539e:	4b1a      	ldr	r3, [pc, #104]	; (8005408 <check_for_incoming_sms+0x1ec>)
 80053a0:	789b      	ldrb	r3, [r3, #2]
 80053a2:	2b41      	cmp	r3, #65	; 0x41
 80053a4:	d107      	bne.n	80053b6 <check_for_incoming_sms+0x19a>
 80053a6:	4b18      	ldr	r3, [pc, #96]	; (8005408 <check_for_incoming_sms+0x1ec>)
 80053a8:	78db      	ldrb	r3, [r3, #3]
 80053aa:	2b44      	cmp	r3, #68	; 0x44
 80053ac:	d103      	bne.n	80053b6 <check_for_incoming_sms+0x19a>
					Del_flag = 1;
 80053ae:	4b18      	ldr	r3, [pc, #96]	; (8005410 <check_for_incoming_sms+0x1f4>)
 80053b0:	2201      	movs	r2, #1
 80053b2:	701a      	strb	r2, [r3, #0]
				break;
 80053b4:	e009      	b.n	80053ca <check_for_incoming_sms+0x1ae>
		for (k = 0; k < 30; k++){
 80053b6:	4b0d      	ldr	r3, [pc, #52]	; (80053ec <check_for_incoming_sms+0x1d0>)
 80053b8:	881b      	ldrh	r3, [r3, #0]
 80053ba:	3301      	adds	r3, #1
 80053bc:	b29a      	uxth	r2, r3
 80053be:	4b0b      	ldr	r3, [pc, #44]	; (80053ec <check_for_incoming_sms+0x1d0>)
 80053c0:	801a      	strh	r2, [r3, #0]
 80053c2:	4b0a      	ldr	r3, [pc, #40]	; (80053ec <check_for_incoming_sms+0x1d0>)
 80053c4:	881b      	ldrh	r3, [r3, #0]
 80053c6:	2b1d      	cmp	r3, #29
 80053c8:	d9c5      	bls.n	8005356 <check_for_incoming_sms+0x13a>
			}
		}
	}
//
	if (NewSMS == 1){
 80053ca:	4b0c      	ldr	r3, [pc, #48]	; (80053fc <check_for_incoming_sms+0x1e0>)
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	f040 8104 	bne.w	80055dc <check_for_incoming_sms+0x3c0>
		Del_flag = 1;
 80053d4:	4b0e      	ldr	r3, [pc, #56]	; (8005410 <check_for_incoming_sms+0x1f4>)
 80053d6:	2201      	movs	r2, #1
 80053d8:	701a      	strb	r2, [r3, #0]
		Number_verified = 0;
 80053da:	4b0e      	ldr	r3, [pc, #56]	; (8005414 <check_for_incoming_sms+0x1f8>)
 80053dc:	2200      	movs	r2, #0
 80053de:	701a      	strb	r2, [r3, #0]
		for (k = 0; k < 30; k++){
 80053e0:	4b02      	ldr	r3, [pc, #8]	; (80053ec <check_for_incoming_sms+0x1d0>)
 80053e2:	2200      	movs	r2, #0
 80053e4:	801a      	strh	r2, [r3, #0]
 80053e6:	e07b      	b.n	80054e0 <check_for_incoming_sms+0x2c4>
 80053e8:	200003c8 	.word	0x200003c8
 80053ec:	20000380 	.word	0x20000380
 80053f0:	200003ec 	.word	0x200003ec
 80053f4:	0800740c 	.word	0x0800740c
 80053f8:	20000678 	.word	0x20000678
 80053fc:	200005f1 	.word	0x200005f1
 8005400:	200005f5 	.word	0x200005f5
 8005404:	20000578 	.word	0x20000578
 8005408:	20000580 	.word	0x20000580
 800540c:	20000574 	.word	0x20000574
 8005410:	200005f3 	.word	0x200005f3
 8005414:	200005f4 	.word	0x200005f4
			//strncpy(Num_str,recv_str+k,10);
			//if (strcmp(Num_str,"912xxxxxxx") == 0){
			if ((recv_str[k] == Num_str[0]) && (recv_str[k+1] == Num_str[1]) && (recv_str[k+2] == Num_str[2]) && (recv_str[k+3] == Num_str[3]) && (recv_str[k+4] == Num_str[4]) && (recv_str[k+5] == Num_str[5]) && (recv_str[k+6] == Num_str[6]) && (recv_str[k+7] == Num_str[7]) && (recv_str[k+8] == Num_str[8]) && (recv_str[k+9] == Num_str[9])){
 8005418:	4b90      	ldr	r3, [pc, #576]	; (800565c <check_for_incoming_sms+0x440>)
 800541a:	881b      	ldrh	r3, [r3, #0]
 800541c:	461a      	mov	r2, r3
 800541e:	4b90      	ldr	r3, [pc, #576]	; (8005660 <check_for_incoming_sms+0x444>)
 8005420:	5c9a      	ldrb	r2, [r3, r2]
 8005422:	4b90      	ldr	r3, [pc, #576]	; (8005664 <check_for_incoming_sms+0x448>)
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	429a      	cmp	r2, r3
 8005428:	d154      	bne.n	80054d4 <check_for_incoming_sms+0x2b8>
 800542a:	4b8c      	ldr	r3, [pc, #560]	; (800565c <check_for_incoming_sms+0x440>)
 800542c:	881b      	ldrh	r3, [r3, #0]
 800542e:	3301      	adds	r3, #1
 8005430:	4a8b      	ldr	r2, [pc, #556]	; (8005660 <check_for_incoming_sms+0x444>)
 8005432:	5cd2      	ldrb	r2, [r2, r3]
 8005434:	4b8b      	ldr	r3, [pc, #556]	; (8005664 <check_for_incoming_sms+0x448>)
 8005436:	785b      	ldrb	r3, [r3, #1]
 8005438:	429a      	cmp	r2, r3
 800543a:	d14b      	bne.n	80054d4 <check_for_incoming_sms+0x2b8>
 800543c:	4b87      	ldr	r3, [pc, #540]	; (800565c <check_for_incoming_sms+0x440>)
 800543e:	881b      	ldrh	r3, [r3, #0]
 8005440:	3302      	adds	r3, #2
 8005442:	4a87      	ldr	r2, [pc, #540]	; (8005660 <check_for_incoming_sms+0x444>)
 8005444:	5cd2      	ldrb	r2, [r2, r3]
 8005446:	4b87      	ldr	r3, [pc, #540]	; (8005664 <check_for_incoming_sms+0x448>)
 8005448:	789b      	ldrb	r3, [r3, #2]
 800544a:	429a      	cmp	r2, r3
 800544c:	d142      	bne.n	80054d4 <check_for_incoming_sms+0x2b8>
 800544e:	4b83      	ldr	r3, [pc, #524]	; (800565c <check_for_incoming_sms+0x440>)
 8005450:	881b      	ldrh	r3, [r3, #0]
 8005452:	3303      	adds	r3, #3
 8005454:	4a82      	ldr	r2, [pc, #520]	; (8005660 <check_for_incoming_sms+0x444>)
 8005456:	5cd2      	ldrb	r2, [r2, r3]
 8005458:	4b82      	ldr	r3, [pc, #520]	; (8005664 <check_for_incoming_sms+0x448>)
 800545a:	78db      	ldrb	r3, [r3, #3]
 800545c:	429a      	cmp	r2, r3
 800545e:	d139      	bne.n	80054d4 <check_for_incoming_sms+0x2b8>
 8005460:	4b7e      	ldr	r3, [pc, #504]	; (800565c <check_for_incoming_sms+0x440>)
 8005462:	881b      	ldrh	r3, [r3, #0]
 8005464:	3304      	adds	r3, #4
 8005466:	4a7e      	ldr	r2, [pc, #504]	; (8005660 <check_for_incoming_sms+0x444>)
 8005468:	5cd2      	ldrb	r2, [r2, r3]
 800546a:	4b7e      	ldr	r3, [pc, #504]	; (8005664 <check_for_incoming_sms+0x448>)
 800546c:	791b      	ldrb	r3, [r3, #4]
 800546e:	429a      	cmp	r2, r3
 8005470:	d130      	bne.n	80054d4 <check_for_incoming_sms+0x2b8>
 8005472:	4b7a      	ldr	r3, [pc, #488]	; (800565c <check_for_incoming_sms+0x440>)
 8005474:	881b      	ldrh	r3, [r3, #0]
 8005476:	3305      	adds	r3, #5
 8005478:	4a79      	ldr	r2, [pc, #484]	; (8005660 <check_for_incoming_sms+0x444>)
 800547a:	5cd2      	ldrb	r2, [r2, r3]
 800547c:	4b79      	ldr	r3, [pc, #484]	; (8005664 <check_for_incoming_sms+0x448>)
 800547e:	795b      	ldrb	r3, [r3, #5]
 8005480:	429a      	cmp	r2, r3
 8005482:	d127      	bne.n	80054d4 <check_for_incoming_sms+0x2b8>
 8005484:	4b75      	ldr	r3, [pc, #468]	; (800565c <check_for_incoming_sms+0x440>)
 8005486:	881b      	ldrh	r3, [r3, #0]
 8005488:	3306      	adds	r3, #6
 800548a:	4a75      	ldr	r2, [pc, #468]	; (8005660 <check_for_incoming_sms+0x444>)
 800548c:	5cd2      	ldrb	r2, [r2, r3]
 800548e:	4b75      	ldr	r3, [pc, #468]	; (8005664 <check_for_incoming_sms+0x448>)
 8005490:	799b      	ldrb	r3, [r3, #6]
 8005492:	429a      	cmp	r2, r3
 8005494:	d11e      	bne.n	80054d4 <check_for_incoming_sms+0x2b8>
 8005496:	4b71      	ldr	r3, [pc, #452]	; (800565c <check_for_incoming_sms+0x440>)
 8005498:	881b      	ldrh	r3, [r3, #0]
 800549a:	3307      	adds	r3, #7
 800549c:	4a70      	ldr	r2, [pc, #448]	; (8005660 <check_for_incoming_sms+0x444>)
 800549e:	5cd2      	ldrb	r2, [r2, r3]
 80054a0:	4b70      	ldr	r3, [pc, #448]	; (8005664 <check_for_incoming_sms+0x448>)
 80054a2:	79db      	ldrb	r3, [r3, #7]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d115      	bne.n	80054d4 <check_for_incoming_sms+0x2b8>
 80054a8:	4b6c      	ldr	r3, [pc, #432]	; (800565c <check_for_incoming_sms+0x440>)
 80054aa:	881b      	ldrh	r3, [r3, #0]
 80054ac:	3308      	adds	r3, #8
 80054ae:	4a6c      	ldr	r2, [pc, #432]	; (8005660 <check_for_incoming_sms+0x444>)
 80054b0:	5cd2      	ldrb	r2, [r2, r3]
 80054b2:	4b6c      	ldr	r3, [pc, #432]	; (8005664 <check_for_incoming_sms+0x448>)
 80054b4:	7a1b      	ldrb	r3, [r3, #8]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d10c      	bne.n	80054d4 <check_for_incoming_sms+0x2b8>
 80054ba:	4b68      	ldr	r3, [pc, #416]	; (800565c <check_for_incoming_sms+0x440>)
 80054bc:	881b      	ldrh	r3, [r3, #0]
 80054be:	3309      	adds	r3, #9
 80054c0:	4a67      	ldr	r2, [pc, #412]	; (8005660 <check_for_incoming_sms+0x444>)
 80054c2:	5cd2      	ldrb	r2, [r2, r3]
 80054c4:	4b67      	ldr	r3, [pc, #412]	; (8005664 <check_for_incoming_sms+0x448>)
 80054c6:	7a5b      	ldrb	r3, [r3, #9]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d103      	bne.n	80054d4 <check_for_incoming_sms+0x2b8>
				Number_verified = 1;
 80054cc:	4b66      	ldr	r3, [pc, #408]	; (8005668 <check_for_incoming_sms+0x44c>)
 80054ce:	2201      	movs	r2, #1
 80054d0:	701a      	strb	r2, [r3, #0]
				break;
 80054d2:	e009      	b.n	80054e8 <check_for_incoming_sms+0x2cc>
		for (k = 0; k < 30; k++){
 80054d4:	4b61      	ldr	r3, [pc, #388]	; (800565c <check_for_incoming_sms+0x440>)
 80054d6:	881b      	ldrh	r3, [r3, #0]
 80054d8:	3301      	adds	r3, #1
 80054da:	b29a      	uxth	r2, r3
 80054dc:	4b5f      	ldr	r3, [pc, #380]	; (800565c <check_for_incoming_sms+0x440>)
 80054de:	801a      	strh	r2, [r3, #0]
 80054e0:	4b5e      	ldr	r3, [pc, #376]	; (800565c <check_for_incoming_sms+0x440>)
 80054e2:	881b      	ldrh	r3, [r3, #0]
 80054e4:	2b1d      	cmp	r3, #29
 80054e6:	d997      	bls.n	8005418 <check_for_incoming_sms+0x1fc>
			}
		}
		report_status = 0;
 80054e8:	4b60      	ldr	r3, [pc, #384]	; (800566c <check_for_incoming_sms+0x450>)
 80054ea:	2200      	movs	r2, #0
 80054ec:	701a      	strb	r2, [r3, #0]
		if (Number_verified == 1){
 80054ee:	4b5e      	ldr	r3, [pc, #376]	; (8005668 <check_for_incoming_sms+0x44c>)
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d172      	bne.n	80055dc <check_for_incoming_sms+0x3c0>
			for (k = 50; k < 80; k++){
 80054f6:	4b59      	ldr	r3, [pc, #356]	; (800565c <check_for_incoming_sms+0x440>)
 80054f8:	2232      	movs	r2, #50	; 0x32
 80054fa:	801a      	strh	r2, [r3, #0]
 80054fc:	e06a      	b.n	80055d4 <check_for_incoming_sms+0x3b8>
				//strncpy(cmd_str,recv_str+k,2);
				cmd_str[0] = recv_str[k];
 80054fe:	4b57      	ldr	r3, [pc, #348]	; (800565c <check_for_incoming_sms+0x440>)
 8005500:	881b      	ldrh	r3, [r3, #0]
 8005502:	461a      	mov	r2, r3
 8005504:	4b56      	ldr	r3, [pc, #344]	; (8005660 <check_for_incoming_sms+0x444>)
 8005506:	5c9a      	ldrb	r2, [r3, r2]
 8005508:	4b59      	ldr	r3, [pc, #356]	; (8005670 <check_for_incoming_sms+0x454>)
 800550a:	701a      	strb	r2, [r3, #0]
				cmd_str[1] = recv_str[k+1];
 800550c:	4b53      	ldr	r3, [pc, #332]	; (800565c <check_for_incoming_sms+0x440>)
 800550e:	881b      	ldrh	r3, [r3, #0]
 8005510:	3301      	adds	r3, #1
 8005512:	4a53      	ldr	r2, [pc, #332]	; (8005660 <check_for_incoming_sms+0x444>)
 8005514:	5cd2      	ldrb	r2, [r2, r3]
 8005516:	4b56      	ldr	r3, [pc, #344]	; (8005670 <check_for_incoming_sms+0x454>)
 8005518:	705a      	strb	r2, [r3, #1]
				//if (strcmp(strlwr(cmd_str),"on") == 0){
				if ((cmd_str[0] == 'O') || (cmd_str[0] == 'o')){
 800551a:	4b55      	ldr	r3, [pc, #340]	; (8005670 <check_for_incoming_sms+0x454>)
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	2b4f      	cmp	r3, #79	; 0x4f
 8005520:	d003      	beq.n	800552a <check_for_incoming_sms+0x30e>
 8005522:	4b53      	ldr	r3, [pc, #332]	; (8005670 <check_for_incoming_sms+0x454>)
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	2b6f      	cmp	r3, #111	; 0x6f
 8005528:	d10e      	bne.n	8005548 <check_for_incoming_sms+0x32c>
					if ((cmd_str[1] == 'N') || (cmd_str[1] == 'n')){
 800552a:	4b51      	ldr	r3, [pc, #324]	; (8005670 <check_for_incoming_sms+0x454>)
 800552c:	785b      	ldrb	r3, [r3, #1]
 800552e:	2b4e      	cmp	r3, #78	; 0x4e
 8005530:	d003      	beq.n	800553a <check_for_incoming_sms+0x31e>
 8005532:	4b4f      	ldr	r3, [pc, #316]	; (8005670 <check_for_incoming_sms+0x454>)
 8005534:	785b      	ldrb	r3, [r3, #1]
 8005536:	2b6e      	cmp	r3, #110	; 0x6e
 8005538:	d106      	bne.n	8005548 <check_for_incoming_sms+0x32c>
						Armed = 1;
 800553a:	4b4e      	ldr	r3, [pc, #312]	; (8005674 <check_for_incoming_sms+0x458>)
 800553c:	2201      	movs	r2, #1
 800553e:	701a      	strb	r2, [r3, #0]
						New_status = 1;
 8005540:	4b4d      	ldr	r3, [pc, #308]	; (8005678 <check_for_incoming_sms+0x45c>)
 8005542:	2201      	movs	r2, #1
 8005544:	701a      	strb	r2, [r3, #0]
						break;
 8005546:	e049      	b.n	80055dc <check_for_incoming_sms+0x3c0>
					}
				}
				//if (strcmp(strlwr(cmd_str),"of") == 0){
				if ((cmd_str[0] == 'O') || (cmd_str[0] == 'o')){
 8005548:	4b49      	ldr	r3, [pc, #292]	; (8005670 <check_for_incoming_sms+0x454>)
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	2b4f      	cmp	r3, #79	; 0x4f
 800554e:	d003      	beq.n	8005558 <check_for_incoming_sms+0x33c>
 8005550:	4b47      	ldr	r3, [pc, #284]	; (8005670 <check_for_incoming_sms+0x454>)
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	2b6f      	cmp	r3, #111	; 0x6f
 8005556:	d10e      	bne.n	8005576 <check_for_incoming_sms+0x35a>
					if ((cmd_str[1] == 'F') || (cmd_str[1] == 'f')){
 8005558:	4b45      	ldr	r3, [pc, #276]	; (8005670 <check_for_incoming_sms+0x454>)
 800555a:	785b      	ldrb	r3, [r3, #1]
 800555c:	2b46      	cmp	r3, #70	; 0x46
 800555e:	d003      	beq.n	8005568 <check_for_incoming_sms+0x34c>
 8005560:	4b43      	ldr	r3, [pc, #268]	; (8005670 <check_for_incoming_sms+0x454>)
 8005562:	785b      	ldrb	r3, [r3, #1]
 8005564:	2b66      	cmp	r3, #102	; 0x66
 8005566:	d106      	bne.n	8005576 <check_for_incoming_sms+0x35a>
						Armed = 0;
 8005568:	4b42      	ldr	r3, [pc, #264]	; (8005674 <check_for_incoming_sms+0x458>)
 800556a:	2200      	movs	r2, #0
 800556c:	701a      	strb	r2, [r3, #0]
						New_status = 1;
 800556e:	4b42      	ldr	r3, [pc, #264]	; (8005678 <check_for_incoming_sms+0x45c>)
 8005570:	2201      	movs	r2, #1
 8005572:	701a      	strb	r2, [r3, #0]
						break;
 8005574:	e032      	b.n	80055dc <check_for_incoming_sms+0x3c0>
					}
				}
				//if (strcmp(strlwr(cmd_str),"st") == 0){
				if ((cmd_str[0] == 'S') || (cmd_str[0] == 's')){
 8005576:	4b3e      	ldr	r3, [pc, #248]	; (8005670 <check_for_incoming_sms+0x454>)
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	2b53      	cmp	r3, #83	; 0x53
 800557c:	d003      	beq.n	8005586 <check_for_incoming_sms+0x36a>
 800557e:	4b3c      	ldr	r3, [pc, #240]	; (8005670 <check_for_incoming_sms+0x454>)
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	2b73      	cmp	r3, #115	; 0x73
 8005584:	d10e      	bne.n	80055a4 <check_for_incoming_sms+0x388>
					if ((cmd_str[1] == 'T') || (cmd_str[1] == 't')){
 8005586:	4b3a      	ldr	r3, [pc, #232]	; (8005670 <check_for_incoming_sms+0x454>)
 8005588:	785b      	ldrb	r3, [r3, #1]
 800558a:	2b54      	cmp	r3, #84	; 0x54
 800558c:	d003      	beq.n	8005596 <check_for_incoming_sms+0x37a>
 800558e:	4b38      	ldr	r3, [pc, #224]	; (8005670 <check_for_incoming_sms+0x454>)
 8005590:	785b      	ldrb	r3, [r3, #1]
 8005592:	2b74      	cmp	r3, #116	; 0x74
 8005594:	d106      	bne.n	80055a4 <check_for_incoming_sms+0x388>
						New_status = 1;
 8005596:	4b38      	ldr	r3, [pc, #224]	; (8005678 <check_for_incoming_sms+0x45c>)
 8005598:	2201      	movs	r2, #1
 800559a:	701a      	strb	r2, [r3, #0]
						report_status = 1;
 800559c:	4b33      	ldr	r3, [pc, #204]	; (800566c <check_for_incoming_sms+0x450>)
 800559e:	2201      	movs	r2, #1
 80055a0:	701a      	strb	r2, [r3, #0]
						break;
 80055a2:	e01b      	b.n	80055dc <check_for_incoming_sms+0x3c0>
					}
				}
				//
				if ((cmd_str[0] == 'R') || (cmd_str[0] == 'r')){
 80055a4:	4b32      	ldr	r3, [pc, #200]	; (8005670 <check_for_incoming_sms+0x454>)
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	2b52      	cmp	r3, #82	; 0x52
 80055aa:	d003      	beq.n	80055b4 <check_for_incoming_sms+0x398>
 80055ac:	4b30      	ldr	r3, [pc, #192]	; (8005670 <check_for_incoming_sms+0x454>)
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	2b72      	cmp	r3, #114	; 0x72
 80055b2:	d109      	bne.n	80055c8 <check_for_incoming_sms+0x3ac>
					if ((cmd_str[1] == 'S') || (cmd_str[1] == 's')){
 80055b4:	4b2e      	ldr	r3, [pc, #184]	; (8005670 <check_for_incoming_sms+0x454>)
 80055b6:	785b      	ldrb	r3, [r3, #1]
 80055b8:	2b53      	cmp	r3, #83	; 0x53
 80055ba:	d003      	beq.n	80055c4 <check_for_incoming_sms+0x3a8>
 80055bc:	4b2c      	ldr	r3, [pc, #176]	; (8005670 <check_for_incoming_sms+0x454>)
 80055be:	785b      	ldrb	r3, [r3, #1]
 80055c0:	2b73      	cmp	r3, #115	; 0x73
 80055c2:	d101      	bne.n	80055c8 <check_for_incoming_sms+0x3ac>
						NVIC_SystemReset();
 80055c4:	f7ff fb64 	bl	8004c90 <__NVIC_SystemReset>
			for (k = 50; k < 80; k++){
 80055c8:	4b24      	ldr	r3, [pc, #144]	; (800565c <check_for_incoming_sms+0x440>)
 80055ca:	881b      	ldrh	r3, [r3, #0]
 80055cc:	3301      	adds	r3, #1
 80055ce:	b29a      	uxth	r2, r3
 80055d0:	4b22      	ldr	r3, [pc, #136]	; (800565c <check_for_incoming_sms+0x440>)
 80055d2:	801a      	strh	r2, [r3, #0]
 80055d4:	4b21      	ldr	r3, [pc, #132]	; (800565c <check_for_incoming_sms+0x440>)
 80055d6:	881b      	ldrh	r3, [r3, #0]
 80055d8:	2b4f      	cmp	r3, #79	; 0x4f
 80055da:	d990      	bls.n	80054fe <check_for_incoming_sms+0x2e2>
				}

			}
		}
	}
	NewSMS = 0;
 80055dc:	4b27      	ldr	r3, [pc, #156]	; (800567c <check_for_incoming_sms+0x460>)
 80055de:	2200      	movs	r2, #0
 80055e0:	701a      	strb	r2, [r3, #0]
	if (New_status == 1){
 80055e2:	4b25      	ldr	r3, [pc, #148]	; (8005678 <check_for_incoming_sms+0x45c>)
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	f040 80a1 	bne.w	800572e <check_for_incoming_sms+0x512>
		LED2_GPIO_Port -> BSRR = LED2_Pin;
 80055ec:	4b24      	ldr	r3, [pc, #144]	; (8005680 <check_for_incoming_sms+0x464>)
 80055ee:	2220      	movs	r2, #32
 80055f0:	611a      	str	r2, [r3, #16]
		New_status = 0;
 80055f2:	4b21      	ldr	r3, [pc, #132]	; (8005678 <check_for_incoming_sms+0x45c>)
 80055f4:	2200      	movs	r2, #0
 80055f6:	701a      	strb	r2, [r3, #0]
		sending_sms_cmd = 1;
 80055f8:	4b22      	ldr	r3, [pc, #136]	; (8005684 <check_for_incoming_sms+0x468>)
 80055fa:	2201      	movs	r2, #1
 80055fc:	701a      	strb	r2, [r3, #0]
		sending_sms_str[0] = '\0';
 80055fe:	4b22      	ldr	r3, [pc, #136]	; (8005688 <check_for_incoming_sms+0x46c>)
 8005600:	2200      	movs	r2, #0
 8005602:	701a      	strb	r2, [r3, #0]
		if (Armed == 1){
 8005604:	4b1b      	ldr	r3, [pc, #108]	; (8005674 <check_for_incoming_sms+0x458>)
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	2b01      	cmp	r3, #1
 800560a:	d108      	bne.n	800561e <check_for_incoming_sms+0x402>
			strcpy(sending_sms_str,"Status: On");
 800560c:	4b1e      	ldr	r3, [pc, #120]	; (8005688 <check_for_incoming_sms+0x46c>)
 800560e:	4a1f      	ldr	r2, [pc, #124]	; (800568c <check_for_incoming_sms+0x470>)
 8005610:	ca07      	ldmia	r2, {r0, r1, r2}
 8005612:	c303      	stmia	r3!, {r0, r1}
 8005614:	801a      	strh	r2, [r3, #0]
 8005616:	3302      	adds	r3, #2
 8005618:	0c12      	lsrs	r2, r2, #16
 800561a:	701a      	strb	r2, [r3, #0]
 800561c:	e004      	b.n	8005628 <check_for_incoming_sms+0x40c>
		}
		else{
			strcpy(sending_sms_str,"Status: Off");
 800561e:	4b1a      	ldr	r3, [pc, #104]	; (8005688 <check_for_incoming_sms+0x46c>)
 8005620:	4a1b      	ldr	r2, [pc, #108]	; (8005690 <check_for_incoming_sms+0x474>)
 8005622:	ca07      	ldmia	r2, {r0, r1, r2}
 8005624:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
		if (report_status == 1){
 8005628:	4b10      	ldr	r3, [pc, #64]	; (800566c <check_for_incoming_sms+0x450>)
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	2b01      	cmp	r3, #1
 800562e:	d178      	bne.n	8005722 <check_for_incoming_sms+0x506>
			if((InPwr_GPIO_Port->IDR & InPwr_Pin) == (uint32_t)GPIO_PIN_RESET){
 8005630:	4b18      	ldr	r3, [pc, #96]	; (8005694 <check_for_incoming_sms+0x478>)
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	f003 0308 	and.w	r3, r3, #8
 8005638:	2b00      	cmp	r3, #0
 800563a:	d12f      	bne.n	800569c <check_for_incoming_sms+0x480>
				strcat(sending_sms_str,"\nInPwr: Off");
 800563c:	4812      	ldr	r0, [pc, #72]	; (8005688 <check_for_incoming_sms+0x46c>)
 800563e:	f7fa fd8f 	bl	8000160 <strlen>
 8005642:	4603      	mov	r3, r0
 8005644:	461a      	mov	r2, r3
 8005646:	4b10      	ldr	r3, [pc, #64]	; (8005688 <check_for_incoming_sms+0x46c>)
 8005648:	4413      	add	r3, r2
 800564a:	4a13      	ldr	r2, [pc, #76]	; (8005698 <check_for_incoming_sms+0x47c>)
 800564c:	461c      	mov	r4, r3
 800564e:	4613      	mov	r3, r2
 8005650:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005652:	6020      	str	r0, [r4, #0]
 8005654:	6061      	str	r1, [r4, #4]
 8005656:	60a2      	str	r2, [r4, #8]
 8005658:	e031      	b.n	80056be <check_for_incoming_sms+0x4a2>
 800565a:	bf00      	nop
 800565c:	20000380 	.word	0x20000380
 8005660:	200003ec 	.word	0x200003ec
 8005664:	200000fc 	.word	0x200000fc
 8005668:	200005f4 	.word	0x200005f4
 800566c:	2000060c 	.word	0x2000060c
 8005670:	20000574 	.word	0x20000574
 8005674:	200005f2 	.word	0x200005f2
 8005678:	200005f5 	.word	0x200005f5
 800567c:	200005f1 	.word	0x200005f1
 8005680:	40010c00 	.word	0x40010c00
 8005684:	200005fd 	.word	0x200005fd
 8005688:	2000059c 	.word	0x2000059c
 800568c:	08007418 	.word	0x08007418
 8005690:	08007424 	.word	0x08007424
 8005694:	40010800 	.word	0x40010800
 8005698:	08007430 	.word	0x08007430
			}else{
				strcat(sending_sms_str,"\nInPwr: On");
 800569c:	4825      	ldr	r0, [pc, #148]	; (8005734 <check_for_incoming_sms+0x518>)
 800569e:	f7fa fd5f 	bl	8000160 <strlen>
 80056a2:	4603      	mov	r3, r0
 80056a4:	461a      	mov	r2, r3
 80056a6:	4b23      	ldr	r3, [pc, #140]	; (8005734 <check_for_incoming_sms+0x518>)
 80056a8:	4413      	add	r3, r2
 80056aa:	4923      	ldr	r1, [pc, #140]	; (8005738 <check_for_incoming_sms+0x51c>)
 80056ac:	461a      	mov	r2, r3
 80056ae:	460b      	mov	r3, r1
 80056b0:	cb03      	ldmia	r3!, {r0, r1}
 80056b2:	6010      	str	r0, [r2, #0]
 80056b4:	6051      	str	r1, [r2, #4]
 80056b6:	8819      	ldrh	r1, [r3, #0]
 80056b8:	789b      	ldrb	r3, [r3, #2]
 80056ba:	8111      	strh	r1, [r2, #8]
 80056bc:	7293      	strb	r3, [r2, #10]
			}
			if (HAL_GPIO_ReadPin(OnSw_GPIO_Port, OnSw_Pin) == GPIO_PIN_SET){
 80056be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80056c2:	481e      	ldr	r0, [pc, #120]	; (800573c <check_for_incoming_sms+0x520>)
 80056c4:	f7fb f840 	bl	8000748 <HAL_GPIO_ReadPin>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d10f      	bne.n	80056ee <check_for_incoming_sms+0x4d2>
				strcat(sending_sms_str,"\nIn1: On");
 80056ce:	4819      	ldr	r0, [pc, #100]	; (8005734 <check_for_incoming_sms+0x518>)
 80056d0:	f7fa fd46 	bl	8000160 <strlen>
 80056d4:	4603      	mov	r3, r0
 80056d6:	461a      	mov	r2, r3
 80056d8:	4b16      	ldr	r3, [pc, #88]	; (8005734 <check_for_incoming_sms+0x518>)
 80056da:	4413      	add	r3, r2
 80056dc:	4918      	ldr	r1, [pc, #96]	; (8005740 <check_for_incoming_sms+0x524>)
 80056de:	461a      	mov	r2, r3
 80056e0:	460b      	mov	r3, r1
 80056e2:	cb03      	ldmia	r3!, {r0, r1}
 80056e4:	6010      	str	r0, [r2, #0]
 80056e6:	6051      	str	r1, [r2, #4]
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	7213      	strb	r3, [r2, #8]
 80056ec:	e00e      	b.n	800570c <check_for_incoming_sms+0x4f0>
			}else{
				strcat(sending_sms_str,"\nIn1: Off");
 80056ee:	4811      	ldr	r0, [pc, #68]	; (8005734 <check_for_incoming_sms+0x518>)
 80056f0:	f7fa fd36 	bl	8000160 <strlen>
 80056f4:	4603      	mov	r3, r0
 80056f6:	461a      	mov	r2, r3
 80056f8:	4b0e      	ldr	r3, [pc, #56]	; (8005734 <check_for_incoming_sms+0x518>)
 80056fa:	4413      	add	r3, r2
 80056fc:	4911      	ldr	r1, [pc, #68]	; (8005744 <check_for_incoming_sms+0x528>)
 80056fe:	461a      	mov	r2, r3
 8005700:	460b      	mov	r3, r1
 8005702:	cb03      	ldmia	r3!, {r0, r1}
 8005704:	6010      	str	r0, [r2, #0]
 8005706:	6051      	str	r1, [r2, #4]
 8005708:	881b      	ldrh	r3, [r3, #0]
 800570a:	8113      	strh	r3, [r2, #8]
			}
			sprintf(bat_rep,"\nBat: %d%%", Bat_val);
 800570c:	4b0e      	ldr	r3, [pc, #56]	; (8005748 <check_for_incoming_sms+0x52c>)
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	461a      	mov	r2, r3
 8005712:	490e      	ldr	r1, [pc, #56]	; (800574c <check_for_incoming_sms+0x530>)
 8005714:	480e      	ldr	r0, [pc, #56]	; (8005750 <check_for_incoming_sms+0x534>)
 8005716:	f001 f903 	bl	8006920 <siprintf>
			strcat(sending_sms_str,bat_rep);
 800571a:	490d      	ldr	r1, [pc, #52]	; (8005750 <check_for_incoming_sms+0x534>)
 800571c:	4805      	ldr	r0, [pc, #20]	; (8005734 <check_for_incoming_sms+0x518>)
 800571e:	f001 f91f 	bl	8006960 <strcat>
		}
		HAL_Delay(10);
 8005722:	200a      	movs	r0, #10
 8005724:	f7fa fd86 	bl	8000234 <HAL_Delay>
		LED2_GPIO_Port -> BRR = LED2_Pin;
 8005728:	4b0a      	ldr	r3, [pc, #40]	; (8005754 <check_for_incoming_sms+0x538>)
 800572a:	2220      	movs	r2, #32
 800572c:	615a      	str	r2, [r3, #20]
	}
}
 800572e:	bf00      	nop
 8005730:	bd98      	pop	{r3, r4, r7, pc}
 8005732:	bf00      	nop
 8005734:	2000059c 	.word	0x2000059c
 8005738:	0800743c 	.word	0x0800743c
 800573c:	40010800 	.word	0x40010800
 8005740:	08007448 	.word	0x08007448
 8005744:	08007454 	.word	0x08007454
 8005748:	200005fa 	.word	0x200005fa
 800574c:	08007460 	.word	0x08007460
 8005750:	200005e0 	.word	0x200005e0
 8005754:	40010c00 	.word	0x40010c00

08005758 <Bat_check_func>:
////////////////////
void	Bat_check_func(void){
 8005758:	b580      	push	{r7, lr}
 800575a:	af00      	add	r7, sp, #0
	tmp_str[0] = '\0';
 800575c:	4b65      	ldr	r3, [pc, #404]	; (80058f4 <Bat_check_func+0x19c>)
 800575e:	2200      	movs	r2, #0
 8005760:	701a      	strb	r2, [r3, #0]
	strcpy(tmp_str,"AT+CBC\r");
 8005762:	4b64      	ldr	r3, [pc, #400]	; (80058f4 <Bat_check_func+0x19c>)
 8005764:	4a64      	ldr	r2, [pc, #400]	; (80058f8 <Bat_check_func+0x1a0>)
 8005766:	e892 0003 	ldmia.w	r2, {r0, r1}
 800576a:	e883 0003 	stmia.w	r3, {r0, r1}
	for(k=0; k<128; k++){io_str[k] = '\0';}
 800576e:	4b63      	ldr	r3, [pc, #396]	; (80058fc <Bat_check_func+0x1a4>)
 8005770:	2200      	movs	r2, #0
 8005772:	801a      	strh	r2, [r3, #0]
 8005774:	e00b      	b.n	800578e <Bat_check_func+0x36>
 8005776:	4b61      	ldr	r3, [pc, #388]	; (80058fc <Bat_check_func+0x1a4>)
 8005778:	881b      	ldrh	r3, [r3, #0]
 800577a:	461a      	mov	r2, r3
 800577c:	4b60      	ldr	r3, [pc, #384]	; (8005900 <Bat_check_func+0x1a8>)
 800577e:	2100      	movs	r1, #0
 8005780:	5499      	strb	r1, [r3, r2]
 8005782:	4b5e      	ldr	r3, [pc, #376]	; (80058fc <Bat_check_func+0x1a4>)
 8005784:	881b      	ldrh	r3, [r3, #0]
 8005786:	3301      	adds	r3, #1
 8005788:	b29a      	uxth	r2, r3
 800578a:	4b5c      	ldr	r3, [pc, #368]	; (80058fc <Bat_check_func+0x1a4>)
 800578c:	801a      	strh	r2, [r3, #0]
 800578e:	4b5b      	ldr	r3, [pc, #364]	; (80058fc <Bat_check_func+0x1a4>)
 8005790:	881b      	ldrh	r3, [r3, #0]
 8005792:	2b7f      	cmp	r3, #127	; 0x7f
 8005794:	d9ef      	bls.n	8005776 <Bat_check_func+0x1e>
	HAL_UART_Transmit(&huart3,(unsigned char *)tmp_str,strlen(tmp_str),1000);
 8005796:	4857      	ldr	r0, [pc, #348]	; (80058f4 <Bat_check_func+0x19c>)
 8005798:	f7fa fce2 	bl	8000160 <strlen>
 800579c:	4603      	mov	r3, r0
 800579e:	b29a      	uxth	r2, r3
 80057a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80057a4:	4953      	ldr	r1, [pc, #332]	; (80058f4 <Bat_check_func+0x19c>)
 80057a6:	4857      	ldr	r0, [pc, #348]	; (8005904 <Bat_check_func+0x1ac>)
 80057a8:	f7fc fbeb 	bl	8001f82 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart3,(unsigned char *)io_str, 128, 200);
 80057ac:	23c8      	movs	r3, #200	; 0xc8
 80057ae:	2280      	movs	r2, #128	; 0x80
 80057b0:	4953      	ldr	r1, [pc, #332]	; (8005900 <Bat_check_func+0x1a8>)
 80057b2:	4854      	ldr	r0, [pc, #336]	; (8005904 <Bat_check_func+0x1ac>)
 80057b4:	f7fc fc7e 	bl	80020b4 <HAL_UART_Receive>
	SIM_failed_response = 1;
 80057b8:	4b53      	ldr	r3, [pc, #332]	; (8005908 <Bat_check_func+0x1b0>)
 80057ba:	2201      	movs	r2, #1
 80057bc:	701a      	strb	r2, [r3, #0]
	Bat_pre[0] = '\0';
 80057be:	4b53      	ldr	r3, [pc, #332]	; (800590c <Bat_check_func+0x1b4>)
 80057c0:	2200      	movs	r2, #0
 80057c2:	701a      	strb	r2, [r3, #0]
	bat_chr[0] = '\0';
 80057c4:	4b52      	ldr	r3, [pc, #328]	; (8005910 <Bat_check_func+0x1b8>)
 80057c6:	2200      	movs	r2, #0
 80057c8:	701a      	strb	r2, [r3, #0]
	bat_chr3[0] = '\0';
 80057ca:	4b52      	ldr	r3, [pc, #328]	; (8005914 <Bat_check_func+0x1bc>)
 80057cc:	2200      	movs	r2, #0
 80057ce:	701a      	strb	r2, [r3, #0]
	Bat_val = 0;
 80057d0:	4b51      	ldr	r3, [pc, #324]	; (8005918 <Bat_check_func+0x1c0>)
 80057d2:	2200      	movs	r2, #0
 80057d4:	701a      	strb	r2, [r3, #0]
	for (k = 0; k < 30; k++){
 80057d6:	4b49      	ldr	r3, [pc, #292]	; (80058fc <Bat_check_func+0x1a4>)
 80057d8:	2200      	movs	r2, #0
 80057da:	801a      	strh	r2, [r3, #0]
 80057dc:	e07a      	b.n	80058d4 <Bat_check_func+0x17c>
		Bat_pre[0] = '\0';
 80057de:	4b4b      	ldr	r3, [pc, #300]	; (800590c <Bat_check_func+0x1b4>)
 80057e0:	2200      	movs	r2, #0
 80057e2:	701a      	strb	r2, [r3, #0]
		strncpy(Bat_pre,io_str+k,8);
 80057e4:	4b45      	ldr	r3, [pc, #276]	; (80058fc <Bat_check_func+0x1a4>)
 80057e6:	881b      	ldrh	r3, [r3, #0]
 80057e8:	461a      	mov	r2, r3
 80057ea:	4b45      	ldr	r3, [pc, #276]	; (8005900 <Bat_check_func+0x1a8>)
 80057ec:	4413      	add	r3, r2
 80057ee:	2208      	movs	r2, #8
 80057f0:	4619      	mov	r1, r3
 80057f2:	4846      	ldr	r0, [pc, #280]	; (800590c <Bat_check_func+0x1b4>)
 80057f4:	f001 f8c3 	bl	800697e <strncpy>
		if (strcmp(Bat_pre,"+CBC: 0,") == 0){
 80057f8:	4948      	ldr	r1, [pc, #288]	; (800591c <Bat_check_func+0x1c4>)
 80057fa:	4844      	ldr	r0, [pc, #272]	; (800590c <Bat_check_func+0x1b4>)
 80057fc:	f7fa fca6 	bl	800014c <strcmp>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d160      	bne.n	80058c8 <Bat_check_func+0x170>
			SIM_failed_response = 0;
 8005806:	4b40      	ldr	r3, [pc, #256]	; (8005908 <Bat_check_func+0x1b0>)
 8005808:	2200      	movs	r2, #0
 800580a:	701a      	strb	r2, [r3, #0]
			bat_chr3[0] = io_str[k+8];
 800580c:	4b3b      	ldr	r3, [pc, #236]	; (80058fc <Bat_check_func+0x1a4>)
 800580e:	881b      	ldrh	r3, [r3, #0]
 8005810:	3308      	adds	r3, #8
 8005812:	4a3b      	ldr	r2, [pc, #236]	; (8005900 <Bat_check_func+0x1a8>)
 8005814:	5cd2      	ldrb	r2, [r2, r3]
 8005816:	4b3f      	ldr	r3, [pc, #252]	; (8005914 <Bat_check_func+0x1bc>)
 8005818:	701a      	strb	r2, [r3, #0]
			bat_chr3[1] = io_str[k+9];
 800581a:	4b38      	ldr	r3, [pc, #224]	; (80058fc <Bat_check_func+0x1a4>)
 800581c:	881b      	ldrh	r3, [r3, #0]
 800581e:	3309      	adds	r3, #9
 8005820:	4a37      	ldr	r2, [pc, #220]	; (8005900 <Bat_check_func+0x1a8>)
 8005822:	5cd2      	ldrb	r2, [r2, r3]
 8005824:	4b3b      	ldr	r3, [pc, #236]	; (8005914 <Bat_check_func+0x1bc>)
 8005826:	705a      	strb	r2, [r3, #1]
			bat_chr3[2] = io_str[k+10];
 8005828:	4b34      	ldr	r3, [pc, #208]	; (80058fc <Bat_check_func+0x1a4>)
 800582a:	881b      	ldrh	r3, [r3, #0]
 800582c:	330a      	adds	r3, #10
 800582e:	4a34      	ldr	r2, [pc, #208]	; (8005900 <Bat_check_func+0x1a8>)
 8005830:	5cd2      	ldrb	r2, [r2, r3]
 8005832:	4b38      	ldr	r3, [pc, #224]	; (8005914 <Bat_check_func+0x1bc>)
 8005834:	709a      	strb	r2, [r3, #2]
			//strncpy(bat_chr3,io_str+k+8,3);
			//if (strcmp(bat_chr3, "100") == 0){
			if ((bat_chr3[0] == '1') && (bat_chr3[1] == '0') && (bat_chr3[2] == '0')){
 8005836:	4b37      	ldr	r3, [pc, #220]	; (8005914 <Bat_check_func+0x1bc>)
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	2b31      	cmp	r3, #49	; 0x31
 800583c:	d10b      	bne.n	8005856 <Bat_check_func+0xfe>
 800583e:	4b35      	ldr	r3, [pc, #212]	; (8005914 <Bat_check_func+0x1bc>)
 8005840:	785b      	ldrb	r3, [r3, #1]
 8005842:	2b30      	cmp	r3, #48	; 0x30
 8005844:	d107      	bne.n	8005856 <Bat_check_func+0xfe>
 8005846:	4b33      	ldr	r3, [pc, #204]	; (8005914 <Bat_check_func+0x1bc>)
 8005848:	789b      	ldrb	r3, [r3, #2]
 800584a:	2b30      	cmp	r3, #48	; 0x30
 800584c:	d103      	bne.n	8005856 <Bat_check_func+0xfe>
				Bat_val = 100;
 800584e:	4b32      	ldr	r3, [pc, #200]	; (8005918 <Bat_check_func+0x1c0>)
 8005850:	2264      	movs	r2, #100	; 0x64
 8005852:	701a      	strb	r2, [r3, #0]
 8005854:	e014      	b.n	8005880 <Bat_check_func+0x128>
			}
			else{
				bat_chr[0] = io_str[k+8];
 8005856:	4b29      	ldr	r3, [pc, #164]	; (80058fc <Bat_check_func+0x1a4>)
 8005858:	881b      	ldrh	r3, [r3, #0]
 800585a:	3308      	adds	r3, #8
 800585c:	4a28      	ldr	r2, [pc, #160]	; (8005900 <Bat_check_func+0x1a8>)
 800585e:	5cd2      	ldrb	r2, [r2, r3]
 8005860:	4b2b      	ldr	r3, [pc, #172]	; (8005910 <Bat_check_func+0x1b8>)
 8005862:	701a      	strb	r2, [r3, #0]
				bat_chr[1] = io_str[k+9];
 8005864:	4b25      	ldr	r3, [pc, #148]	; (80058fc <Bat_check_func+0x1a4>)
 8005866:	881b      	ldrh	r3, [r3, #0]
 8005868:	3309      	adds	r3, #9
 800586a:	4a25      	ldr	r2, [pc, #148]	; (8005900 <Bat_check_func+0x1a8>)
 800586c:	5cd2      	ldrb	r2, [r2, r3]
 800586e:	4b28      	ldr	r3, [pc, #160]	; (8005910 <Bat_check_func+0x1b8>)
 8005870:	705a      	strb	r2, [r3, #1]
				//strncpy(bat_chr,io_str+k+8,2);
				Bat_val = atoi(bat_chr);
 8005872:	4827      	ldr	r0, [pc, #156]	; (8005910 <Bat_check_func+0x1b8>)
 8005874:	f001 f81d 	bl	80068b2 <atoi>
 8005878:	4603      	mov	r3, r0
 800587a:	b2da      	uxtb	r2, r3
 800587c:	4b26      	ldr	r3, [pc, #152]	; (8005918 <Bat_check_func+0x1c0>)
 800587e:	701a      	strb	r2, [r3, #0]
			}
			if (Bat_val > 31){
 8005880:	4b25      	ldr	r3, [pc, #148]	; (8005918 <Bat_check_func+0x1c0>)
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	2b1f      	cmp	r3, #31
 8005886:	d902      	bls.n	800588e <Bat_check_func+0x136>
				BatLowVal = 31;
 8005888:	4b25      	ldr	r3, [pc, #148]	; (8005920 <Bat_check_func+0x1c8>)
 800588a:	221f      	movs	r2, #31
 800588c:	701a      	strb	r2, [r3, #0]
			}
			if (Bat_val < BatLowVal){
 800588e:	4b22      	ldr	r3, [pc, #136]	; (8005918 <Bat_check_func+0x1c0>)
 8005890:	781a      	ldrb	r2, [r3, #0]
 8005892:	4b23      	ldr	r3, [pc, #140]	; (8005920 <Bat_check_func+0x1c8>)
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	429a      	cmp	r2, r3
 8005898:	d216      	bcs.n	80058c8 <Bat_check_func+0x170>
				if (BatLowVal > 10){
 800589a:	4b21      	ldr	r3, [pc, #132]	; (8005920 <Bat_check_func+0x1c8>)
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	2b0a      	cmp	r3, #10
 80058a0:	d912      	bls.n	80058c8 <Bat_check_func+0x170>
					BatLowVal = BatLowVal - 10;
 80058a2:	4b1f      	ldr	r3, [pc, #124]	; (8005920 <Bat_check_func+0x1c8>)
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	3b0a      	subs	r3, #10
 80058a8:	b2da      	uxtb	r2, r3
 80058aa:	4b1d      	ldr	r3, [pc, #116]	; (8005920 <Bat_check_func+0x1c8>)
 80058ac:	701a      	strb	r2, [r3, #0]
					sending_sms_cmd = 1;
 80058ae:	4b1d      	ldr	r3, [pc, #116]	; (8005924 <Bat_check_func+0x1cc>)
 80058b0:	2201      	movs	r2, #1
 80058b2:	701a      	strb	r2, [r3, #0]
					sending_sms_str[0] = '\0';
 80058b4:	4b1c      	ldr	r3, [pc, #112]	; (8005928 <Bat_check_func+0x1d0>)
 80058b6:	2200      	movs	r2, #0
 80058b8:	701a      	strb	r2, [r3, #0]
					sprintf(sending_sms_str,"Battery Low: %d%%", Bat_val);
 80058ba:	4b17      	ldr	r3, [pc, #92]	; (8005918 <Bat_check_func+0x1c0>)
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	461a      	mov	r2, r3
 80058c0:	491a      	ldr	r1, [pc, #104]	; (800592c <Bat_check_func+0x1d4>)
 80058c2:	4819      	ldr	r0, [pc, #100]	; (8005928 <Bat_check_func+0x1d0>)
 80058c4:	f001 f82c 	bl	8006920 <siprintf>
	for (k = 0; k < 30; k++){
 80058c8:	4b0c      	ldr	r3, [pc, #48]	; (80058fc <Bat_check_func+0x1a4>)
 80058ca:	881b      	ldrh	r3, [r3, #0]
 80058cc:	3301      	adds	r3, #1
 80058ce:	b29a      	uxth	r2, r3
 80058d0:	4b0a      	ldr	r3, [pc, #40]	; (80058fc <Bat_check_func+0x1a4>)
 80058d2:	801a      	strh	r2, [r3, #0]
 80058d4:	4b09      	ldr	r3, [pc, #36]	; (80058fc <Bat_check_func+0x1a4>)
 80058d6:	881b      	ldrh	r3, [r3, #0]
 80058d8:	2b1d      	cmp	r3, #29
 80058da:	d980      	bls.n	80057de <Bat_check_func+0x86>
				}
			}
		}
	}
	if ((Bat_val < 3) || (SIM_failed_response == 1)){
 80058dc:	4b0e      	ldr	r3, [pc, #56]	; (8005918 <Bat_check_func+0x1c0>)
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d903      	bls.n	80058ec <Bat_check_func+0x194>
 80058e4:	4b08      	ldr	r3, [pc, #32]	; (8005908 <Bat_check_func+0x1b0>)
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d101      	bne.n	80058f0 <Bat_check_func+0x198>
		NVIC_SystemReset();
 80058ec:	f7ff f9d0 	bl	8004c90 <__NVIC_SystemReset>
	}
}
 80058f0:	bf00      	nop
 80058f2:	bd80      	pop	{r7, pc}
 80058f4:	20000384 	.word	0x20000384
 80058f8:	0800746c 	.word	0x0800746c
 80058fc:	20000380 	.word	0x20000380
 8005900:	20000470 	.word	0x20000470
 8005904:	20000678 	.word	0x20000678
 8005908:	200005fb 	.word	0x200005fb
 800590c:	20000588 	.word	0x20000588
 8005910:	20000594 	.word	0x20000594
 8005914:	20000598 	.word	0x20000598
 8005918:	200005fa 	.word	0x200005fa
 800591c:	08007474 	.word	0x08007474
 8005920:	20000107 	.word	0x20000107
 8005924:	200005fd 	.word	0x200005fd
 8005928:	2000059c 	.word	0x2000059c
 800592c:	08007480 	.word	0x08007480

08005930 <Del_all_sms>:

//////////////////////
void	Del_all_sms(void){
 8005930:	b5b0      	push	{r4, r5, r7, lr}
 8005932:	af00      	add	r7, sp, #0
	LED2_GPIO_Port -> BSRR = LED2_Pin;
 8005934:	4b12      	ldr	r3, [pc, #72]	; (8005980 <Del_all_sms+0x50>)
 8005936:	2220      	movs	r2, #32
 8005938:	611a      	str	r2, [r3, #16]
	HAL_Delay(200);
 800593a:	20c8      	movs	r0, #200	; 0xc8
 800593c:	f7fa fc7a 	bl	8000234 <HAL_Delay>
	send_str[0] = '\0';
 8005940:	4b10      	ldr	r3, [pc, #64]	; (8005984 <Del_all_sms+0x54>)
 8005942:	2200      	movs	r2, #0
 8005944:	701a      	strb	r2, [r3, #0]
	sprintf(send_str,"AT+CMGDA=\"DEL ALL\"\r");
 8005946:	4a0f      	ldr	r2, [pc, #60]	; (8005984 <Del_all_sms+0x54>)
 8005948:	4b0f      	ldr	r3, [pc, #60]	; (8005988 <Del_all_sms+0x58>)
 800594a:	4614      	mov	r4, r2
 800594c:	461d      	mov	r5, r3
 800594e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005950:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005952:	682b      	ldr	r3, [r5, #0]
 8005954:	6023      	str	r3, [r4, #0]
	HAL_UART_Transmit(&huart3,(unsigned char *)send_str,strlen(send_str),1000);
 8005956:	480b      	ldr	r0, [pc, #44]	; (8005984 <Del_all_sms+0x54>)
 8005958:	f7fa fc02 	bl	8000160 <strlen>
 800595c:	4603      	mov	r3, r0
 800595e:	b29a      	uxth	r2, r3
 8005960:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005964:	4907      	ldr	r1, [pc, #28]	; (8005984 <Del_all_sms+0x54>)
 8005966:	4809      	ldr	r0, [pc, #36]	; (800598c <Del_all_sms+0x5c>)
 8005968:	f7fc fb0b 	bl	8001f82 <HAL_UART_Transmit>
	HAL_Delay(2000);
 800596c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005970:	f7fa fc60 	bl	8000234 <HAL_Delay>
	LED2_GPIO_Port -> BRR = LED2_Pin;
 8005974:	4b02      	ldr	r3, [pc, #8]	; (8005980 <Del_all_sms+0x50>)
 8005976:	2220      	movs	r2, #32
 8005978:	615a      	str	r2, [r3, #20]
}
 800597a:	bf00      	nop
 800597c:	bdb0      	pop	{r4, r5, r7, pc}
 800597e:	bf00      	nop
 8005980:	40010c00 	.word	0x40010c00
 8005984:	200003c8 	.word	0x200003c8
 8005988:	08007354 	.word	0x08007354
 800598c:	20000678 	.word	0x20000678

08005990 <main>:
//////////////////////
int main(void)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b082      	sub	sp, #8
 8005994:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8005996:	f7fa fbeb 	bl	8000170 <HAL_Init>
	SystemClock_Config();
 800599a:	f000 f91d 	bl	8005bd8 <SystemClock_Config>
	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800599e:	f000 f99f 	bl	8005ce0 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 80059a2:	f000 f973 	bl	8005c8c <MX_USART3_UART_Init>
	MX_USB_DEVICE_Init();
 80059a6:	f000 fb61 	bl	800606c <MX_USB_DEVICE_Init>
	HAL_Delay(10);
 80059aa:	200a      	movs	r0, #10
 80059ac:	f7fa fc42 	bl	8000234 <HAL_Delay>
	Flag_end_Transaction = 0;
 80059b0:	4b72      	ldr	r3, [pc, #456]	; (8005b7c <main+0x1ec>)
 80059b2:	2200      	movs	r2, #0
 80059b4:	801a      	strh	r2, [r3, #0]
	Flag_Rcvd_Data_HID = 0;
 80059b6:	4b72      	ldr	r3, [pc, #456]	; (8005b80 <main+0x1f0>)
 80059b8:	2200      	movs	r2, #0
 80059ba:	701a      	strb	r2, [r3, #0]
	Index = 0;
 80059bc:	4b71      	ldr	r3, [pc, #452]	; (8005b84 <main+0x1f4>)
 80059be:	2200      	movs	r2, #0
 80059c0:	801a      	strh	r2, [r3, #0]
	//k = 0;
	verifier = 0;
 80059c2:	4b71      	ldr	r3, [pc, #452]	; (8005b88 <main+0x1f8>)
 80059c4:	2200      	movs	r2, #0
 80059c6:	801a      	strh	r2, [r3, #0]
	HostMsgVerified = 0;
 80059c8:	4b70      	ldr	r3, [pc, #448]	; (8005b8c <main+0x1fc>)
 80059ca:	2200      	movs	r2, #0
 80059cc:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(SIM_RST_GPIO_Port, SIM_RST_Pin, GPIO_PIN_RESET);
 80059ce:	2200      	movs	r2, #0
 80059d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80059d4:	486e      	ldr	r0, [pc, #440]	; (8005b90 <main+0x200>)
 80059d6:	f7fa fece 	bl	8000776 <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 80059da:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80059de:	f7fa fc29 	bl	8000234 <HAL_Delay>
	HAL_GPIO_WritePin(SIM_RST_GPIO_Port, SIM_RST_Pin, GPIO_PIN_SET);
 80059e2:	2201      	movs	r2, #1
 80059e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80059e8:	4869      	ldr	r0, [pc, #420]	; (8005b90 <main+0x200>)
 80059ea:	f7fa fec4 	bl	8000776 <HAL_GPIO_WritePin>
	Initialize_SIM800();
 80059ee:	f7ff f963 	bl	8004cb8 <Initialize_SIM800>
//
	HAL_Delay(2000);
 80059f2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80059f6:	f7fa fc1d 	bl	8000234 <HAL_Delay>
	Bat_check_func();
 80059fa:	f7ff fead 	bl	8005758 <Bat_check_func>
	sending_sms_cmd = 1;
 80059fe:	4b65      	ldr	r3, [pc, #404]	; (8005b94 <main+0x204>)
 8005a00:	2201      	movs	r2, #1
 8005a02:	701a      	strb	r2, [r3, #0]
	sending_sms_str[0] = '\0';
 8005a04:	4b64      	ldr	r3, [pc, #400]	; (8005b98 <main+0x208>)
 8005a06:	2200      	movs	r2, #0
 8005a08:	701a      	strb	r2, [r3, #0]
	sprintf(sending_sms_str,"Power up \nBat: %d%%", Bat_val);
 8005a0a:	4b64      	ldr	r3, [pc, #400]	; (8005b9c <main+0x20c>)
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	461a      	mov	r2, r3
 8005a10:	4963      	ldr	r1, [pc, #396]	; (8005ba0 <main+0x210>)
 8005a12:	4861      	ldr	r0, [pc, #388]	; (8005b98 <main+0x208>)
 8005a14:	f000 ff84 	bl	8006920 <siprintf>

	while (1)
  {
		if (Flag_Rcvd_Data_HID == 1)
 8005a18:	4b59      	ldr	r3, [pc, #356]	; (8005b80 <main+0x1f0>)
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d159      	bne.n	8005ad6 <main+0x146>
		{
			Flag_Rcvd_Data_HID = 0;
 8005a22:	4b57      	ldr	r3, [pc, #348]	; (8005b80 <main+0x1f0>)
 8005a24:	2200      	movs	r2, #0
 8005a26:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 64; i++){
 8005a28:	2300      	movs	r3, #0
 8005a2a:	607b      	str	r3, [r7, #4]
 8005a2c:	e00b      	b.n	8005a46 <main+0xb6>
				tmp_str[i] = USB_RX_Buffer[i];
 8005a2e:	4a5d      	ldr	r2, [pc, #372]	; (8005ba4 <main+0x214>)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	4413      	add	r3, r2
 8005a34:	7819      	ldrb	r1, [r3, #0]
 8005a36:	4a5c      	ldr	r2, [pc, #368]	; (8005ba8 <main+0x218>)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4413      	add	r3, r2
 8005a3c:	460a      	mov	r2, r1
 8005a3e:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 64; i++){
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	3301      	adds	r3, #1
 8005a44:	607b      	str	r3, [r7, #4]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2b3f      	cmp	r3, #63	; 0x3f
 8005a4a:	ddf0      	ble.n	8005a2e <main+0x9e>
			}
			for (k=0; k<128; k++){io_str[k] = '\0';}
 8005a4c:	4b57      	ldr	r3, [pc, #348]	; (8005bac <main+0x21c>)
 8005a4e:	2200      	movs	r2, #0
 8005a50:	801a      	strh	r2, [r3, #0]
 8005a52:	e00b      	b.n	8005a6c <main+0xdc>
 8005a54:	4b55      	ldr	r3, [pc, #340]	; (8005bac <main+0x21c>)
 8005a56:	881b      	ldrh	r3, [r3, #0]
 8005a58:	461a      	mov	r2, r3
 8005a5a:	4b55      	ldr	r3, [pc, #340]	; (8005bb0 <main+0x220>)
 8005a5c:	2100      	movs	r1, #0
 8005a5e:	5499      	strb	r1, [r3, r2]
 8005a60:	4b52      	ldr	r3, [pc, #328]	; (8005bac <main+0x21c>)
 8005a62:	881b      	ldrh	r3, [r3, #0]
 8005a64:	3301      	adds	r3, #1
 8005a66:	b29a      	uxth	r2, r3
 8005a68:	4b50      	ldr	r3, [pc, #320]	; (8005bac <main+0x21c>)
 8005a6a:	801a      	strh	r2, [r3, #0]
 8005a6c:	4b4f      	ldr	r3, [pc, #316]	; (8005bac <main+0x21c>)
 8005a6e:	881b      	ldrh	r3, [r3, #0]
 8005a70:	2b7f      	cmp	r3, #127	; 0x7f
 8005a72:	d9ef      	bls.n	8005a54 <main+0xc4>
			HAL_UART_Transmit(&huart3,(unsigned char *)tmp_str,strlen(tmp_str),2000);
 8005a74:	484c      	ldr	r0, [pc, #304]	; (8005ba8 <main+0x218>)
 8005a76:	f7fa fb73 	bl	8000160 <strlen>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	b29a      	uxth	r2, r3
 8005a7e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8005a82:	4949      	ldr	r1, [pc, #292]	; (8005ba8 <main+0x218>)
 8005a84:	484b      	ldr	r0, [pc, #300]	; (8005bb4 <main+0x224>)
 8005a86:	f7fc fa7c 	bl	8001f82 <HAL_UART_Transmit>
			CR
 8005a8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005a8e:	2201      	movs	r2, #1
 8005a90:	4949      	ldr	r1, [pc, #292]	; (8005bb8 <main+0x228>)
 8005a92:	4848      	ldr	r0, [pc, #288]	; (8005bb4 <main+0x224>)
 8005a94:	f7fc fa75 	bl	8001f82 <HAL_UART_Transmit>
			HAL_UART_Receive(&huart3,(unsigned char *)io_str, 128, 2000);
 8005a98:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8005a9c:	2280      	movs	r2, #128	; 0x80
 8005a9e:	4944      	ldr	r1, [pc, #272]	; (8005bb0 <main+0x220>)
 8005aa0:	4844      	ldr	r0, [pc, #272]	; (8005bb4 <main+0x224>)
 8005aa2:	f7fc fb07 	bl	80020b4 <HAL_UART_Receive>
			for (uint8_t i = 0; i < 64; i++)
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	70fb      	strb	r3, [r7, #3]
 8005aaa:	e008      	b.n	8005abe <main+0x12e>
			{
				USB_TX_Buffer[i] = io_str[i]; // USB_RX_Buffer[i] + 5;
 8005aac:	78fa      	ldrb	r2, [r7, #3]
 8005aae:	78fb      	ldrb	r3, [r7, #3]
 8005ab0:	493f      	ldr	r1, [pc, #252]	; (8005bb0 <main+0x220>)
 8005ab2:	5c89      	ldrb	r1, [r1, r2]
 8005ab4:	4a41      	ldr	r2, [pc, #260]	; (8005bbc <main+0x22c>)
 8005ab6:	54d1      	strb	r1, [r2, r3]
			for (uint8_t i = 0; i < 64; i++)
 8005ab8:	78fb      	ldrb	r3, [r7, #3]
 8005aba:	3301      	adds	r3, #1
 8005abc:	70fb      	strb	r3, [r7, #3]
 8005abe:	78fb      	ldrb	r3, [r7, #3]
 8005ac0:	2b3f      	cmp	r3, #63	; 0x3f
 8005ac2:	d9f3      	bls.n	8005aac <main+0x11c>
				//USB_TX_Buffer[i] = tmp_str[i]; // USB_RX_Buffer[i] + 5;
			}
			USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS,USB_TX_Buffer,64);
 8005ac4:	2240      	movs	r2, #64	; 0x40
 8005ac6:	493d      	ldr	r1, [pc, #244]	; (8005bbc <main+0x22c>)
 8005ac8:	483d      	ldr	r0, [pc, #244]	; (8005bc0 <main+0x230>)
 8005aca:	f7fd ff87 	bl	80039dc <USBD_CUSTOM_HID_SendReport>
			HAL_Delay(100);
 8005ace:	2064      	movs	r0, #100	; 0x64
 8005ad0:	f7fa fbb0 	bl	8000234 <HAL_Delay>
 8005ad4:	e7a0      	b.n	8005a18 <main+0x88>
		}

		else{
			Checking_inputs();
 8005ad6:	f7ff f987 	bl	8004de8 <Checking_inputs>
			check_for_incoming_sms();
 8005ada:	f7ff fb9f 	bl	800521c <check_for_incoming_sms>
			if (sending_sms_cmd == 1){
 8005ade:	4b2d      	ldr	r3, [pc, #180]	; (8005b94 <main+0x204>)
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d106      	bne.n	8005af4 <main+0x164>
				Checking_inputs();
 8005ae6:	f7ff f97f 	bl	8004de8 <Checking_inputs>
				sending_sms_func();
 8005aea:	f7ff faf3 	bl	80050d4 <sending_sms_func>
				sending_sms_cmd = 0;
 8005aee:	4b29      	ldr	r3, [pc, #164]	; (8005b94 <main+0x204>)
 8005af0:	2200      	movs	r2, #0
 8005af2:	701a      	strb	r2, [r3, #0]
			}
			if (calling_cmd == 1){
 8005af4:	4b33      	ldr	r3, [pc, #204]	; (8005bc4 <main+0x234>)
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d104      	bne.n	8005b06 <main+0x176>
				calling_func();
 8005afc:	f7ff fb4c 	bl	8005198 <calling_func>
				calling_cmd = 0;
 8005b00:	4b30      	ldr	r3, [pc, #192]	; (8005bc4 <main+0x234>)
 8005b02:	2200      	movs	r2, #0
 8005b04:	701a      	strb	r2, [r3, #0]
			}

			//
			Del_counter++;
 8005b06:	4b30      	ldr	r3, [pc, #192]	; (8005bc8 <main+0x238>)
 8005b08:	881b      	ldrh	r3, [r3, #0]
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	b29a      	uxth	r2, r3
 8005b0e:	4b2e      	ldr	r3, [pc, #184]	; (8005bc8 <main+0x238>)
 8005b10:	801a      	strh	r2, [r3, #0]
			if (Del_counter > 100){
 8005b12:	4b2d      	ldr	r3, [pc, #180]	; (8005bc8 <main+0x238>)
 8005b14:	881b      	ldrh	r3, [r3, #0]
 8005b16:	2b64      	cmp	r3, #100	; 0x64
 8005b18:	d905      	bls.n	8005b26 <main+0x196>
				Del_counter = 0;
 8005b1a:	4b2b      	ldr	r3, [pc, #172]	; (8005bc8 <main+0x238>)
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	801a      	strh	r2, [r3, #0]
				Del_flag = 1;
 8005b20:	4b2a      	ldr	r3, [pc, #168]	; (8005bcc <main+0x23c>)
 8005b22:	2201      	movs	r2, #1
 8005b24:	701a      	strb	r2, [r3, #0]
			}
			Bat_chk_counter++;
 8005b26:	4b2a      	ldr	r3, [pc, #168]	; (8005bd0 <main+0x240>)
 8005b28:	881b      	ldrh	r3, [r3, #0]
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	b29a      	uxth	r2, r3
 8005b2e:	4b28      	ldr	r3, [pc, #160]	; (8005bd0 <main+0x240>)
 8005b30:	801a      	strh	r2, [r3, #0]
			if (Bat_chk_counter > 130){
 8005b32:	4b27      	ldr	r3, [pc, #156]	; (8005bd0 <main+0x240>)
 8005b34:	881b      	ldrh	r3, [r3, #0]
 8005b36:	2b82      	cmp	r3, #130	; 0x82
 8005b38:	d905      	bls.n	8005b46 <main+0x1b6>
				Bat_chk_counter = 0;
 8005b3a:	4b25      	ldr	r3, [pc, #148]	; (8005bd0 <main+0x240>)
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	801a      	strh	r2, [r3, #0]
				Bat_check = 1;
 8005b40:	4b24      	ldr	r3, [pc, #144]	; (8005bd4 <main+0x244>)
 8005b42:	2201      	movs	r2, #1
 8005b44:	701a      	strb	r2, [r3, #0]
			}
			//
			if (Bat_check == 1){
 8005b46:	4b23      	ldr	r3, [pc, #140]	; (8005bd4 <main+0x244>)
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d108      	bne.n	8005b60 <main+0x1d0>
				HAL_Delay(1000);
 8005b4e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005b52:	f7fa fb6f 	bl	8000234 <HAL_Delay>
				Bat_check_func();
 8005b56:	f7ff fdff 	bl	8005758 <Bat_check_func>
				Bat_check = 0;
 8005b5a:	4b1e      	ldr	r3, [pc, #120]	; (8005bd4 <main+0x244>)
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	701a      	strb	r2, [r3, #0]
			}
			/////////////////
			if (Del_flag == 1){
 8005b60:	4b1a      	ldr	r3, [pc, #104]	; (8005bcc <main+0x23c>)
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	f47f af57 	bne.w	8005a18 <main+0x88>
				Checking_inputs();
 8005b6a:	f7ff f93d 	bl	8004de8 <Checking_inputs>
				Del_all_sms();
 8005b6e:	f7ff fedf 	bl	8005930 <Del_all_sms>
				Del_flag = 0;
 8005b72:	4b16      	ldr	r3, [pc, #88]	; (8005bcc <main+0x23c>)
 8005b74:	2200      	movs	r2, #0
 8005b76:	701a      	strb	r2, [r3, #0]
		if (Flag_Rcvd_Data_HID == 1)
 8005b78:	e74e      	b.n	8005a18 <main+0x88>
 8005b7a:	bf00      	nop
 8005b7c:	200006b8 	.word	0x200006b8
 8005b80:	2000037d 	.word	0x2000037d
 8005b84:	2000037e 	.word	0x2000037e
 8005b88:	20000382 	.word	0x20000382
 8005b8c:	200006fc 	.word	0x200006fc
 8005b90:	40010800 	.word	0x40010800
 8005b94:	200005fd 	.word	0x200005fd
 8005b98:	2000059c 	.word	0x2000059c
 8005b9c:	200005fa 	.word	0x200005fa
 8005ba0:	08007494 	.word	0x08007494
 8005ba4:	200006bc 	.word	0x200006bc
 8005ba8:	20000384 	.word	0x20000384
 8005bac:	20000380 	.word	0x20000380
 8005bb0:	20000470 	.word	0x20000470
 8005bb4:	20000678 	.word	0x20000678
 8005bb8:	200000f8 	.word	0x200000f8
 8005bbc:	20000700 	.word	0x20000700
 8005bc0:	20000808 	.word	0x20000808
 8005bc4:	200005fe 	.word	0x200005fe
 8005bc8:	200005f6 	.word	0x200005f6
 8005bcc:	200005f3 	.word	0x200005f3
 8005bd0:	200005f8 	.word	0x200005f8
 8005bd4:	200005fc 	.word	0x200005fc

08005bd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b094      	sub	sp, #80	; 0x50
 8005bdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005bde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005be2:	2228      	movs	r2, #40	; 0x28
 8005be4:	2100      	movs	r1, #0
 8005be6:	4618      	mov	r0, r3
 8005be8:	f000 fe92 	bl	8006910 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005bec:	f107 0314 	add.w	r3, r7, #20
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	601a      	str	r2, [r3, #0]
 8005bf4:	605a      	str	r2, [r3, #4]
 8005bf6:	609a      	str	r2, [r3, #8]
 8005bf8:	60da      	str	r2, [r3, #12]
 8005bfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005bfc:	1d3b      	adds	r3, r7, #4
 8005bfe:	2200      	movs	r2, #0
 8005c00:	601a      	str	r2, [r3, #0]
 8005c02:	605a      	str	r2, [r3, #4]
 8005c04:	609a      	str	r2, [r3, #8]
 8005c06:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;	//RCC_HSE_BYPASS; //RCC_HSE_ON;
 8005c0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005c10:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8005c12:	2300      	movs	r3, #0
 8005c14:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005c16:	2301      	movs	r3, #1
 8005c18:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005c1a:	2302      	movs	r3, #2
 8005c1c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005c1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005c22:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8005c24:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005c28:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005c2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f7fb fc86 	bl	8001540 <HAL_RCC_OscConfig>
 8005c34:	4603      	mov	r3, r0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d001      	beq.n	8005c3e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8005c3a:	f000 f903 	bl	8005e44 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005c3e:	230f      	movs	r3, #15
 8005c40:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005c42:	2302      	movs	r3, #2
 8005c44:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005c46:	2300      	movs	r3, #0
 8005c48:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005c4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c4e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005c50:	2300      	movs	r3, #0
 8005c52:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005c54:	f107 0314 	add.w	r3, r7, #20
 8005c58:	2102      	movs	r1, #2
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f7fb fef0 	bl	8001a40 <HAL_RCC_ClockConfig>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d001      	beq.n	8005c6a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8005c66:	f000 f8ed 	bl	8005e44 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8005c6a:	2310      	movs	r3, #16
 8005c6c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005c72:	1d3b      	adds	r3, r7, #4
 8005c74:	4618      	mov	r0, r3
 8005c76:	f7fc f881 	bl	8001d7c <HAL_RCCEx_PeriphCLKConfig>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d001      	beq.n	8005c84 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8005c80:	f000 f8e0 	bl	8005e44 <Error_Handler>
  }
}
 8005c84:	bf00      	nop
 8005c86:	3750      	adds	r7, #80	; 0x50
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	af00      	add	r7, sp, #0
  huart3.Instance = USART3;
 8005c90:	4b11      	ldr	r3, [pc, #68]	; (8005cd8 <MX_USART3_UART_Init+0x4c>)
 8005c92:	4a12      	ldr	r2, [pc, #72]	; (8005cdc <MX_USART3_UART_Init+0x50>)
 8005c94:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8005c96:	4b10      	ldr	r3, [pc, #64]	; (8005cd8 <MX_USART3_UART_Init+0x4c>)
 8005c98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005c9c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005c9e:	4b0e      	ldr	r3, [pc, #56]	; (8005cd8 <MX_USART3_UART_Init+0x4c>)
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005ca4:	4b0c      	ldr	r3, [pc, #48]	; (8005cd8 <MX_USART3_UART_Init+0x4c>)
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005caa:	4b0b      	ldr	r3, [pc, #44]	; (8005cd8 <MX_USART3_UART_Init+0x4c>)
 8005cac:	2200      	movs	r2, #0
 8005cae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005cb0:	4b09      	ldr	r3, [pc, #36]	; (8005cd8 <MX_USART3_UART_Init+0x4c>)
 8005cb2:	220c      	movs	r2, #12
 8005cb4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005cb6:	4b08      	ldr	r3, [pc, #32]	; (8005cd8 <MX_USART3_UART_Init+0x4c>)
 8005cb8:	2200      	movs	r2, #0
 8005cba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005cbc:	4b06      	ldr	r3, [pc, #24]	; (8005cd8 <MX_USART3_UART_Init+0x4c>)
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005cc2:	4805      	ldr	r0, [pc, #20]	; (8005cd8 <MX_USART3_UART_Init+0x4c>)
 8005cc4:	f7fc f910 	bl	8001ee8 <HAL_UART_Init>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d001      	beq.n	8005cd2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8005cce:	f000 f8b9 	bl	8005e44 <Error_Handler>
  }
}
 8005cd2:	bf00      	nop
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	20000678 	.word	0x20000678
 8005cdc:	40004800 	.word	0x40004800

08005ce0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b088      	sub	sp, #32
 8005ce4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ce6:	f107 0310 	add.w	r3, r7, #16
 8005cea:	2200      	movs	r2, #0
 8005cec:	601a      	str	r2, [r3, #0]
 8005cee:	605a      	str	r2, [r3, #4]
 8005cf0:	609a      	str	r2, [r3, #8]
 8005cf2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005cf4:	4b4f      	ldr	r3, [pc, #316]	; (8005e34 <MX_GPIO_Init+0x154>)
 8005cf6:	699b      	ldr	r3, [r3, #24]
 8005cf8:	4a4e      	ldr	r2, [pc, #312]	; (8005e34 <MX_GPIO_Init+0x154>)
 8005cfa:	f043 0310 	orr.w	r3, r3, #16
 8005cfe:	6193      	str	r3, [r2, #24]
 8005d00:	4b4c      	ldr	r3, [pc, #304]	; (8005e34 <MX_GPIO_Init+0x154>)
 8005d02:	699b      	ldr	r3, [r3, #24]
 8005d04:	f003 0310 	and.w	r3, r3, #16
 8005d08:	60fb      	str	r3, [r7, #12]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005d0c:	4b49      	ldr	r3, [pc, #292]	; (8005e34 <MX_GPIO_Init+0x154>)
 8005d0e:	699b      	ldr	r3, [r3, #24]
 8005d10:	4a48      	ldr	r2, [pc, #288]	; (8005e34 <MX_GPIO_Init+0x154>)
 8005d12:	f043 0320 	orr.w	r3, r3, #32
 8005d16:	6193      	str	r3, [r2, #24]
 8005d18:	4b46      	ldr	r3, [pc, #280]	; (8005e34 <MX_GPIO_Init+0x154>)
 8005d1a:	699b      	ldr	r3, [r3, #24]
 8005d1c:	f003 0320 	and.w	r3, r3, #32
 8005d20:	60bb      	str	r3, [r7, #8]
 8005d22:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d24:	4b43      	ldr	r3, [pc, #268]	; (8005e34 <MX_GPIO_Init+0x154>)
 8005d26:	699b      	ldr	r3, [r3, #24]
 8005d28:	4a42      	ldr	r2, [pc, #264]	; (8005e34 <MX_GPIO_Init+0x154>)
 8005d2a:	f043 0304 	orr.w	r3, r3, #4
 8005d2e:	6193      	str	r3, [r2, #24]
 8005d30:	4b40      	ldr	r3, [pc, #256]	; (8005e34 <MX_GPIO_Init+0x154>)
 8005d32:	699b      	ldr	r3, [r3, #24]
 8005d34:	f003 0304 	and.w	r3, r3, #4
 8005d38:	607b      	str	r3, [r7, #4]
 8005d3a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d3c:	4b3d      	ldr	r3, [pc, #244]	; (8005e34 <MX_GPIO_Init+0x154>)
 8005d3e:	699b      	ldr	r3, [r3, #24]
 8005d40:	4a3c      	ldr	r2, [pc, #240]	; (8005e34 <MX_GPIO_Init+0x154>)
 8005d42:	f043 0308 	orr.w	r3, r3, #8
 8005d46:	6193      	str	r3, [r2, #24]
 8005d48:	4b3a      	ldr	r3, [pc, #232]	; (8005e34 <MX_GPIO_Init+0x154>)
 8005d4a:	699b      	ldr	r3, [r3, #24]
 8005d4c:	f003 0308 	and.w	r3, r3, #8
 8005d50:	603b      	str	r3, [r7, #0]
 8005d52:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SIM_RST_GPIO_Port, SIM_RST_Pin, GPIO_PIN_RESET);
 8005d54:	2200      	movs	r2, #0
 8005d56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005d5a:	4837      	ldr	r0, [pc, #220]	; (8005e38 <MX_GPIO_Init+0x158>)
 8005d5c:	f7fa fd0b 	bl	8000776 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8005d60:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8005d64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005d66:	2300      	movs	r3, #0
 8005d68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005d6e:	f107 0310 	add.w	r3, r7, #16
 8005d72:	4619      	mov	r1, r3
 8005d74:	4831      	ldr	r0, [pc, #196]	; (8005e3c <MX_GPIO_Init+0x15c>)
 8005d76:	f7fa fb8d 	bl	8000494 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 
                           PA4 PA5 PA6 PA7 
                           PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8005d7a:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8005d7e:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005d80:	2300      	movs	r3, #0
 8005d82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d84:	2300      	movs	r3, #0
 8005d86:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d88:	f107 0310 	add.w	r3, r7, #16
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	482a      	ldr	r0, [pc, #168]	; (8005e38 <MX_GPIO_Init+0x158>)
 8005d90:	f7fa fb80 	bl	8000494 <HAL_GPIO_Init>
  //
  /*Configure GPIO pin : LED2_Pin */
    GPIO_InitStruct.Pin = LED2_Pin;
 8005d94:	2320      	movs	r3, #32
 8005d96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005da0:	2302      	movs	r3, #2
 8005da2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8005da4:	f107 0310 	add.w	r3, r7, #16
 8005da8:	4619      	mov	r1, r3
 8005daa:	4825      	ldr	r0, [pc, #148]	; (8005e40 <MX_GPIO_Init+0x160>)
 8005dac:	f7fa fb72 	bl	8000494 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB12 
                           PB14 PB6
                           PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12 
 8005db0:	f245 03c7 	movw	r3, #20679	; 0x50c7
 8005db4:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_14|GPIO_PIN_6
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005db6:	2300      	movs	r3, #0
 8005db8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005dbe:	f107 0310 	add.w	r3, r7, #16
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	481e      	ldr	r0, [pc, #120]	; (8005e40 <MX_GPIO_Init+0x160>)
 8005dc6:	f7fa fb65 	bl	8000494 <HAL_GPIO_Init>
  //
  /*Configure GPIO pin : LED1_Pin */
    GPIO_InitStruct.Pin = LED1_Pin;
 8005dca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005dce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005dd8:	2302      	movs	r3, #2
 8005dda:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8005ddc:	f107 0310 	add.w	r3, r7, #16
 8005de0:	4619      	mov	r1, r3
 8005de2:	4817      	ldr	r0, [pc, #92]	; (8005e40 <MX_GPIO_Init+0x160>)
 8005de4:	f7fa fb56 	bl	8000494 <HAL_GPIO_Init>


  /*Configure GPIO pin : SIM_RST_Pin */
  GPIO_InitStruct.Pin = SIM_RST_Pin;
 8005de8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005dec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005dee:	2301      	movs	r3, #1
 8005df0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005df2:	2300      	movs	r3, #0
 8005df4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005df6:	2302      	movs	r3, #2
 8005df8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SIM_RST_GPIO_Port, &GPIO_InitStruct);
 8005dfa:	f107 0310 	add.w	r3, r7, #16
 8005dfe:	4619      	mov	r1, r3
 8005e00:	480d      	ldr	r0, [pc, #52]	; (8005e38 <MX_GPIO_Init+0x158>)
 8005e02:	f7fa fb47 	bl	8000494 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY0_Pin */
  GPIO_InitStruct.Pin = KEY0_Pin;
 8005e06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005e10:	2301      	movs	r3, #1
 8005e12:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY0_GPIO_Port, &GPIO_InitStruct);
 8005e14:	f107 0310 	add.w	r3, r7, #16
 8005e18:	4619      	mov	r1, r3
 8005e1a:	4809      	ldr	r0, [pc, #36]	; (8005e40 <MX_GPIO_Init+0x160>)
 8005e1c:	f7fa fb3a 	bl	8000494 <HAL_GPIO_Init>

  //
  HAL_GPIO_WritePin(SIM_RST_GPIO_Port, SIM_RST_Pin, GPIO_PIN_RESET);
 8005e20:	2200      	movs	r2, #0
 8005e22:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005e26:	4804      	ldr	r0, [pc, #16]	; (8005e38 <MX_GPIO_Init+0x158>)
 8005e28:	f7fa fca5 	bl	8000776 <HAL_GPIO_WritePin>

}
 8005e2c:	bf00      	nop
 8005e2e:	3720      	adds	r7, #32
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}
 8005e34:	40021000 	.word	0x40021000
 8005e38:	40010800 	.word	0x40010800
 8005e3c:	40011000 	.word	0x40011000
 8005e40:	40010c00 	.word	0x40010c00

08005e44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005e44:	b480      	push	{r7}
 8005e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005e48:	bf00      	nop
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bc80      	pop	{r7}
 8005e4e:	4770      	bx	lr

08005e50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b085      	sub	sp, #20
 8005e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005e56:	4b13      	ldr	r3, [pc, #76]	; (8005ea4 <HAL_MspInit+0x54>)
 8005e58:	699b      	ldr	r3, [r3, #24]
 8005e5a:	4a12      	ldr	r2, [pc, #72]	; (8005ea4 <HAL_MspInit+0x54>)
 8005e5c:	f043 0301 	orr.w	r3, r3, #1
 8005e60:	6193      	str	r3, [r2, #24]
 8005e62:	4b10      	ldr	r3, [pc, #64]	; (8005ea4 <HAL_MspInit+0x54>)
 8005e64:	699b      	ldr	r3, [r3, #24]
 8005e66:	f003 0301 	and.w	r3, r3, #1
 8005e6a:	60bb      	str	r3, [r7, #8]
 8005e6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005e6e:	4b0d      	ldr	r3, [pc, #52]	; (8005ea4 <HAL_MspInit+0x54>)
 8005e70:	69db      	ldr	r3, [r3, #28]
 8005e72:	4a0c      	ldr	r2, [pc, #48]	; (8005ea4 <HAL_MspInit+0x54>)
 8005e74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e78:	61d3      	str	r3, [r2, #28]
 8005e7a:	4b0a      	ldr	r3, [pc, #40]	; (8005ea4 <HAL_MspInit+0x54>)
 8005e7c:	69db      	ldr	r3, [r3, #28]
 8005e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e82:	607b      	str	r3, [r7, #4]
 8005e84:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** ENABLE: Full SWJ (JTAG-DP + SW-DP): Reset State 
  */
  __HAL_AFIO_REMAP_SWJ_ENABLE();
 8005e86:	4b08      	ldr	r3, [pc, #32]	; (8005ea8 <HAL_MspInit+0x58>)
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	60fb      	str	r3, [r7, #12]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005e92:	60fb      	str	r3, [r7, #12]
 8005e94:	4a04      	ldr	r2, [pc, #16]	; (8005ea8 <HAL_MspInit+0x58>)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005e9a:	bf00      	nop
 8005e9c:	3714      	adds	r7, #20
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bc80      	pop	{r7}
 8005ea2:	4770      	bx	lr
 8005ea4:	40021000 	.word	0x40021000
 8005ea8:	40010000 	.word	0x40010000

08005eac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b088      	sub	sp, #32
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005eb4:	f107 0310 	add.w	r3, r7, #16
 8005eb8:	2200      	movs	r2, #0
 8005eba:	601a      	str	r2, [r3, #0]
 8005ebc:	605a      	str	r2, [r3, #4]
 8005ebe:	609a      	str	r2, [r3, #8]
 8005ec0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a1c      	ldr	r2, [pc, #112]	; (8005f38 <HAL_UART_MspInit+0x8c>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d131      	bne.n	8005f30 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8005ecc:	4b1b      	ldr	r3, [pc, #108]	; (8005f3c <HAL_UART_MspInit+0x90>)
 8005ece:	69db      	ldr	r3, [r3, #28]
 8005ed0:	4a1a      	ldr	r2, [pc, #104]	; (8005f3c <HAL_UART_MspInit+0x90>)
 8005ed2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ed6:	61d3      	str	r3, [r2, #28]
 8005ed8:	4b18      	ldr	r3, [pc, #96]	; (8005f3c <HAL_UART_MspInit+0x90>)
 8005eda:	69db      	ldr	r3, [r3, #28]
 8005edc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ee0:	60fb      	str	r3, [r7, #12]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ee4:	4b15      	ldr	r3, [pc, #84]	; (8005f3c <HAL_UART_MspInit+0x90>)
 8005ee6:	699b      	ldr	r3, [r3, #24]
 8005ee8:	4a14      	ldr	r2, [pc, #80]	; (8005f3c <HAL_UART_MspInit+0x90>)
 8005eea:	f043 0308 	orr.w	r3, r3, #8
 8005eee:	6193      	str	r3, [r2, #24]
 8005ef0:	4b12      	ldr	r3, [pc, #72]	; (8005f3c <HAL_UART_MspInit+0x90>)
 8005ef2:	699b      	ldr	r3, [r3, #24]
 8005ef4:	f003 0308 	and.w	r3, r3, #8
 8005ef8:	60bb      	str	r3, [r7, #8]
 8005efa:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005efc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f00:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f02:	2302      	movs	r3, #2
 8005f04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005f06:	2303      	movs	r3, #3
 8005f08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f0a:	f107 0310 	add.w	r3, r7, #16
 8005f0e:	4619      	mov	r1, r3
 8005f10:	480b      	ldr	r0, [pc, #44]	; (8005f40 <HAL_UART_MspInit+0x94>)
 8005f12:	f7fa fabf 	bl	8000494 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8005f16:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005f1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f20:	2300      	movs	r3, #0
 8005f22:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f24:	f107 0310 	add.w	r3, r7, #16
 8005f28:	4619      	mov	r1, r3
 8005f2a:	4805      	ldr	r0, [pc, #20]	; (8005f40 <HAL_UART_MspInit+0x94>)
 8005f2c:	f7fa fab2 	bl	8000494 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005f30:	bf00      	nop
 8005f32:	3720      	adds	r7, #32
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}
 8005f38:	40004800 	.word	0x40004800
 8005f3c:	40021000 	.word	0x40021000
 8005f40:	40010c00 	.word	0x40010c00

08005f44 <NMI_Handler>:
}
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005f44:	b480      	push	{r7}
 8005f46:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005f48:	bf00      	nop
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bc80      	pop	{r7}
 8005f4e:	4770      	bx	lr

08005f50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005f50:	b480      	push	{r7}
 8005f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005f54:	e7fe      	b.n	8005f54 <HardFault_Handler+0x4>

08005f56 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005f56:	b480      	push	{r7}
 8005f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005f5a:	e7fe      	b.n	8005f5a <MemManage_Handler+0x4>

08005f5c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005f60:	e7fe      	b.n	8005f60 <BusFault_Handler+0x4>

08005f62 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005f62:	b480      	push	{r7}
 8005f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005f66:	e7fe      	b.n	8005f66 <UsageFault_Handler+0x4>

08005f68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005f6c:	bf00      	nop
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bc80      	pop	{r7}
 8005f72:	4770      	bx	lr

08005f74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005f74:	b480      	push	{r7}
 8005f76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005f78:	bf00      	nop
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bc80      	pop	{r7}
 8005f7e:	4770      	bx	lr

08005f80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005f80:	b480      	push	{r7}
 8005f82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005f84:	bf00      	nop
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bc80      	pop	{r7}
 8005f8a:	4770      	bx	lr

08005f8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005f90:	f7fa f934 	bl	80001fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005f94:	bf00      	nop
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8005f9c:	4802      	ldr	r0, [pc, #8]	; (8005fa8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8005f9e:	f7fa fd09 	bl	80009b4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8005fa2:	bf00      	nop
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	20000acc 	.word	0x20000acc

08005fac <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b084      	sub	sp, #16
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005fb4:	4b11      	ldr	r3, [pc, #68]	; (8005ffc <_sbrk+0x50>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d102      	bne.n	8005fc2 <_sbrk+0x16>
		heap_end = &end;
 8005fbc:	4b0f      	ldr	r3, [pc, #60]	; (8005ffc <_sbrk+0x50>)
 8005fbe:	4a10      	ldr	r2, [pc, #64]	; (8006000 <_sbrk+0x54>)
 8005fc0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005fc2:	4b0e      	ldr	r3, [pc, #56]	; (8005ffc <_sbrk+0x50>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005fc8:	4b0c      	ldr	r3, [pc, #48]	; (8005ffc <_sbrk+0x50>)
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4413      	add	r3, r2
 8005fd0:	466a      	mov	r2, sp
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d907      	bls.n	8005fe6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8005fd6:	f000 fc71 	bl	80068bc <__errno>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	230c      	movs	r3, #12
 8005fde:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8005fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8005fe4:	e006      	b.n	8005ff4 <_sbrk+0x48>
	}

	heap_end += incr;
 8005fe6:	4b05      	ldr	r3, [pc, #20]	; (8005ffc <_sbrk+0x50>)
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4413      	add	r3, r2
 8005fee:	4a03      	ldr	r2, [pc, #12]	; (8005ffc <_sbrk+0x50>)
 8005ff0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3710      	adds	r7, #16
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}
 8005ffc:	20000610 	.word	0x20000610
 8006000:	20000f40 	.word	0x20000f40

08006004 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006004:	b480      	push	{r7}
 8006006:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8006008:	4b15      	ldr	r3, [pc, #84]	; (8006060 <SystemInit+0x5c>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a14      	ldr	r2, [pc, #80]	; (8006060 <SystemInit+0x5c>)
 800600e:	f043 0301 	orr.w	r3, r3, #1
 8006012:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8006014:	4b12      	ldr	r3, [pc, #72]	; (8006060 <SystemInit+0x5c>)
 8006016:	685a      	ldr	r2, [r3, #4]
 8006018:	4911      	ldr	r1, [pc, #68]	; (8006060 <SystemInit+0x5c>)
 800601a:	4b12      	ldr	r3, [pc, #72]	; (8006064 <SystemInit+0x60>)
 800601c:	4013      	ands	r3, r2
 800601e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8006020:	4b0f      	ldr	r3, [pc, #60]	; (8006060 <SystemInit+0x5c>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a0e      	ldr	r2, [pc, #56]	; (8006060 <SystemInit+0x5c>)
 8006026:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800602a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800602e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006030:	4b0b      	ldr	r3, [pc, #44]	; (8006060 <SystemInit+0x5c>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a0a      	ldr	r2, [pc, #40]	; (8006060 <SystemInit+0x5c>)
 8006036:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800603a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800603c:	4b08      	ldr	r3, [pc, #32]	; (8006060 <SystemInit+0x5c>)
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	4a07      	ldr	r2, [pc, #28]	; (8006060 <SystemInit+0x5c>)
 8006042:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8006046:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8006048:	4b05      	ldr	r3, [pc, #20]	; (8006060 <SystemInit+0x5c>)
 800604a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800604e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8006050:	4b05      	ldr	r3, [pc, #20]	; (8006068 <SystemInit+0x64>)
 8006052:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006056:	609a      	str	r2, [r3, #8]
#endif 
}
 8006058:	bf00      	nop
 800605a:	46bd      	mov	sp, r7
 800605c:	bc80      	pop	{r7}
 800605e:	4770      	bx	lr
 8006060:	40021000 	.word	0x40021000
 8006064:	f8ff0000 	.word	0xf8ff0000
 8006068:	e000ed00 	.word	0xe000ed00

0800606c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006070:	2200      	movs	r2, #0
 8006072:	4912      	ldr	r1, [pc, #72]	; (80060bc <MX_USB_DEVICE_Init+0x50>)
 8006074:	4812      	ldr	r0, [pc, #72]	; (80060c0 <MX_USB_DEVICE_Init+0x54>)
 8006076:	f7fd fd7f 	bl	8003b78 <USBD_Init>
 800607a:	4603      	mov	r3, r0
 800607c:	2b00      	cmp	r3, #0
 800607e:	d001      	beq.n	8006084 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006080:	f7ff fee0 	bl	8005e44 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8006084:	490f      	ldr	r1, [pc, #60]	; (80060c4 <MX_USB_DEVICE_Init+0x58>)
 8006086:	480e      	ldr	r0, [pc, #56]	; (80060c0 <MX_USB_DEVICE_Init+0x54>)
 8006088:	f7fd fda1 	bl	8003bce <USBD_RegisterClass>
 800608c:	4603      	mov	r3, r0
 800608e:	2b00      	cmp	r3, #0
 8006090:	d001      	beq.n	8006096 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006092:	f7ff fed7 	bl	8005e44 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8006096:	490c      	ldr	r1, [pc, #48]	; (80060c8 <MX_USB_DEVICE_Init+0x5c>)
 8006098:	4809      	ldr	r0, [pc, #36]	; (80060c0 <MX_USB_DEVICE_Init+0x54>)
 800609a:	f7fd fd57 	bl	8003b4c <USBD_CUSTOM_HID_RegisterInterface>
 800609e:	4603      	mov	r3, r0
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d001      	beq.n	80060a8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80060a4:	f7ff fece 	bl	8005e44 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80060a8:	4805      	ldr	r0, [pc, #20]	; (80060c0 <MX_USB_DEVICE_Init+0x54>)
 80060aa:	f7fd fda9 	bl	8003c00 <USBD_Start>
 80060ae:	4603      	mov	r3, r0
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d001      	beq.n	80060b8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80060b4:	f7ff fec6 	bl	8005e44 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80060b8:	bf00      	nop
 80060ba:	bd80      	pop	{r7, pc}
 80060bc:	20000140 	.word	0x20000140
 80060c0:	20000808 	.word	0x20000808
 80060c4:	20000008 	.word	0x20000008
 80060c8:	20000130 	.word	0x20000130

080060cc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b084      	sub	sp, #16
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a0d      	ldr	r2, [pc, #52]	; (8006110 <HAL_PCD_MspInit+0x44>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d113      	bne.n	8006106 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80060de:	4b0d      	ldr	r3, [pc, #52]	; (8006114 <HAL_PCD_MspInit+0x48>)
 80060e0:	69db      	ldr	r3, [r3, #28]
 80060e2:	4a0c      	ldr	r2, [pc, #48]	; (8006114 <HAL_PCD_MspInit+0x48>)
 80060e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80060e8:	61d3      	str	r3, [r2, #28]
 80060ea:	4b0a      	ldr	r3, [pc, #40]	; (8006114 <HAL_PCD_MspInit+0x48>)
 80060ec:	69db      	ldr	r3, [r3, #28]
 80060ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80060f2:	60fb      	str	r3, [r7, #12]
 80060f4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80060f6:	2200      	movs	r2, #0
 80060f8:	2100      	movs	r1, #0
 80060fa:	2014      	movs	r0, #20
 80060fc:	f7fa f993 	bl	8000426 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8006100:	2014      	movs	r0, #20
 8006102:	f7fa f9ac 	bl	800045e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8006106:	bf00      	nop
 8006108:	3710      	adds	r7, #16
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
 800610e:	bf00      	nop
 8006110:	40005c00 	.word	0x40005c00
 8006114:	40021000 	.word	0x40021000

08006118 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b082      	sub	sp, #8
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800612c:	4619      	mov	r1, r3
 800612e:	4610      	mov	r0, r2
 8006130:	f7fd fdae 	bl	8003c90 <USBD_LL_SetupStage>
}
 8006134:	bf00      	nop
 8006136:	3708      	adds	r7, #8
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b082      	sub	sp, #8
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	460b      	mov	r3, r1
 8006146:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 800614e:	78fb      	ldrb	r3, [r7, #3]
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	015b      	lsls	r3, r3, #5
 8006154:	4413      	add	r3, r2
 8006156:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	78fb      	ldrb	r3, [r7, #3]
 800615e:	4619      	mov	r1, r3
 8006160:	f7fd fde1 	bl	8003d26 <USBD_LL_DataOutStage>
}
 8006164:	bf00      	nop
 8006166:	3708      	adds	r7, #8
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}

0800616c <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b082      	sub	sp, #8
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	460b      	mov	r3, r1
 8006176:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 800617e:	78fb      	ldrb	r3, [r7, #3]
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	015b      	lsls	r3, r3, #5
 8006184:	4413      	add	r3, r2
 8006186:	333c      	adds	r3, #60	; 0x3c
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	78fb      	ldrb	r3, [r7, #3]
 800618c:	4619      	mov	r1, r3
 800618e:	f7fd fe3b 	bl	8003e08 <USBD_LL_DataInStage>
}
 8006192:	bf00      	nop
 8006194:	3708      	adds	r7, #8
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}

0800619a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800619a:	b580      	push	{r7, lr}
 800619c:	b082      	sub	sp, #8
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80061a8:	4618      	mov	r0, r3
 80061aa:	f7fd ff4b 	bl	8004044 <USBD_LL_SOF>
}
 80061ae:	bf00      	nop
 80061b0:	3708      	adds	r7, #8
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}

080061b6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 80061b6:	b580      	push	{r7, lr}
 80061b8:	b084      	sub	sp, #16
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80061be:	2301      	movs	r3, #1
 80061c0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	2b02      	cmp	r3, #2
 80061c8:	d001      	beq.n	80061ce <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80061ca:	f7ff fe3b 	bl	8005e44 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80061d4:	7bfa      	ldrb	r2, [r7, #15]
 80061d6:	4611      	mov	r1, r2
 80061d8:	4618      	mov	r0, r3
 80061da:	f7fd fefb 	bl	8003fd4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80061e4:	4618      	mov	r0, r3
 80061e6:	f7fd feb4 	bl	8003f52 <USBD_LL_Reset>
}
 80061ea:	bf00      	nop
 80061ec:	3710      	adds	r7, #16
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
	...

080061f4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b082      	sub	sp, #8
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006202:	4618      	mov	r0, r3
 8006204:	f7fd fef5 	bl	8003ff2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	699b      	ldr	r3, [r3, #24]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d005      	beq.n	800621c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006210:	4b04      	ldr	r3, [pc, #16]	; (8006224 <HAL_PCD_SuspendCallback+0x30>)
 8006212:	691b      	ldr	r3, [r3, #16]
 8006214:	4a03      	ldr	r2, [pc, #12]	; (8006224 <HAL_PCD_SuspendCallback+0x30>)
 8006216:	f043 0306 	orr.w	r3, r3, #6
 800621a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800621c:	bf00      	nop
 800621e:	3708      	adds	r7, #8
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}
 8006224:	e000ed00 	.word	0xe000ed00

08006228 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b082      	sub	sp, #8
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006236:	4618      	mov	r0, r3
 8006238:	f7fd feef 	bl	800401a <USBD_LL_Resume>
}
 800623c:	bf00      	nop
 800623e:	3708      	adds	r7, #8
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}

08006244 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b082      	sub	sp, #8
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800624c:	4a23      	ldr	r2, [pc, #140]	; (80062dc <USBD_LL_Init+0x98>)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4a21      	ldr	r2, [pc, #132]	; (80062dc <USBD_LL_Init+0x98>)
 8006258:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800625c:	4b1f      	ldr	r3, [pc, #124]	; (80062dc <USBD_LL_Init+0x98>)
 800625e:	4a20      	ldr	r2, [pc, #128]	; (80062e0 <USBD_LL_Init+0x9c>)
 8006260:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006262:	4b1e      	ldr	r3, [pc, #120]	; (80062dc <USBD_LL_Init+0x98>)
 8006264:	2208      	movs	r2, #8
 8006266:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006268:	4b1c      	ldr	r3, [pc, #112]	; (80062dc <USBD_LL_Init+0x98>)
 800626a:	2202      	movs	r2, #2
 800626c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800626e:	4b1b      	ldr	r3, [pc, #108]	; (80062dc <USBD_LL_Init+0x98>)
 8006270:	2200      	movs	r2, #0
 8006272:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006274:	4b19      	ldr	r3, [pc, #100]	; (80062dc <USBD_LL_Init+0x98>)
 8006276:	2200      	movs	r2, #0
 8006278:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800627a:	4b18      	ldr	r3, [pc, #96]	; (80062dc <USBD_LL_Init+0x98>)
 800627c:	2200      	movs	r2, #0
 800627e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006280:	4816      	ldr	r0, [pc, #88]	; (80062dc <USBD_LL_Init+0x98>)
 8006282:	f7fa fa90 	bl	80007a6 <HAL_PCD_Init>
 8006286:	4603      	mov	r3, r0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d001      	beq.n	8006290 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800628c:	f7ff fdda 	bl	8005e44 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006296:	2318      	movs	r3, #24
 8006298:	2200      	movs	r2, #0
 800629a:	2100      	movs	r1, #0
 800629c:	f7fb f914 	bl	80014c8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80062a6:	2358      	movs	r3, #88	; 0x58
 80062a8:	2200      	movs	r2, #0
 80062aa:	2180      	movs	r1, #128	; 0x80
 80062ac:	f7fb f90c 	bl	80014c8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80062b6:	2398      	movs	r3, #152	; 0x98
 80062b8:	2200      	movs	r2, #0
 80062ba:	2181      	movs	r1, #129	; 0x81
 80062bc:	f7fb f904 	bl	80014c8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80062c6:	23d8      	movs	r3, #216	; 0xd8
 80062c8:	2200      	movs	r2, #0
 80062ca:	2101      	movs	r1, #1
 80062cc:	f7fb f8fc 	bl	80014c8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 80062d0:	2300      	movs	r3, #0
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3708      	adds	r7, #8
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	bf00      	nop
 80062dc:	20000acc 	.word	0x20000acc
 80062e0:	40005c00 	.word	0x40005c00

080062e4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b084      	sub	sp, #16
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80062ec:	2300      	movs	r3, #0
 80062ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80062f0:	2300      	movs	r3, #0
 80062f2:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80062fa:	4618      	mov	r0, r3
 80062fc:	f7fa fb34 	bl	8000968 <HAL_PCD_Start>
 8006300:	4603      	mov	r3, r0
 8006302:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006304:	7bfb      	ldrb	r3, [r7, #15]
 8006306:	4618      	mov	r0, r3
 8006308:	f000 f934 	bl	8006574 <USBD_Get_USB_Status>
 800630c:	4603      	mov	r3, r0
 800630e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8006310:	7bbb      	ldrb	r3, [r7, #14]
}
 8006312:	4618      	mov	r0, r3
 8006314:	3710      	adds	r7, #16
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}

0800631a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800631a:	b580      	push	{r7, lr}
 800631c:	b084      	sub	sp, #16
 800631e:	af00      	add	r7, sp, #0
 8006320:	6078      	str	r0, [r7, #4]
 8006322:	4608      	mov	r0, r1
 8006324:	4611      	mov	r1, r2
 8006326:	461a      	mov	r2, r3
 8006328:	4603      	mov	r3, r0
 800632a:	70fb      	strb	r3, [r7, #3]
 800632c:	460b      	mov	r3, r1
 800632e:	70bb      	strb	r3, [r7, #2]
 8006330:	4613      	mov	r3, r2
 8006332:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006334:	2300      	movs	r3, #0
 8006336:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006338:	2300      	movs	r3, #0
 800633a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006342:	78bb      	ldrb	r3, [r7, #2]
 8006344:	883a      	ldrh	r2, [r7, #0]
 8006346:	78f9      	ldrb	r1, [r7, #3]
 8006348:	f7fa fc67 	bl	8000c1a <HAL_PCD_EP_Open>
 800634c:	4603      	mov	r3, r0
 800634e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006350:	7bfb      	ldrb	r3, [r7, #15]
 8006352:	4618      	mov	r0, r3
 8006354:	f000 f90e 	bl	8006574 <USBD_Get_USB_Status>
 8006358:	4603      	mov	r3, r0
 800635a:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800635c:	7bbb      	ldrb	r3, [r7, #14]
}
 800635e:	4618      	mov	r0, r3
 8006360:	3710      	adds	r7, #16
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}

08006366 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006366:	b580      	push	{r7, lr}
 8006368:	b084      	sub	sp, #16
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
 800636e:	460b      	mov	r3, r1
 8006370:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006372:	2300      	movs	r3, #0
 8006374:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006376:	2300      	movs	r3, #0
 8006378:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006380:	78fa      	ldrb	r2, [r7, #3]
 8006382:	4611      	mov	r1, r2
 8006384:	4618      	mov	r0, r3
 8006386:	f7fa fca8 	bl	8000cda <HAL_PCD_EP_Close>
 800638a:	4603      	mov	r3, r0
 800638c:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 800638e:	7bfb      	ldrb	r3, [r7, #15]
 8006390:	4618      	mov	r0, r3
 8006392:	f000 f8ef 	bl	8006574 <USBD_Get_USB_Status>
 8006396:	4603      	mov	r3, r0
 8006398:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 800639a:	7bbb      	ldrb	r3, [r7, #14]
}
 800639c:	4618      	mov	r0, r3
 800639e:	3710      	adds	r7, #16
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}

080063a4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b084      	sub	sp, #16
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	460b      	mov	r3, r1
 80063ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80063b0:	2300      	movs	r3, #0
 80063b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80063b4:	2300      	movs	r3, #0
 80063b6:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80063be:	78fa      	ldrb	r2, [r7, #3]
 80063c0:	4611      	mov	r1, r2
 80063c2:	4618      	mov	r0, r3
 80063c4:	f7fa fd3e 	bl	8000e44 <HAL_PCD_EP_SetStall>
 80063c8:	4603      	mov	r3, r0
 80063ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80063cc:	7bfb      	ldrb	r3, [r7, #15]
 80063ce:	4618      	mov	r0, r3
 80063d0:	f000 f8d0 	bl	8006574 <USBD_Get_USB_Status>
 80063d4:	4603      	mov	r3, r0
 80063d6:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 80063d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3710      	adds	r7, #16
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}

080063e2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80063e2:	b580      	push	{r7, lr}
 80063e4:	b084      	sub	sp, #16
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
 80063ea:	460b      	mov	r3, r1
 80063ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80063ee:	2300      	movs	r3, #0
 80063f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80063f2:	2300      	movs	r3, #0
 80063f4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80063fc:	78fa      	ldrb	r2, [r7, #3]
 80063fe:	4611      	mov	r1, r2
 8006400:	4618      	mov	r0, r3
 8006402:	f7fa fd79 	bl	8000ef8 <HAL_PCD_EP_ClrStall>
 8006406:	4603      	mov	r3, r0
 8006408:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800640a:	7bfb      	ldrb	r3, [r7, #15]
 800640c:	4618      	mov	r0, r3
 800640e:	f000 f8b1 	bl	8006574 <USBD_Get_USB_Status>
 8006412:	4603      	mov	r3, r0
 8006414:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 8006416:	7bbb      	ldrb	r3, [r7, #14]
}
 8006418:	4618      	mov	r0, r3
 800641a:	3710      	adds	r7, #16
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}

08006420 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006420:	b480      	push	{r7}
 8006422:	b085      	sub	sp, #20
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	460b      	mov	r3, r1
 800642a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006432:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8006434:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006438:	2b00      	cmp	r3, #0
 800643a:	da08      	bge.n	800644e <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800643c:	78fb      	ldrb	r3, [r7, #3]
 800643e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006442:	68fa      	ldr	r2, [r7, #12]
 8006444:	015b      	lsls	r3, r3, #5
 8006446:	4413      	add	r3, r2
 8006448:	332a      	adds	r3, #42	; 0x2a
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	e008      	b.n	8006460 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800644e:	78fb      	ldrb	r3, [r7, #3]
 8006450:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006454:	68fa      	ldr	r2, [r7, #12]
 8006456:	015b      	lsls	r3, r3, #5
 8006458:	4413      	add	r3, r2
 800645a:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800645e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006460:	4618      	mov	r0, r3
 8006462:	3714      	adds	r7, #20
 8006464:	46bd      	mov	sp, r7
 8006466:	bc80      	pop	{r7}
 8006468:	4770      	bx	lr

0800646a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800646a:	b580      	push	{r7, lr}
 800646c:	b084      	sub	sp, #16
 800646e:	af00      	add	r7, sp, #0
 8006470:	6078      	str	r0, [r7, #4]
 8006472:	460b      	mov	r3, r1
 8006474:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006476:	2300      	movs	r3, #0
 8006478:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800647a:	2300      	movs	r3, #0
 800647c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006484:	78fa      	ldrb	r2, [r7, #3]
 8006486:	4611      	mov	r1, r2
 8006488:	4618      	mov	r0, r3
 800648a:	f7fa fba1 	bl	8000bd0 <HAL_PCD_SetAddress>
 800648e:	4603      	mov	r3, r0
 8006490:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006492:	7bfb      	ldrb	r3, [r7, #15]
 8006494:	4618      	mov	r0, r3
 8006496:	f000 f86d 	bl	8006574 <USBD_Get_USB_Status>
 800649a:	4603      	mov	r3, r0
 800649c:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800649e:	7bbb      	ldrb	r3, [r7, #14]
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3710      	adds	r7, #16
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}

080064a8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b086      	sub	sp, #24
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	60f8      	str	r0, [r7, #12]
 80064b0:	607a      	str	r2, [r7, #4]
 80064b2:	461a      	mov	r2, r3
 80064b4:	460b      	mov	r3, r1
 80064b6:	72fb      	strb	r3, [r7, #11]
 80064b8:	4613      	mov	r3, r2
 80064ba:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80064bc:	2300      	movs	r3, #0
 80064be:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80064c0:	2300      	movs	r3, #0
 80064c2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80064ca:	893b      	ldrh	r3, [r7, #8]
 80064cc:	7af9      	ldrb	r1, [r7, #11]
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	f7fa fc7f 	bl	8000dd2 <HAL_PCD_EP_Transmit>
 80064d4:	4603      	mov	r3, r0
 80064d6:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80064d8:	7dfb      	ldrb	r3, [r7, #23]
 80064da:	4618      	mov	r0, r3
 80064dc:	f000 f84a 	bl	8006574 <USBD_Get_USB_Status>
 80064e0:	4603      	mov	r3, r0
 80064e2:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 80064e4:	7dbb      	ldrb	r3, [r7, #22]
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3718      	adds	r7, #24
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}

080064ee <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80064ee:	b580      	push	{r7, lr}
 80064f0:	b086      	sub	sp, #24
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	60f8      	str	r0, [r7, #12]
 80064f6:	607a      	str	r2, [r7, #4]
 80064f8:	461a      	mov	r2, r3
 80064fa:	460b      	mov	r3, r1
 80064fc:	72fb      	strb	r3, [r7, #11]
 80064fe:	4613      	mov	r3, r2
 8006500:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006502:	2300      	movs	r3, #0
 8006504:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006506:	2300      	movs	r3, #0
 8006508:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006510:	893b      	ldrh	r3, [r7, #8]
 8006512:	7af9      	ldrb	r1, [r7, #11]
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	f7fa fc22 	bl	8000d5e <HAL_PCD_EP_Receive>
 800651a:	4603      	mov	r3, r0
 800651c:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800651e:	7dfb      	ldrb	r3, [r7, #23]
 8006520:	4618      	mov	r0, r3
 8006522:	f000 f827 	bl	8006574 <USBD_Get_USB_Status>
 8006526:	4603      	mov	r3, r0
 8006528:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 800652a:	7dbb      	ldrb	r3, [r7, #22]
}
 800652c:	4618      	mov	r0, r3
 800652e:	3718      	adds	r7, #24
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}

08006534 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800653c:	4b02      	ldr	r3, [pc, #8]	; (8006548 <USBD_static_malloc+0x14>)
}
 800653e:	4618      	mov	r0, r3
 8006540:	370c      	adds	r7, #12
 8006542:	46bd      	mov	sp, r7
 8006544:	bc80      	pop	{r7}
 8006546:	4770      	bx	lr
 8006548:	20000614 	.word	0x20000614

0800654c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]

}
 8006554:	bf00      	nop
 8006556:	370c      	adds	r7, #12
 8006558:	46bd      	mov	sp, r7
 800655a:	bc80      	pop	{r7}
 800655c:	4770      	bx	lr

0800655e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800655e:	b480      	push	{r7}
 8006560:	b083      	sub	sp, #12
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
 8006566:	460b      	mov	r3, r1
 8006568:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800656a:	bf00      	nop
 800656c:	370c      	adds	r7, #12
 800656e:	46bd      	mov	sp, r7
 8006570:	bc80      	pop	{r7}
 8006572:	4770      	bx	lr

08006574 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006574:	b480      	push	{r7}
 8006576:	b085      	sub	sp, #20
 8006578:	af00      	add	r7, sp, #0
 800657a:	4603      	mov	r3, r0
 800657c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800657e:	2300      	movs	r3, #0
 8006580:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006582:	79fb      	ldrb	r3, [r7, #7]
 8006584:	2b03      	cmp	r3, #3
 8006586:	d817      	bhi.n	80065b8 <USBD_Get_USB_Status+0x44>
 8006588:	a201      	add	r2, pc, #4	; (adr r2, 8006590 <USBD_Get_USB_Status+0x1c>)
 800658a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800658e:	bf00      	nop
 8006590:	080065a1 	.word	0x080065a1
 8006594:	080065a7 	.word	0x080065a7
 8006598:	080065ad 	.word	0x080065ad
 800659c:	080065b3 	.word	0x080065b3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80065a0:	2300      	movs	r3, #0
 80065a2:	73fb      	strb	r3, [r7, #15]
    break;
 80065a4:	e00b      	b.n	80065be <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80065a6:	2302      	movs	r3, #2
 80065a8:	73fb      	strb	r3, [r7, #15]
    break;
 80065aa:	e008      	b.n	80065be <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80065ac:	2301      	movs	r3, #1
 80065ae:	73fb      	strb	r3, [r7, #15]
    break;
 80065b0:	e005      	b.n	80065be <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80065b2:	2302      	movs	r3, #2
 80065b4:	73fb      	strb	r3, [r7, #15]
    break;
 80065b6:	e002      	b.n	80065be <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80065b8:	2302      	movs	r3, #2
 80065ba:	73fb      	strb	r3, [r7, #15]
    break;
 80065bc:	bf00      	nop
  }
  return usb_status;
 80065be:	7bfb      	ldrb	r3, [r7, #15]
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3714      	adds	r7, #20
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bc80      	pop	{r7}
 80065c8:	4770      	bx	lr
 80065ca:	bf00      	nop

080065cc <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 80065cc:	b480      	push	{r7}
 80065ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80065d0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bc80      	pop	{r7}
 80065d8:	4770      	bx	lr

080065da <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 80065da:	b480      	push	{r7}
 80065dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 80065de:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bc80      	pop	{r7}
 80065e6:	4770      	bx	lr

080065e8 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b085      	sub	sp, #20
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	4603      	mov	r3, r0
 80065f0:	460a      	mov	r2, r1
 80065f2:	71fb      	strb	r3, [r7, #7]
 80065f4:	4613      	mov	r3, r2
 80065f6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
	LED2_GPIO_Port -> BSRR = LED2_Pin;
 80065f8:	4b10      	ldr	r3, [pc, #64]	; (800663c <CUSTOM_HID_OutEvent_FS+0x54>)
 80065fa:	2220      	movs	r2, #32
 80065fc:	611a      	str	r2, [r3, #16]
	USBD_CUSTOM_HID_HandleTypeDef		*hhid = (USBD_CUSTOM_HID_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80065fe:	4b10      	ldr	r3, [pc, #64]	; (8006640 <CUSTOM_HID_OutEvent_FS+0x58>)
 8006600:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006604:	60bb      	str	r3, [r7, #8]
	for (uint8_t i = 0; i < 64; i++)
 8006606:	2300      	movs	r3, #0
 8006608:	73fb      	strb	r3, [r7, #15]
 800660a:	e008      	b.n	800661e <CUSTOM_HID_OutEvent_FS+0x36>
	{
		USB_RX_Buffer[i] = hhid->Report_buf[i];
 800660c:	7bfa      	ldrb	r2, [r7, #15]
 800660e:	7bfb      	ldrb	r3, [r7, #15]
 8006610:	68b9      	ldr	r1, [r7, #8]
 8006612:	5c89      	ldrb	r1, [r1, r2]
 8006614:	4a0b      	ldr	r2, [pc, #44]	; (8006644 <CUSTOM_HID_OutEvent_FS+0x5c>)
 8006616:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 64; i++)
 8006618:	7bfb      	ldrb	r3, [r7, #15]
 800661a:	3301      	adds	r3, #1
 800661c:	73fb      	strb	r3, [r7, #15]
 800661e:	7bfb      	ldrb	r3, [r7, #15]
 8006620:	2b3f      	cmp	r3, #63	; 0x3f
 8006622:	d9f3      	bls.n	800660c <CUSTOM_HID_OutEvent_FS+0x24>
	}
	Flag_Rcvd_Data_HID = 1;
 8006624:	4b08      	ldr	r3, [pc, #32]	; (8006648 <CUSTOM_HID_OutEvent_FS+0x60>)
 8006626:	2201      	movs	r2, #1
 8006628:	701a      	strb	r2, [r3, #0]
	LED2_GPIO_Port -> BRR = LED2_Pin;
 800662a:	4b04      	ldr	r3, [pc, #16]	; (800663c <CUSTOM_HID_OutEvent_FS+0x54>)
 800662c:	2220      	movs	r2, #32
 800662e:	615a      	str	r2, [r3, #20]
  return (USBD_OK);
 8006630:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006632:	4618      	mov	r0, r3
 8006634:	3714      	adds	r7, #20
 8006636:	46bd      	mov	sp, r7
 8006638:	bc80      	pop	{r7}
 800663a:	4770      	bx	lr
 800663c:	40010c00 	.word	0x40010c00
 8006640:	20000808 	.word	0x20000808
 8006644:	200006bc 	.word	0x200006bc
 8006648:	2000037d 	.word	0x2000037d

0800664c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800664c:	b480      	push	{r7}
 800664e:	b083      	sub	sp, #12
 8006650:	af00      	add	r7, sp, #0
 8006652:	4603      	mov	r3, r0
 8006654:	6039      	str	r1, [r7, #0]
 8006656:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	2212      	movs	r2, #18
 800665c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800665e:	4b03      	ldr	r3, [pc, #12]	; (800666c <USBD_FS_DeviceDescriptor+0x20>)
}
 8006660:	4618      	mov	r0, r3
 8006662:	370c      	adds	r7, #12
 8006664:	46bd      	mov	sp, r7
 8006666:	bc80      	pop	{r7}
 8006668:	4770      	bx	lr
 800666a:	bf00      	nop
 800666c:	2000015c 	.word	0x2000015c

08006670 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	4603      	mov	r3, r0
 8006678:	6039      	str	r1, [r7, #0]
 800667a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	2204      	movs	r2, #4
 8006680:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006682:	4b03      	ldr	r3, [pc, #12]	; (8006690 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006684:	4618      	mov	r0, r3
 8006686:	370c      	adds	r7, #12
 8006688:	46bd      	mov	sp, r7
 800668a:	bc80      	pop	{r7}
 800668c:	4770      	bx	lr
 800668e:	bf00      	nop
 8006690:	20000170 	.word	0x20000170

08006694 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b082      	sub	sp, #8
 8006698:	af00      	add	r7, sp, #0
 800669a:	4603      	mov	r3, r0
 800669c:	6039      	str	r1, [r7, #0]
 800669e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80066a0:	79fb      	ldrb	r3, [r7, #7]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d105      	bne.n	80066b2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80066a6:	683a      	ldr	r2, [r7, #0]
 80066a8:	4907      	ldr	r1, [pc, #28]	; (80066c8 <USBD_FS_ProductStrDescriptor+0x34>)
 80066aa:	4808      	ldr	r0, [pc, #32]	; (80066cc <USBD_FS_ProductStrDescriptor+0x38>)
 80066ac:	f7fe fa13 	bl	8004ad6 <USBD_GetString>
 80066b0:	e004      	b.n	80066bc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80066b2:	683a      	ldr	r2, [r7, #0]
 80066b4:	4904      	ldr	r1, [pc, #16]	; (80066c8 <USBD_FS_ProductStrDescriptor+0x34>)
 80066b6:	4805      	ldr	r0, [pc, #20]	; (80066cc <USBD_FS_ProductStrDescriptor+0x38>)
 80066b8:	f7fe fa0d 	bl	8004ad6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80066bc:	4b02      	ldr	r3, [pc, #8]	; (80066c8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3708      	adds	r7, #8
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	bf00      	nop
 80066c8:	20000d38 	.word	0x20000d38
 80066cc:	080074a8 	.word	0x080074a8

080066d0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b082      	sub	sp, #8
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	4603      	mov	r3, r0
 80066d8:	6039      	str	r1, [r7, #0]
 80066da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80066dc:	683a      	ldr	r2, [r7, #0]
 80066de:	4904      	ldr	r1, [pc, #16]	; (80066f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80066e0:	4804      	ldr	r0, [pc, #16]	; (80066f4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80066e2:	f7fe f9f8 	bl	8004ad6 <USBD_GetString>
  return USBD_StrDesc;
 80066e6:	4b02      	ldr	r3, [pc, #8]	; (80066f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3708      	adds	r7, #8
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}
 80066f0:	20000d38 	.word	0x20000d38
 80066f4:	080074c0 	.word	0x080074c0

080066f8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b082      	sub	sp, #8
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	4603      	mov	r3, r0
 8006700:	6039      	str	r1, [r7, #0]
 8006702:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	221a      	movs	r2, #26
 8006708:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800670a:	f000 f843 	bl	8006794 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800670e:	4b02      	ldr	r3, [pc, #8]	; (8006718 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006710:	4618      	mov	r0, r3
 8006712:	3708      	adds	r7, #8
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}
 8006718:	20000174 	.word	0x20000174

0800671c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b082      	sub	sp, #8
 8006720:	af00      	add	r7, sp, #0
 8006722:	4603      	mov	r3, r0
 8006724:	6039      	str	r1, [r7, #0]
 8006726:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006728:	79fb      	ldrb	r3, [r7, #7]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d105      	bne.n	800673a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800672e:	683a      	ldr	r2, [r7, #0]
 8006730:	4907      	ldr	r1, [pc, #28]	; (8006750 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006732:	4808      	ldr	r0, [pc, #32]	; (8006754 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006734:	f7fe f9cf 	bl	8004ad6 <USBD_GetString>
 8006738:	e004      	b.n	8006744 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800673a:	683a      	ldr	r2, [r7, #0]
 800673c:	4904      	ldr	r1, [pc, #16]	; (8006750 <USBD_FS_ConfigStrDescriptor+0x34>)
 800673e:	4805      	ldr	r0, [pc, #20]	; (8006754 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006740:	f7fe f9c9 	bl	8004ad6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006744:	4b02      	ldr	r3, [pc, #8]	; (8006750 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006746:	4618      	mov	r0, r3
 8006748:	3708      	adds	r7, #8
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}
 800674e:	bf00      	nop
 8006750:	20000d38 	.word	0x20000d38
 8006754:	080074d4 	.word	0x080074d4

08006758 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b082      	sub	sp, #8
 800675c:	af00      	add	r7, sp, #0
 800675e:	4603      	mov	r3, r0
 8006760:	6039      	str	r1, [r7, #0]
 8006762:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006764:	79fb      	ldrb	r3, [r7, #7]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d105      	bne.n	8006776 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800676a:	683a      	ldr	r2, [r7, #0]
 800676c:	4907      	ldr	r1, [pc, #28]	; (800678c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800676e:	4808      	ldr	r0, [pc, #32]	; (8006790 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006770:	f7fe f9b1 	bl	8004ad6 <USBD_GetString>
 8006774:	e004      	b.n	8006780 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006776:	683a      	ldr	r2, [r7, #0]
 8006778:	4904      	ldr	r1, [pc, #16]	; (800678c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800677a:	4805      	ldr	r0, [pc, #20]	; (8006790 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800677c:	f7fe f9ab 	bl	8004ad6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006780:	4b02      	ldr	r3, [pc, #8]	; (800678c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006782:	4618      	mov	r0, r3
 8006784:	3708      	adds	r7, #8
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}
 800678a:	bf00      	nop
 800678c:	20000d38 	.word	0x20000d38
 8006790:	080074e8 	.word	0x080074e8

08006794 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b084      	sub	sp, #16
 8006798:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800679a:	4b0f      	ldr	r3, [pc, #60]	; (80067d8 <Get_SerialNum+0x44>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80067a0:	4b0e      	ldr	r3, [pc, #56]	; (80067dc <Get_SerialNum+0x48>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80067a6:	4b0e      	ldr	r3, [pc, #56]	; (80067e0 <Get_SerialNum+0x4c>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80067ac:	68fa      	ldr	r2, [r7, #12]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	4413      	add	r3, r2
 80067b2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d009      	beq.n	80067ce <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80067ba:	2208      	movs	r2, #8
 80067bc:	4909      	ldr	r1, [pc, #36]	; (80067e4 <Get_SerialNum+0x50>)
 80067be:	68f8      	ldr	r0, [r7, #12]
 80067c0:	f000 f814 	bl	80067ec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80067c4:	2204      	movs	r2, #4
 80067c6:	4908      	ldr	r1, [pc, #32]	; (80067e8 <Get_SerialNum+0x54>)
 80067c8:	68b8      	ldr	r0, [r7, #8]
 80067ca:	f000 f80f 	bl	80067ec <IntToUnicode>
  }
}
 80067ce:	bf00      	nop
 80067d0:	3710      	adds	r7, #16
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop
 80067d8:	1ffff7e8 	.word	0x1ffff7e8
 80067dc:	1ffff7ec 	.word	0x1ffff7ec
 80067e0:	1ffff7f0 	.word	0x1ffff7f0
 80067e4:	20000176 	.word	0x20000176
 80067e8:	20000186 	.word	0x20000186

080067ec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b087      	sub	sp, #28
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	60f8      	str	r0, [r7, #12]
 80067f4:	60b9      	str	r1, [r7, #8]
 80067f6:	4613      	mov	r3, r2
 80067f8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80067fa:	2300      	movs	r3, #0
 80067fc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80067fe:	2300      	movs	r3, #0
 8006800:	75fb      	strb	r3, [r7, #23]
 8006802:	e027      	b.n	8006854 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	0f1b      	lsrs	r3, r3, #28
 8006808:	2b09      	cmp	r3, #9
 800680a:	d80b      	bhi.n	8006824 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	0f1b      	lsrs	r3, r3, #28
 8006810:	b2da      	uxtb	r2, r3
 8006812:	7dfb      	ldrb	r3, [r7, #23]
 8006814:	005b      	lsls	r3, r3, #1
 8006816:	4619      	mov	r1, r3
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	440b      	add	r3, r1
 800681c:	3230      	adds	r2, #48	; 0x30
 800681e:	b2d2      	uxtb	r2, r2
 8006820:	701a      	strb	r2, [r3, #0]
 8006822:	e00a      	b.n	800683a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	0f1b      	lsrs	r3, r3, #28
 8006828:	b2da      	uxtb	r2, r3
 800682a:	7dfb      	ldrb	r3, [r7, #23]
 800682c:	005b      	lsls	r3, r3, #1
 800682e:	4619      	mov	r1, r3
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	440b      	add	r3, r1
 8006834:	3237      	adds	r2, #55	; 0x37
 8006836:	b2d2      	uxtb	r2, r2
 8006838:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	011b      	lsls	r3, r3, #4
 800683e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006840:	7dfb      	ldrb	r3, [r7, #23]
 8006842:	005b      	lsls	r3, r3, #1
 8006844:	3301      	adds	r3, #1
 8006846:	68ba      	ldr	r2, [r7, #8]
 8006848:	4413      	add	r3, r2
 800684a:	2200      	movs	r2, #0
 800684c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800684e:	7dfb      	ldrb	r3, [r7, #23]
 8006850:	3301      	adds	r3, #1
 8006852:	75fb      	strb	r3, [r7, #23]
 8006854:	7dfa      	ldrb	r2, [r7, #23]
 8006856:	79fb      	ldrb	r3, [r7, #7]
 8006858:	429a      	cmp	r2, r3
 800685a:	d3d3      	bcc.n	8006804 <IntToUnicode+0x18>
  }
}
 800685c:	bf00      	nop
 800685e:	371c      	adds	r7, #28
 8006860:	46bd      	mov	sp, r7
 8006862:	bc80      	pop	{r7}
 8006864:	4770      	bx	lr
	...

08006868 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8006868:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800686a:	e003      	b.n	8006874 <LoopCopyDataInit>

0800686c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800686c:	4b0b      	ldr	r3, [pc, #44]	; (800689c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800686e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8006870:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8006872:	3104      	adds	r1, #4

08006874 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8006874:	480a      	ldr	r0, [pc, #40]	; (80068a0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8006876:	4b0b      	ldr	r3, [pc, #44]	; (80068a4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8006878:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800687a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800687c:	d3f6      	bcc.n	800686c <CopyDataInit>
  ldr r2, =_sbss
 800687e:	4a0a      	ldr	r2, [pc, #40]	; (80068a8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8006880:	e002      	b.n	8006888 <LoopFillZerobss>

08006882 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8006882:	2300      	movs	r3, #0
  str r3, [r2], #4
 8006884:	f842 3b04 	str.w	r3, [r2], #4

08006888 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8006888:	4b08      	ldr	r3, [pc, #32]	; (80068ac <LoopFillZerobss+0x24>)
  cmp r2, r3
 800688a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800688c:	d3f9      	bcc.n	8006882 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800688e:	f7ff fbb9 	bl	8006004 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006892:	f000 f819 	bl	80068c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006896:	f7ff f87b 	bl	8005990 <main>
  bx lr
 800689a:	4770      	bx	lr
  ldr r3, =_sidata
 800689c:	08007660 	.word	0x08007660
  ldr r0, =_sdata
 80068a0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80068a4:	20000360 	.word	0x20000360
  ldr r2, =_sbss
 80068a8:	20000360 	.word	0x20000360
  ldr r3, = _ebss
 80068ac:	20000f3c 	.word	0x20000f3c

080068b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80068b0:	e7fe      	b.n	80068b0 <ADC1_2_IRQHandler>

080068b2 <atoi>:
 80068b2:	220a      	movs	r2, #10
 80068b4:	2100      	movs	r1, #0
 80068b6:	f000 b8f3 	b.w	8006aa0 <strtol>
	...

080068bc <__errno>:
 80068bc:	4b01      	ldr	r3, [pc, #4]	; (80068c4 <__errno+0x8>)
 80068be:	6818      	ldr	r0, [r3, #0]
 80068c0:	4770      	bx	lr
 80068c2:	bf00      	nop
 80068c4:	20000190 	.word	0x20000190

080068c8 <__libc_init_array>:
 80068c8:	b570      	push	{r4, r5, r6, lr}
 80068ca:	2500      	movs	r5, #0
 80068cc:	4e0c      	ldr	r6, [pc, #48]	; (8006900 <__libc_init_array+0x38>)
 80068ce:	4c0d      	ldr	r4, [pc, #52]	; (8006904 <__libc_init_array+0x3c>)
 80068d0:	1ba4      	subs	r4, r4, r6
 80068d2:	10a4      	asrs	r4, r4, #2
 80068d4:	42a5      	cmp	r5, r4
 80068d6:	d109      	bne.n	80068ec <__libc_init_array+0x24>
 80068d8:	f000 fd0e 	bl	80072f8 <_init>
 80068dc:	2500      	movs	r5, #0
 80068de:	4e0a      	ldr	r6, [pc, #40]	; (8006908 <__libc_init_array+0x40>)
 80068e0:	4c0a      	ldr	r4, [pc, #40]	; (800690c <__libc_init_array+0x44>)
 80068e2:	1ba4      	subs	r4, r4, r6
 80068e4:	10a4      	asrs	r4, r4, #2
 80068e6:	42a5      	cmp	r5, r4
 80068e8:	d105      	bne.n	80068f6 <__libc_init_array+0x2e>
 80068ea:	bd70      	pop	{r4, r5, r6, pc}
 80068ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80068f0:	4798      	blx	r3
 80068f2:	3501      	adds	r5, #1
 80068f4:	e7ee      	b.n	80068d4 <__libc_init_array+0xc>
 80068f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80068fa:	4798      	blx	r3
 80068fc:	3501      	adds	r5, #1
 80068fe:	e7f2      	b.n	80068e6 <__libc_init_array+0x1e>
 8006900:	08007658 	.word	0x08007658
 8006904:	08007658 	.word	0x08007658
 8006908:	08007658 	.word	0x08007658
 800690c:	0800765c 	.word	0x0800765c

08006910 <memset>:
 8006910:	4603      	mov	r3, r0
 8006912:	4402      	add	r2, r0
 8006914:	4293      	cmp	r3, r2
 8006916:	d100      	bne.n	800691a <memset+0xa>
 8006918:	4770      	bx	lr
 800691a:	f803 1b01 	strb.w	r1, [r3], #1
 800691e:	e7f9      	b.n	8006914 <memset+0x4>

08006920 <siprintf>:
 8006920:	b40e      	push	{r1, r2, r3}
 8006922:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006926:	b500      	push	{lr}
 8006928:	b09c      	sub	sp, #112	; 0x70
 800692a:	ab1d      	add	r3, sp, #116	; 0x74
 800692c:	9002      	str	r0, [sp, #8]
 800692e:	9006      	str	r0, [sp, #24]
 8006930:	9107      	str	r1, [sp, #28]
 8006932:	9104      	str	r1, [sp, #16]
 8006934:	4808      	ldr	r0, [pc, #32]	; (8006958 <siprintf+0x38>)
 8006936:	4909      	ldr	r1, [pc, #36]	; (800695c <siprintf+0x3c>)
 8006938:	f853 2b04 	ldr.w	r2, [r3], #4
 800693c:	9105      	str	r1, [sp, #20]
 800693e:	6800      	ldr	r0, [r0, #0]
 8006940:	a902      	add	r1, sp, #8
 8006942:	9301      	str	r3, [sp, #4]
 8006944:	f000 f932 	bl	8006bac <_svfiprintf_r>
 8006948:	2200      	movs	r2, #0
 800694a:	9b02      	ldr	r3, [sp, #8]
 800694c:	701a      	strb	r2, [r3, #0]
 800694e:	b01c      	add	sp, #112	; 0x70
 8006950:	f85d eb04 	ldr.w	lr, [sp], #4
 8006954:	b003      	add	sp, #12
 8006956:	4770      	bx	lr
 8006958:	20000190 	.word	0x20000190
 800695c:	ffff0208 	.word	0xffff0208

08006960 <strcat>:
 8006960:	4603      	mov	r3, r0
 8006962:	b510      	push	{r4, lr}
 8006964:	781a      	ldrb	r2, [r3, #0]
 8006966:	1c5c      	adds	r4, r3, #1
 8006968:	b93a      	cbnz	r2, 800697a <strcat+0x1a>
 800696a:	3b01      	subs	r3, #1
 800696c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006970:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006974:	2a00      	cmp	r2, #0
 8006976:	d1f9      	bne.n	800696c <strcat+0xc>
 8006978:	bd10      	pop	{r4, pc}
 800697a:	4623      	mov	r3, r4
 800697c:	e7f2      	b.n	8006964 <strcat+0x4>

0800697e <strncpy>:
 800697e:	b570      	push	{r4, r5, r6, lr}
 8006980:	4604      	mov	r4, r0
 8006982:	3901      	subs	r1, #1
 8006984:	b902      	cbnz	r2, 8006988 <strncpy+0xa>
 8006986:	bd70      	pop	{r4, r5, r6, pc}
 8006988:	4623      	mov	r3, r4
 800698a:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800698e:	1e56      	subs	r6, r2, #1
 8006990:	f803 5b01 	strb.w	r5, [r3], #1
 8006994:	b92d      	cbnz	r5, 80069a2 <strncpy+0x24>
 8006996:	4414      	add	r4, r2
 8006998:	42a3      	cmp	r3, r4
 800699a:	d0f4      	beq.n	8006986 <strncpy+0x8>
 800699c:	f803 5b01 	strb.w	r5, [r3], #1
 80069a0:	e7fa      	b.n	8006998 <strncpy+0x1a>
 80069a2:	461c      	mov	r4, r3
 80069a4:	4632      	mov	r2, r6
 80069a6:	e7ed      	b.n	8006984 <strncpy+0x6>

080069a8 <_strtol_l.isra.0>:
 80069a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069ac:	4680      	mov	r8, r0
 80069ae:	4689      	mov	r9, r1
 80069b0:	4692      	mov	sl, r2
 80069b2:	461e      	mov	r6, r3
 80069b4:	460f      	mov	r7, r1
 80069b6:	463d      	mov	r5, r7
 80069b8:	9808      	ldr	r0, [sp, #32]
 80069ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 80069be:	f000 f885 	bl	8006acc <__locale_ctype_ptr_l>
 80069c2:	4420      	add	r0, r4
 80069c4:	7843      	ldrb	r3, [r0, #1]
 80069c6:	f013 0308 	ands.w	r3, r3, #8
 80069ca:	d132      	bne.n	8006a32 <_strtol_l.isra.0+0x8a>
 80069cc:	2c2d      	cmp	r4, #45	; 0x2d
 80069ce:	d132      	bne.n	8006a36 <_strtol_l.isra.0+0x8e>
 80069d0:	2201      	movs	r2, #1
 80069d2:	787c      	ldrb	r4, [r7, #1]
 80069d4:	1cbd      	adds	r5, r7, #2
 80069d6:	2e00      	cmp	r6, #0
 80069d8:	d05d      	beq.n	8006a96 <_strtol_l.isra.0+0xee>
 80069da:	2e10      	cmp	r6, #16
 80069dc:	d109      	bne.n	80069f2 <_strtol_l.isra.0+0x4a>
 80069de:	2c30      	cmp	r4, #48	; 0x30
 80069e0:	d107      	bne.n	80069f2 <_strtol_l.isra.0+0x4a>
 80069e2:	782b      	ldrb	r3, [r5, #0]
 80069e4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80069e8:	2b58      	cmp	r3, #88	; 0x58
 80069ea:	d14f      	bne.n	8006a8c <_strtol_l.isra.0+0xe4>
 80069ec:	2610      	movs	r6, #16
 80069ee:	786c      	ldrb	r4, [r5, #1]
 80069f0:	3502      	adds	r5, #2
 80069f2:	2a00      	cmp	r2, #0
 80069f4:	bf14      	ite	ne
 80069f6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80069fa:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80069fe:	2700      	movs	r7, #0
 8006a00:	fbb1 fcf6 	udiv	ip, r1, r6
 8006a04:	4638      	mov	r0, r7
 8006a06:	fb06 1e1c 	mls	lr, r6, ip, r1
 8006a0a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8006a0e:	2b09      	cmp	r3, #9
 8006a10:	d817      	bhi.n	8006a42 <_strtol_l.isra.0+0x9a>
 8006a12:	461c      	mov	r4, r3
 8006a14:	42a6      	cmp	r6, r4
 8006a16:	dd23      	ble.n	8006a60 <_strtol_l.isra.0+0xb8>
 8006a18:	1c7b      	adds	r3, r7, #1
 8006a1a:	d007      	beq.n	8006a2c <_strtol_l.isra.0+0x84>
 8006a1c:	4584      	cmp	ip, r0
 8006a1e:	d31c      	bcc.n	8006a5a <_strtol_l.isra.0+0xb2>
 8006a20:	d101      	bne.n	8006a26 <_strtol_l.isra.0+0x7e>
 8006a22:	45a6      	cmp	lr, r4
 8006a24:	db19      	blt.n	8006a5a <_strtol_l.isra.0+0xb2>
 8006a26:	2701      	movs	r7, #1
 8006a28:	fb00 4006 	mla	r0, r0, r6, r4
 8006a2c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006a30:	e7eb      	b.n	8006a0a <_strtol_l.isra.0+0x62>
 8006a32:	462f      	mov	r7, r5
 8006a34:	e7bf      	b.n	80069b6 <_strtol_l.isra.0+0xe>
 8006a36:	2c2b      	cmp	r4, #43	; 0x2b
 8006a38:	bf04      	itt	eq
 8006a3a:	1cbd      	addeq	r5, r7, #2
 8006a3c:	787c      	ldrbeq	r4, [r7, #1]
 8006a3e:	461a      	mov	r2, r3
 8006a40:	e7c9      	b.n	80069d6 <_strtol_l.isra.0+0x2e>
 8006a42:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8006a46:	2b19      	cmp	r3, #25
 8006a48:	d801      	bhi.n	8006a4e <_strtol_l.isra.0+0xa6>
 8006a4a:	3c37      	subs	r4, #55	; 0x37
 8006a4c:	e7e2      	b.n	8006a14 <_strtol_l.isra.0+0x6c>
 8006a4e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8006a52:	2b19      	cmp	r3, #25
 8006a54:	d804      	bhi.n	8006a60 <_strtol_l.isra.0+0xb8>
 8006a56:	3c57      	subs	r4, #87	; 0x57
 8006a58:	e7dc      	b.n	8006a14 <_strtol_l.isra.0+0x6c>
 8006a5a:	f04f 37ff 	mov.w	r7, #4294967295
 8006a5e:	e7e5      	b.n	8006a2c <_strtol_l.isra.0+0x84>
 8006a60:	1c7b      	adds	r3, r7, #1
 8006a62:	d108      	bne.n	8006a76 <_strtol_l.isra.0+0xce>
 8006a64:	2322      	movs	r3, #34	; 0x22
 8006a66:	4608      	mov	r0, r1
 8006a68:	f8c8 3000 	str.w	r3, [r8]
 8006a6c:	f1ba 0f00 	cmp.w	sl, #0
 8006a70:	d107      	bne.n	8006a82 <_strtol_l.isra.0+0xda>
 8006a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a76:	b102      	cbz	r2, 8006a7a <_strtol_l.isra.0+0xd2>
 8006a78:	4240      	negs	r0, r0
 8006a7a:	f1ba 0f00 	cmp.w	sl, #0
 8006a7e:	d0f8      	beq.n	8006a72 <_strtol_l.isra.0+0xca>
 8006a80:	b10f      	cbz	r7, 8006a86 <_strtol_l.isra.0+0xde>
 8006a82:	f105 39ff 	add.w	r9, r5, #4294967295
 8006a86:	f8ca 9000 	str.w	r9, [sl]
 8006a8a:	e7f2      	b.n	8006a72 <_strtol_l.isra.0+0xca>
 8006a8c:	2430      	movs	r4, #48	; 0x30
 8006a8e:	2e00      	cmp	r6, #0
 8006a90:	d1af      	bne.n	80069f2 <_strtol_l.isra.0+0x4a>
 8006a92:	2608      	movs	r6, #8
 8006a94:	e7ad      	b.n	80069f2 <_strtol_l.isra.0+0x4a>
 8006a96:	2c30      	cmp	r4, #48	; 0x30
 8006a98:	d0a3      	beq.n	80069e2 <_strtol_l.isra.0+0x3a>
 8006a9a:	260a      	movs	r6, #10
 8006a9c:	e7a9      	b.n	80069f2 <_strtol_l.isra.0+0x4a>
	...

08006aa0 <strtol>:
 8006aa0:	4b08      	ldr	r3, [pc, #32]	; (8006ac4 <strtol+0x24>)
 8006aa2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006aa4:	681c      	ldr	r4, [r3, #0]
 8006aa6:	4d08      	ldr	r5, [pc, #32]	; (8006ac8 <strtol+0x28>)
 8006aa8:	6a23      	ldr	r3, [r4, #32]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	bf08      	it	eq
 8006aae:	462b      	moveq	r3, r5
 8006ab0:	9300      	str	r3, [sp, #0]
 8006ab2:	4613      	mov	r3, r2
 8006ab4:	460a      	mov	r2, r1
 8006ab6:	4601      	mov	r1, r0
 8006ab8:	4620      	mov	r0, r4
 8006aba:	f7ff ff75 	bl	80069a8 <_strtol_l.isra.0>
 8006abe:	b003      	add	sp, #12
 8006ac0:	bd30      	pop	{r4, r5, pc}
 8006ac2:	bf00      	nop
 8006ac4:	20000190 	.word	0x20000190
 8006ac8:	200001f4 	.word	0x200001f4

08006acc <__locale_ctype_ptr_l>:
 8006acc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8006ad0:	4770      	bx	lr

08006ad2 <__ascii_mbtowc>:
 8006ad2:	b082      	sub	sp, #8
 8006ad4:	b901      	cbnz	r1, 8006ad8 <__ascii_mbtowc+0x6>
 8006ad6:	a901      	add	r1, sp, #4
 8006ad8:	b142      	cbz	r2, 8006aec <__ascii_mbtowc+0x1a>
 8006ada:	b14b      	cbz	r3, 8006af0 <__ascii_mbtowc+0x1e>
 8006adc:	7813      	ldrb	r3, [r2, #0]
 8006ade:	600b      	str	r3, [r1, #0]
 8006ae0:	7812      	ldrb	r2, [r2, #0]
 8006ae2:	1c10      	adds	r0, r2, #0
 8006ae4:	bf18      	it	ne
 8006ae6:	2001      	movne	r0, #1
 8006ae8:	b002      	add	sp, #8
 8006aea:	4770      	bx	lr
 8006aec:	4610      	mov	r0, r2
 8006aee:	e7fb      	b.n	8006ae8 <__ascii_mbtowc+0x16>
 8006af0:	f06f 0001 	mvn.w	r0, #1
 8006af4:	e7f8      	b.n	8006ae8 <__ascii_mbtowc+0x16>

08006af6 <__ssputs_r>:
 8006af6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006afa:	688e      	ldr	r6, [r1, #8]
 8006afc:	4682      	mov	sl, r0
 8006afe:	429e      	cmp	r6, r3
 8006b00:	460c      	mov	r4, r1
 8006b02:	4690      	mov	r8, r2
 8006b04:	4699      	mov	r9, r3
 8006b06:	d837      	bhi.n	8006b78 <__ssputs_r+0x82>
 8006b08:	898a      	ldrh	r2, [r1, #12]
 8006b0a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006b0e:	d031      	beq.n	8006b74 <__ssputs_r+0x7e>
 8006b10:	2302      	movs	r3, #2
 8006b12:	6825      	ldr	r5, [r4, #0]
 8006b14:	6909      	ldr	r1, [r1, #16]
 8006b16:	1a6f      	subs	r7, r5, r1
 8006b18:	6965      	ldr	r5, [r4, #20]
 8006b1a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b1e:	fb95 f5f3 	sdiv	r5, r5, r3
 8006b22:	f109 0301 	add.w	r3, r9, #1
 8006b26:	443b      	add	r3, r7
 8006b28:	429d      	cmp	r5, r3
 8006b2a:	bf38      	it	cc
 8006b2c:	461d      	movcc	r5, r3
 8006b2e:	0553      	lsls	r3, r2, #21
 8006b30:	d530      	bpl.n	8006b94 <__ssputs_r+0x9e>
 8006b32:	4629      	mov	r1, r5
 8006b34:	f000 fb46 	bl	80071c4 <_malloc_r>
 8006b38:	4606      	mov	r6, r0
 8006b3a:	b950      	cbnz	r0, 8006b52 <__ssputs_r+0x5c>
 8006b3c:	230c      	movs	r3, #12
 8006b3e:	f04f 30ff 	mov.w	r0, #4294967295
 8006b42:	f8ca 3000 	str.w	r3, [sl]
 8006b46:	89a3      	ldrh	r3, [r4, #12]
 8006b48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b4c:	81a3      	strh	r3, [r4, #12]
 8006b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b52:	463a      	mov	r2, r7
 8006b54:	6921      	ldr	r1, [r4, #16]
 8006b56:	f000 fac4 	bl	80070e2 <memcpy>
 8006b5a:	89a3      	ldrh	r3, [r4, #12]
 8006b5c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006b60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b64:	81a3      	strh	r3, [r4, #12]
 8006b66:	6126      	str	r6, [r4, #16]
 8006b68:	443e      	add	r6, r7
 8006b6a:	6026      	str	r6, [r4, #0]
 8006b6c:	464e      	mov	r6, r9
 8006b6e:	6165      	str	r5, [r4, #20]
 8006b70:	1bed      	subs	r5, r5, r7
 8006b72:	60a5      	str	r5, [r4, #8]
 8006b74:	454e      	cmp	r6, r9
 8006b76:	d900      	bls.n	8006b7a <__ssputs_r+0x84>
 8006b78:	464e      	mov	r6, r9
 8006b7a:	4632      	mov	r2, r6
 8006b7c:	4641      	mov	r1, r8
 8006b7e:	6820      	ldr	r0, [r4, #0]
 8006b80:	f000 faba 	bl	80070f8 <memmove>
 8006b84:	68a3      	ldr	r3, [r4, #8]
 8006b86:	2000      	movs	r0, #0
 8006b88:	1b9b      	subs	r3, r3, r6
 8006b8a:	60a3      	str	r3, [r4, #8]
 8006b8c:	6823      	ldr	r3, [r4, #0]
 8006b8e:	441e      	add	r6, r3
 8006b90:	6026      	str	r6, [r4, #0]
 8006b92:	e7dc      	b.n	8006b4e <__ssputs_r+0x58>
 8006b94:	462a      	mov	r2, r5
 8006b96:	f000 fb6f 	bl	8007278 <_realloc_r>
 8006b9a:	4606      	mov	r6, r0
 8006b9c:	2800      	cmp	r0, #0
 8006b9e:	d1e2      	bne.n	8006b66 <__ssputs_r+0x70>
 8006ba0:	6921      	ldr	r1, [r4, #16]
 8006ba2:	4650      	mov	r0, sl
 8006ba4:	f000 fac2 	bl	800712c <_free_r>
 8006ba8:	e7c8      	b.n	8006b3c <__ssputs_r+0x46>
	...

08006bac <_svfiprintf_r>:
 8006bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bb0:	461d      	mov	r5, r3
 8006bb2:	898b      	ldrh	r3, [r1, #12]
 8006bb4:	b09d      	sub	sp, #116	; 0x74
 8006bb6:	061f      	lsls	r7, r3, #24
 8006bb8:	4680      	mov	r8, r0
 8006bba:	460c      	mov	r4, r1
 8006bbc:	4616      	mov	r6, r2
 8006bbe:	d50f      	bpl.n	8006be0 <_svfiprintf_r+0x34>
 8006bc0:	690b      	ldr	r3, [r1, #16]
 8006bc2:	b96b      	cbnz	r3, 8006be0 <_svfiprintf_r+0x34>
 8006bc4:	2140      	movs	r1, #64	; 0x40
 8006bc6:	f000 fafd 	bl	80071c4 <_malloc_r>
 8006bca:	6020      	str	r0, [r4, #0]
 8006bcc:	6120      	str	r0, [r4, #16]
 8006bce:	b928      	cbnz	r0, 8006bdc <_svfiprintf_r+0x30>
 8006bd0:	230c      	movs	r3, #12
 8006bd2:	f8c8 3000 	str.w	r3, [r8]
 8006bd6:	f04f 30ff 	mov.w	r0, #4294967295
 8006bda:	e0c8      	b.n	8006d6e <_svfiprintf_r+0x1c2>
 8006bdc:	2340      	movs	r3, #64	; 0x40
 8006bde:	6163      	str	r3, [r4, #20]
 8006be0:	2300      	movs	r3, #0
 8006be2:	9309      	str	r3, [sp, #36]	; 0x24
 8006be4:	2320      	movs	r3, #32
 8006be6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006bea:	2330      	movs	r3, #48	; 0x30
 8006bec:	f04f 0b01 	mov.w	fp, #1
 8006bf0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006bf4:	9503      	str	r5, [sp, #12]
 8006bf6:	4637      	mov	r7, r6
 8006bf8:	463d      	mov	r5, r7
 8006bfa:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006bfe:	b10b      	cbz	r3, 8006c04 <_svfiprintf_r+0x58>
 8006c00:	2b25      	cmp	r3, #37	; 0x25
 8006c02:	d13e      	bne.n	8006c82 <_svfiprintf_r+0xd6>
 8006c04:	ebb7 0a06 	subs.w	sl, r7, r6
 8006c08:	d00b      	beq.n	8006c22 <_svfiprintf_r+0x76>
 8006c0a:	4653      	mov	r3, sl
 8006c0c:	4632      	mov	r2, r6
 8006c0e:	4621      	mov	r1, r4
 8006c10:	4640      	mov	r0, r8
 8006c12:	f7ff ff70 	bl	8006af6 <__ssputs_r>
 8006c16:	3001      	adds	r0, #1
 8006c18:	f000 80a4 	beq.w	8006d64 <_svfiprintf_r+0x1b8>
 8006c1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c1e:	4453      	add	r3, sl
 8006c20:	9309      	str	r3, [sp, #36]	; 0x24
 8006c22:	783b      	ldrb	r3, [r7, #0]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	f000 809d 	beq.w	8006d64 <_svfiprintf_r+0x1b8>
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8006c30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c34:	9304      	str	r3, [sp, #16]
 8006c36:	9307      	str	r3, [sp, #28]
 8006c38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c3c:	931a      	str	r3, [sp, #104]	; 0x68
 8006c3e:	462f      	mov	r7, r5
 8006c40:	2205      	movs	r2, #5
 8006c42:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006c46:	4850      	ldr	r0, [pc, #320]	; (8006d88 <_svfiprintf_r+0x1dc>)
 8006c48:	f000 fa3d 	bl	80070c6 <memchr>
 8006c4c:	9b04      	ldr	r3, [sp, #16]
 8006c4e:	b9d0      	cbnz	r0, 8006c86 <_svfiprintf_r+0xda>
 8006c50:	06d9      	lsls	r1, r3, #27
 8006c52:	bf44      	itt	mi
 8006c54:	2220      	movmi	r2, #32
 8006c56:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006c5a:	071a      	lsls	r2, r3, #28
 8006c5c:	bf44      	itt	mi
 8006c5e:	222b      	movmi	r2, #43	; 0x2b
 8006c60:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006c64:	782a      	ldrb	r2, [r5, #0]
 8006c66:	2a2a      	cmp	r2, #42	; 0x2a
 8006c68:	d015      	beq.n	8006c96 <_svfiprintf_r+0xea>
 8006c6a:	462f      	mov	r7, r5
 8006c6c:	2000      	movs	r0, #0
 8006c6e:	250a      	movs	r5, #10
 8006c70:	9a07      	ldr	r2, [sp, #28]
 8006c72:	4639      	mov	r1, r7
 8006c74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c78:	3b30      	subs	r3, #48	; 0x30
 8006c7a:	2b09      	cmp	r3, #9
 8006c7c:	d94d      	bls.n	8006d1a <_svfiprintf_r+0x16e>
 8006c7e:	b1b8      	cbz	r0, 8006cb0 <_svfiprintf_r+0x104>
 8006c80:	e00f      	b.n	8006ca2 <_svfiprintf_r+0xf6>
 8006c82:	462f      	mov	r7, r5
 8006c84:	e7b8      	b.n	8006bf8 <_svfiprintf_r+0x4c>
 8006c86:	4a40      	ldr	r2, [pc, #256]	; (8006d88 <_svfiprintf_r+0x1dc>)
 8006c88:	463d      	mov	r5, r7
 8006c8a:	1a80      	subs	r0, r0, r2
 8006c8c:	fa0b f000 	lsl.w	r0, fp, r0
 8006c90:	4318      	orrs	r0, r3
 8006c92:	9004      	str	r0, [sp, #16]
 8006c94:	e7d3      	b.n	8006c3e <_svfiprintf_r+0x92>
 8006c96:	9a03      	ldr	r2, [sp, #12]
 8006c98:	1d11      	adds	r1, r2, #4
 8006c9a:	6812      	ldr	r2, [r2, #0]
 8006c9c:	9103      	str	r1, [sp, #12]
 8006c9e:	2a00      	cmp	r2, #0
 8006ca0:	db01      	blt.n	8006ca6 <_svfiprintf_r+0xfa>
 8006ca2:	9207      	str	r2, [sp, #28]
 8006ca4:	e004      	b.n	8006cb0 <_svfiprintf_r+0x104>
 8006ca6:	4252      	negs	r2, r2
 8006ca8:	f043 0302 	orr.w	r3, r3, #2
 8006cac:	9207      	str	r2, [sp, #28]
 8006cae:	9304      	str	r3, [sp, #16]
 8006cb0:	783b      	ldrb	r3, [r7, #0]
 8006cb2:	2b2e      	cmp	r3, #46	; 0x2e
 8006cb4:	d10c      	bne.n	8006cd0 <_svfiprintf_r+0x124>
 8006cb6:	787b      	ldrb	r3, [r7, #1]
 8006cb8:	2b2a      	cmp	r3, #42	; 0x2a
 8006cba:	d133      	bne.n	8006d24 <_svfiprintf_r+0x178>
 8006cbc:	9b03      	ldr	r3, [sp, #12]
 8006cbe:	3702      	adds	r7, #2
 8006cc0:	1d1a      	adds	r2, r3, #4
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	9203      	str	r2, [sp, #12]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	bfb8      	it	lt
 8006cca:	f04f 33ff 	movlt.w	r3, #4294967295
 8006cce:	9305      	str	r3, [sp, #20]
 8006cd0:	4d2e      	ldr	r5, [pc, #184]	; (8006d8c <_svfiprintf_r+0x1e0>)
 8006cd2:	2203      	movs	r2, #3
 8006cd4:	7839      	ldrb	r1, [r7, #0]
 8006cd6:	4628      	mov	r0, r5
 8006cd8:	f000 f9f5 	bl	80070c6 <memchr>
 8006cdc:	b138      	cbz	r0, 8006cee <_svfiprintf_r+0x142>
 8006cde:	2340      	movs	r3, #64	; 0x40
 8006ce0:	1b40      	subs	r0, r0, r5
 8006ce2:	fa03 f000 	lsl.w	r0, r3, r0
 8006ce6:	9b04      	ldr	r3, [sp, #16]
 8006ce8:	3701      	adds	r7, #1
 8006cea:	4303      	orrs	r3, r0
 8006cec:	9304      	str	r3, [sp, #16]
 8006cee:	7839      	ldrb	r1, [r7, #0]
 8006cf0:	2206      	movs	r2, #6
 8006cf2:	4827      	ldr	r0, [pc, #156]	; (8006d90 <_svfiprintf_r+0x1e4>)
 8006cf4:	1c7e      	adds	r6, r7, #1
 8006cf6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006cfa:	f000 f9e4 	bl	80070c6 <memchr>
 8006cfe:	2800      	cmp	r0, #0
 8006d00:	d038      	beq.n	8006d74 <_svfiprintf_r+0x1c8>
 8006d02:	4b24      	ldr	r3, [pc, #144]	; (8006d94 <_svfiprintf_r+0x1e8>)
 8006d04:	bb13      	cbnz	r3, 8006d4c <_svfiprintf_r+0x1a0>
 8006d06:	9b03      	ldr	r3, [sp, #12]
 8006d08:	3307      	adds	r3, #7
 8006d0a:	f023 0307 	bic.w	r3, r3, #7
 8006d0e:	3308      	adds	r3, #8
 8006d10:	9303      	str	r3, [sp, #12]
 8006d12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d14:	444b      	add	r3, r9
 8006d16:	9309      	str	r3, [sp, #36]	; 0x24
 8006d18:	e76d      	b.n	8006bf6 <_svfiprintf_r+0x4a>
 8006d1a:	fb05 3202 	mla	r2, r5, r2, r3
 8006d1e:	2001      	movs	r0, #1
 8006d20:	460f      	mov	r7, r1
 8006d22:	e7a6      	b.n	8006c72 <_svfiprintf_r+0xc6>
 8006d24:	2300      	movs	r3, #0
 8006d26:	250a      	movs	r5, #10
 8006d28:	4619      	mov	r1, r3
 8006d2a:	3701      	adds	r7, #1
 8006d2c:	9305      	str	r3, [sp, #20]
 8006d2e:	4638      	mov	r0, r7
 8006d30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d34:	3a30      	subs	r2, #48	; 0x30
 8006d36:	2a09      	cmp	r2, #9
 8006d38:	d903      	bls.n	8006d42 <_svfiprintf_r+0x196>
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d0c8      	beq.n	8006cd0 <_svfiprintf_r+0x124>
 8006d3e:	9105      	str	r1, [sp, #20]
 8006d40:	e7c6      	b.n	8006cd0 <_svfiprintf_r+0x124>
 8006d42:	fb05 2101 	mla	r1, r5, r1, r2
 8006d46:	2301      	movs	r3, #1
 8006d48:	4607      	mov	r7, r0
 8006d4a:	e7f0      	b.n	8006d2e <_svfiprintf_r+0x182>
 8006d4c:	ab03      	add	r3, sp, #12
 8006d4e:	9300      	str	r3, [sp, #0]
 8006d50:	4622      	mov	r2, r4
 8006d52:	4b11      	ldr	r3, [pc, #68]	; (8006d98 <_svfiprintf_r+0x1ec>)
 8006d54:	a904      	add	r1, sp, #16
 8006d56:	4640      	mov	r0, r8
 8006d58:	f3af 8000 	nop.w
 8006d5c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006d60:	4681      	mov	r9, r0
 8006d62:	d1d6      	bne.n	8006d12 <_svfiprintf_r+0x166>
 8006d64:	89a3      	ldrh	r3, [r4, #12]
 8006d66:	065b      	lsls	r3, r3, #25
 8006d68:	f53f af35 	bmi.w	8006bd6 <_svfiprintf_r+0x2a>
 8006d6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d6e:	b01d      	add	sp, #116	; 0x74
 8006d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d74:	ab03      	add	r3, sp, #12
 8006d76:	9300      	str	r3, [sp, #0]
 8006d78:	4622      	mov	r2, r4
 8006d7a:	4b07      	ldr	r3, [pc, #28]	; (8006d98 <_svfiprintf_r+0x1ec>)
 8006d7c:	a904      	add	r1, sp, #16
 8006d7e:	4640      	mov	r0, r8
 8006d80:	f000 f882 	bl	8006e88 <_printf_i>
 8006d84:	e7ea      	b.n	8006d5c <_svfiprintf_r+0x1b0>
 8006d86:	bf00      	nop
 8006d88:	08007522 	.word	0x08007522
 8006d8c:	08007528 	.word	0x08007528
 8006d90:	0800752c 	.word	0x0800752c
 8006d94:	00000000 	.word	0x00000000
 8006d98:	08006af7 	.word	0x08006af7

08006d9c <_printf_common>:
 8006d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006da0:	4691      	mov	r9, r2
 8006da2:	461f      	mov	r7, r3
 8006da4:	688a      	ldr	r2, [r1, #8]
 8006da6:	690b      	ldr	r3, [r1, #16]
 8006da8:	4606      	mov	r6, r0
 8006daa:	4293      	cmp	r3, r2
 8006dac:	bfb8      	it	lt
 8006dae:	4613      	movlt	r3, r2
 8006db0:	f8c9 3000 	str.w	r3, [r9]
 8006db4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006db8:	460c      	mov	r4, r1
 8006dba:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006dbe:	b112      	cbz	r2, 8006dc6 <_printf_common+0x2a>
 8006dc0:	3301      	adds	r3, #1
 8006dc2:	f8c9 3000 	str.w	r3, [r9]
 8006dc6:	6823      	ldr	r3, [r4, #0]
 8006dc8:	0699      	lsls	r1, r3, #26
 8006dca:	bf42      	ittt	mi
 8006dcc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006dd0:	3302      	addmi	r3, #2
 8006dd2:	f8c9 3000 	strmi.w	r3, [r9]
 8006dd6:	6825      	ldr	r5, [r4, #0]
 8006dd8:	f015 0506 	ands.w	r5, r5, #6
 8006ddc:	d107      	bne.n	8006dee <_printf_common+0x52>
 8006dde:	f104 0a19 	add.w	sl, r4, #25
 8006de2:	68e3      	ldr	r3, [r4, #12]
 8006de4:	f8d9 2000 	ldr.w	r2, [r9]
 8006de8:	1a9b      	subs	r3, r3, r2
 8006dea:	42ab      	cmp	r3, r5
 8006dec:	dc29      	bgt.n	8006e42 <_printf_common+0xa6>
 8006dee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006df2:	6822      	ldr	r2, [r4, #0]
 8006df4:	3300      	adds	r3, #0
 8006df6:	bf18      	it	ne
 8006df8:	2301      	movne	r3, #1
 8006dfa:	0692      	lsls	r2, r2, #26
 8006dfc:	d42e      	bmi.n	8006e5c <_printf_common+0xc0>
 8006dfe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e02:	4639      	mov	r1, r7
 8006e04:	4630      	mov	r0, r6
 8006e06:	47c0      	blx	r8
 8006e08:	3001      	adds	r0, #1
 8006e0a:	d021      	beq.n	8006e50 <_printf_common+0xb4>
 8006e0c:	6823      	ldr	r3, [r4, #0]
 8006e0e:	68e5      	ldr	r5, [r4, #12]
 8006e10:	f003 0306 	and.w	r3, r3, #6
 8006e14:	2b04      	cmp	r3, #4
 8006e16:	bf18      	it	ne
 8006e18:	2500      	movne	r5, #0
 8006e1a:	f8d9 2000 	ldr.w	r2, [r9]
 8006e1e:	f04f 0900 	mov.w	r9, #0
 8006e22:	bf08      	it	eq
 8006e24:	1aad      	subeq	r5, r5, r2
 8006e26:	68a3      	ldr	r3, [r4, #8]
 8006e28:	6922      	ldr	r2, [r4, #16]
 8006e2a:	bf08      	it	eq
 8006e2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e30:	4293      	cmp	r3, r2
 8006e32:	bfc4      	itt	gt
 8006e34:	1a9b      	subgt	r3, r3, r2
 8006e36:	18ed      	addgt	r5, r5, r3
 8006e38:	341a      	adds	r4, #26
 8006e3a:	454d      	cmp	r5, r9
 8006e3c:	d11a      	bne.n	8006e74 <_printf_common+0xd8>
 8006e3e:	2000      	movs	r0, #0
 8006e40:	e008      	b.n	8006e54 <_printf_common+0xb8>
 8006e42:	2301      	movs	r3, #1
 8006e44:	4652      	mov	r2, sl
 8006e46:	4639      	mov	r1, r7
 8006e48:	4630      	mov	r0, r6
 8006e4a:	47c0      	blx	r8
 8006e4c:	3001      	adds	r0, #1
 8006e4e:	d103      	bne.n	8006e58 <_printf_common+0xbc>
 8006e50:	f04f 30ff 	mov.w	r0, #4294967295
 8006e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e58:	3501      	adds	r5, #1
 8006e5a:	e7c2      	b.n	8006de2 <_printf_common+0x46>
 8006e5c:	2030      	movs	r0, #48	; 0x30
 8006e5e:	18e1      	adds	r1, r4, r3
 8006e60:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006e64:	1c5a      	adds	r2, r3, #1
 8006e66:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006e6a:	4422      	add	r2, r4
 8006e6c:	3302      	adds	r3, #2
 8006e6e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006e72:	e7c4      	b.n	8006dfe <_printf_common+0x62>
 8006e74:	2301      	movs	r3, #1
 8006e76:	4622      	mov	r2, r4
 8006e78:	4639      	mov	r1, r7
 8006e7a:	4630      	mov	r0, r6
 8006e7c:	47c0      	blx	r8
 8006e7e:	3001      	adds	r0, #1
 8006e80:	d0e6      	beq.n	8006e50 <_printf_common+0xb4>
 8006e82:	f109 0901 	add.w	r9, r9, #1
 8006e86:	e7d8      	b.n	8006e3a <_printf_common+0x9e>

08006e88 <_printf_i>:
 8006e88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006e8c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006e90:	460c      	mov	r4, r1
 8006e92:	7e09      	ldrb	r1, [r1, #24]
 8006e94:	b085      	sub	sp, #20
 8006e96:	296e      	cmp	r1, #110	; 0x6e
 8006e98:	4617      	mov	r7, r2
 8006e9a:	4606      	mov	r6, r0
 8006e9c:	4698      	mov	r8, r3
 8006e9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ea0:	f000 80b3 	beq.w	800700a <_printf_i+0x182>
 8006ea4:	d822      	bhi.n	8006eec <_printf_i+0x64>
 8006ea6:	2963      	cmp	r1, #99	; 0x63
 8006ea8:	d036      	beq.n	8006f18 <_printf_i+0x90>
 8006eaa:	d80a      	bhi.n	8006ec2 <_printf_i+0x3a>
 8006eac:	2900      	cmp	r1, #0
 8006eae:	f000 80b9 	beq.w	8007024 <_printf_i+0x19c>
 8006eb2:	2958      	cmp	r1, #88	; 0x58
 8006eb4:	f000 8083 	beq.w	8006fbe <_printf_i+0x136>
 8006eb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ebc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006ec0:	e032      	b.n	8006f28 <_printf_i+0xa0>
 8006ec2:	2964      	cmp	r1, #100	; 0x64
 8006ec4:	d001      	beq.n	8006eca <_printf_i+0x42>
 8006ec6:	2969      	cmp	r1, #105	; 0x69
 8006ec8:	d1f6      	bne.n	8006eb8 <_printf_i+0x30>
 8006eca:	6820      	ldr	r0, [r4, #0]
 8006ecc:	6813      	ldr	r3, [r2, #0]
 8006ece:	0605      	lsls	r5, r0, #24
 8006ed0:	f103 0104 	add.w	r1, r3, #4
 8006ed4:	d52a      	bpl.n	8006f2c <_printf_i+0xa4>
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	6011      	str	r1, [r2, #0]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	da03      	bge.n	8006ee6 <_printf_i+0x5e>
 8006ede:	222d      	movs	r2, #45	; 0x2d
 8006ee0:	425b      	negs	r3, r3
 8006ee2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006ee6:	486f      	ldr	r0, [pc, #444]	; (80070a4 <_printf_i+0x21c>)
 8006ee8:	220a      	movs	r2, #10
 8006eea:	e039      	b.n	8006f60 <_printf_i+0xd8>
 8006eec:	2973      	cmp	r1, #115	; 0x73
 8006eee:	f000 809d 	beq.w	800702c <_printf_i+0x1a4>
 8006ef2:	d808      	bhi.n	8006f06 <_printf_i+0x7e>
 8006ef4:	296f      	cmp	r1, #111	; 0x6f
 8006ef6:	d020      	beq.n	8006f3a <_printf_i+0xb2>
 8006ef8:	2970      	cmp	r1, #112	; 0x70
 8006efa:	d1dd      	bne.n	8006eb8 <_printf_i+0x30>
 8006efc:	6823      	ldr	r3, [r4, #0]
 8006efe:	f043 0320 	orr.w	r3, r3, #32
 8006f02:	6023      	str	r3, [r4, #0]
 8006f04:	e003      	b.n	8006f0e <_printf_i+0x86>
 8006f06:	2975      	cmp	r1, #117	; 0x75
 8006f08:	d017      	beq.n	8006f3a <_printf_i+0xb2>
 8006f0a:	2978      	cmp	r1, #120	; 0x78
 8006f0c:	d1d4      	bne.n	8006eb8 <_printf_i+0x30>
 8006f0e:	2378      	movs	r3, #120	; 0x78
 8006f10:	4865      	ldr	r0, [pc, #404]	; (80070a8 <_printf_i+0x220>)
 8006f12:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006f16:	e055      	b.n	8006fc4 <_printf_i+0x13c>
 8006f18:	6813      	ldr	r3, [r2, #0]
 8006f1a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f1e:	1d19      	adds	r1, r3, #4
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	6011      	str	r1, [r2, #0]
 8006f24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e08c      	b.n	8007046 <_printf_i+0x1be>
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006f32:	6011      	str	r1, [r2, #0]
 8006f34:	bf18      	it	ne
 8006f36:	b21b      	sxthne	r3, r3
 8006f38:	e7cf      	b.n	8006eda <_printf_i+0x52>
 8006f3a:	6813      	ldr	r3, [r2, #0]
 8006f3c:	6825      	ldr	r5, [r4, #0]
 8006f3e:	1d18      	adds	r0, r3, #4
 8006f40:	6010      	str	r0, [r2, #0]
 8006f42:	0628      	lsls	r0, r5, #24
 8006f44:	d501      	bpl.n	8006f4a <_printf_i+0xc2>
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	e002      	b.n	8006f50 <_printf_i+0xc8>
 8006f4a:	0668      	lsls	r0, r5, #25
 8006f4c:	d5fb      	bpl.n	8006f46 <_printf_i+0xbe>
 8006f4e:	881b      	ldrh	r3, [r3, #0]
 8006f50:	296f      	cmp	r1, #111	; 0x6f
 8006f52:	bf14      	ite	ne
 8006f54:	220a      	movne	r2, #10
 8006f56:	2208      	moveq	r2, #8
 8006f58:	4852      	ldr	r0, [pc, #328]	; (80070a4 <_printf_i+0x21c>)
 8006f5a:	2100      	movs	r1, #0
 8006f5c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006f60:	6865      	ldr	r5, [r4, #4]
 8006f62:	2d00      	cmp	r5, #0
 8006f64:	60a5      	str	r5, [r4, #8]
 8006f66:	f2c0 8095 	blt.w	8007094 <_printf_i+0x20c>
 8006f6a:	6821      	ldr	r1, [r4, #0]
 8006f6c:	f021 0104 	bic.w	r1, r1, #4
 8006f70:	6021      	str	r1, [r4, #0]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d13d      	bne.n	8006ff2 <_printf_i+0x16a>
 8006f76:	2d00      	cmp	r5, #0
 8006f78:	f040 808e 	bne.w	8007098 <_printf_i+0x210>
 8006f7c:	4665      	mov	r5, ip
 8006f7e:	2a08      	cmp	r2, #8
 8006f80:	d10b      	bne.n	8006f9a <_printf_i+0x112>
 8006f82:	6823      	ldr	r3, [r4, #0]
 8006f84:	07db      	lsls	r3, r3, #31
 8006f86:	d508      	bpl.n	8006f9a <_printf_i+0x112>
 8006f88:	6923      	ldr	r3, [r4, #16]
 8006f8a:	6862      	ldr	r2, [r4, #4]
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	bfde      	ittt	le
 8006f90:	2330      	movle	r3, #48	; 0x30
 8006f92:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006f96:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006f9a:	ebac 0305 	sub.w	r3, ip, r5
 8006f9e:	6123      	str	r3, [r4, #16]
 8006fa0:	f8cd 8000 	str.w	r8, [sp]
 8006fa4:	463b      	mov	r3, r7
 8006fa6:	aa03      	add	r2, sp, #12
 8006fa8:	4621      	mov	r1, r4
 8006faa:	4630      	mov	r0, r6
 8006fac:	f7ff fef6 	bl	8006d9c <_printf_common>
 8006fb0:	3001      	adds	r0, #1
 8006fb2:	d14d      	bne.n	8007050 <_printf_i+0x1c8>
 8006fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8006fb8:	b005      	add	sp, #20
 8006fba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006fbe:	4839      	ldr	r0, [pc, #228]	; (80070a4 <_printf_i+0x21c>)
 8006fc0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006fc4:	6813      	ldr	r3, [r2, #0]
 8006fc6:	6821      	ldr	r1, [r4, #0]
 8006fc8:	1d1d      	adds	r5, r3, #4
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	6015      	str	r5, [r2, #0]
 8006fce:	060a      	lsls	r2, r1, #24
 8006fd0:	d50b      	bpl.n	8006fea <_printf_i+0x162>
 8006fd2:	07ca      	lsls	r2, r1, #31
 8006fd4:	bf44      	itt	mi
 8006fd6:	f041 0120 	orrmi.w	r1, r1, #32
 8006fda:	6021      	strmi	r1, [r4, #0]
 8006fdc:	b91b      	cbnz	r3, 8006fe6 <_printf_i+0x15e>
 8006fde:	6822      	ldr	r2, [r4, #0]
 8006fe0:	f022 0220 	bic.w	r2, r2, #32
 8006fe4:	6022      	str	r2, [r4, #0]
 8006fe6:	2210      	movs	r2, #16
 8006fe8:	e7b7      	b.n	8006f5a <_printf_i+0xd2>
 8006fea:	064d      	lsls	r5, r1, #25
 8006fec:	bf48      	it	mi
 8006fee:	b29b      	uxthmi	r3, r3
 8006ff0:	e7ef      	b.n	8006fd2 <_printf_i+0x14a>
 8006ff2:	4665      	mov	r5, ip
 8006ff4:	fbb3 f1f2 	udiv	r1, r3, r2
 8006ff8:	fb02 3311 	mls	r3, r2, r1, r3
 8006ffc:	5cc3      	ldrb	r3, [r0, r3]
 8006ffe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007002:	460b      	mov	r3, r1
 8007004:	2900      	cmp	r1, #0
 8007006:	d1f5      	bne.n	8006ff4 <_printf_i+0x16c>
 8007008:	e7b9      	b.n	8006f7e <_printf_i+0xf6>
 800700a:	6813      	ldr	r3, [r2, #0]
 800700c:	6825      	ldr	r5, [r4, #0]
 800700e:	1d18      	adds	r0, r3, #4
 8007010:	6961      	ldr	r1, [r4, #20]
 8007012:	6010      	str	r0, [r2, #0]
 8007014:	0628      	lsls	r0, r5, #24
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	d501      	bpl.n	800701e <_printf_i+0x196>
 800701a:	6019      	str	r1, [r3, #0]
 800701c:	e002      	b.n	8007024 <_printf_i+0x19c>
 800701e:	066a      	lsls	r2, r5, #25
 8007020:	d5fb      	bpl.n	800701a <_printf_i+0x192>
 8007022:	8019      	strh	r1, [r3, #0]
 8007024:	2300      	movs	r3, #0
 8007026:	4665      	mov	r5, ip
 8007028:	6123      	str	r3, [r4, #16]
 800702a:	e7b9      	b.n	8006fa0 <_printf_i+0x118>
 800702c:	6813      	ldr	r3, [r2, #0]
 800702e:	1d19      	adds	r1, r3, #4
 8007030:	6011      	str	r1, [r2, #0]
 8007032:	681d      	ldr	r5, [r3, #0]
 8007034:	6862      	ldr	r2, [r4, #4]
 8007036:	2100      	movs	r1, #0
 8007038:	4628      	mov	r0, r5
 800703a:	f000 f844 	bl	80070c6 <memchr>
 800703e:	b108      	cbz	r0, 8007044 <_printf_i+0x1bc>
 8007040:	1b40      	subs	r0, r0, r5
 8007042:	6060      	str	r0, [r4, #4]
 8007044:	6863      	ldr	r3, [r4, #4]
 8007046:	6123      	str	r3, [r4, #16]
 8007048:	2300      	movs	r3, #0
 800704a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800704e:	e7a7      	b.n	8006fa0 <_printf_i+0x118>
 8007050:	6923      	ldr	r3, [r4, #16]
 8007052:	462a      	mov	r2, r5
 8007054:	4639      	mov	r1, r7
 8007056:	4630      	mov	r0, r6
 8007058:	47c0      	blx	r8
 800705a:	3001      	adds	r0, #1
 800705c:	d0aa      	beq.n	8006fb4 <_printf_i+0x12c>
 800705e:	6823      	ldr	r3, [r4, #0]
 8007060:	079b      	lsls	r3, r3, #30
 8007062:	d413      	bmi.n	800708c <_printf_i+0x204>
 8007064:	68e0      	ldr	r0, [r4, #12]
 8007066:	9b03      	ldr	r3, [sp, #12]
 8007068:	4298      	cmp	r0, r3
 800706a:	bfb8      	it	lt
 800706c:	4618      	movlt	r0, r3
 800706e:	e7a3      	b.n	8006fb8 <_printf_i+0x130>
 8007070:	2301      	movs	r3, #1
 8007072:	464a      	mov	r2, r9
 8007074:	4639      	mov	r1, r7
 8007076:	4630      	mov	r0, r6
 8007078:	47c0      	blx	r8
 800707a:	3001      	adds	r0, #1
 800707c:	d09a      	beq.n	8006fb4 <_printf_i+0x12c>
 800707e:	3501      	adds	r5, #1
 8007080:	68e3      	ldr	r3, [r4, #12]
 8007082:	9a03      	ldr	r2, [sp, #12]
 8007084:	1a9b      	subs	r3, r3, r2
 8007086:	42ab      	cmp	r3, r5
 8007088:	dcf2      	bgt.n	8007070 <_printf_i+0x1e8>
 800708a:	e7eb      	b.n	8007064 <_printf_i+0x1dc>
 800708c:	2500      	movs	r5, #0
 800708e:	f104 0919 	add.w	r9, r4, #25
 8007092:	e7f5      	b.n	8007080 <_printf_i+0x1f8>
 8007094:	2b00      	cmp	r3, #0
 8007096:	d1ac      	bne.n	8006ff2 <_printf_i+0x16a>
 8007098:	7803      	ldrb	r3, [r0, #0]
 800709a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800709e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80070a2:	e76c      	b.n	8006f7e <_printf_i+0xf6>
 80070a4:	08007533 	.word	0x08007533
 80070a8:	08007544 	.word	0x08007544

080070ac <__ascii_wctomb>:
 80070ac:	b149      	cbz	r1, 80070c2 <__ascii_wctomb+0x16>
 80070ae:	2aff      	cmp	r2, #255	; 0xff
 80070b0:	bf8b      	itete	hi
 80070b2:	238a      	movhi	r3, #138	; 0x8a
 80070b4:	700a      	strbls	r2, [r1, #0]
 80070b6:	6003      	strhi	r3, [r0, #0]
 80070b8:	2001      	movls	r0, #1
 80070ba:	bf88      	it	hi
 80070bc:	f04f 30ff 	movhi.w	r0, #4294967295
 80070c0:	4770      	bx	lr
 80070c2:	4608      	mov	r0, r1
 80070c4:	4770      	bx	lr

080070c6 <memchr>:
 80070c6:	b510      	push	{r4, lr}
 80070c8:	b2c9      	uxtb	r1, r1
 80070ca:	4402      	add	r2, r0
 80070cc:	4290      	cmp	r0, r2
 80070ce:	4603      	mov	r3, r0
 80070d0:	d101      	bne.n	80070d6 <memchr+0x10>
 80070d2:	2300      	movs	r3, #0
 80070d4:	e003      	b.n	80070de <memchr+0x18>
 80070d6:	781c      	ldrb	r4, [r3, #0]
 80070d8:	3001      	adds	r0, #1
 80070da:	428c      	cmp	r4, r1
 80070dc:	d1f6      	bne.n	80070cc <memchr+0x6>
 80070de:	4618      	mov	r0, r3
 80070e0:	bd10      	pop	{r4, pc}

080070e2 <memcpy>:
 80070e2:	b510      	push	{r4, lr}
 80070e4:	1e43      	subs	r3, r0, #1
 80070e6:	440a      	add	r2, r1
 80070e8:	4291      	cmp	r1, r2
 80070ea:	d100      	bne.n	80070ee <memcpy+0xc>
 80070ec:	bd10      	pop	{r4, pc}
 80070ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070f6:	e7f7      	b.n	80070e8 <memcpy+0x6>

080070f8 <memmove>:
 80070f8:	4288      	cmp	r0, r1
 80070fa:	b510      	push	{r4, lr}
 80070fc:	eb01 0302 	add.w	r3, r1, r2
 8007100:	d807      	bhi.n	8007112 <memmove+0x1a>
 8007102:	1e42      	subs	r2, r0, #1
 8007104:	4299      	cmp	r1, r3
 8007106:	d00a      	beq.n	800711e <memmove+0x26>
 8007108:	f811 4b01 	ldrb.w	r4, [r1], #1
 800710c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007110:	e7f8      	b.n	8007104 <memmove+0xc>
 8007112:	4283      	cmp	r3, r0
 8007114:	d9f5      	bls.n	8007102 <memmove+0xa>
 8007116:	1881      	adds	r1, r0, r2
 8007118:	1ad2      	subs	r2, r2, r3
 800711a:	42d3      	cmn	r3, r2
 800711c:	d100      	bne.n	8007120 <memmove+0x28>
 800711e:	bd10      	pop	{r4, pc}
 8007120:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007124:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007128:	e7f7      	b.n	800711a <memmove+0x22>
	...

0800712c <_free_r>:
 800712c:	b538      	push	{r3, r4, r5, lr}
 800712e:	4605      	mov	r5, r0
 8007130:	2900      	cmp	r1, #0
 8007132:	d043      	beq.n	80071bc <_free_r+0x90>
 8007134:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007138:	1f0c      	subs	r4, r1, #4
 800713a:	2b00      	cmp	r3, #0
 800713c:	bfb8      	it	lt
 800713e:	18e4      	addlt	r4, r4, r3
 8007140:	f000 f8d0 	bl	80072e4 <__malloc_lock>
 8007144:	4a1e      	ldr	r2, [pc, #120]	; (80071c0 <_free_r+0x94>)
 8007146:	6813      	ldr	r3, [r2, #0]
 8007148:	4610      	mov	r0, r2
 800714a:	b933      	cbnz	r3, 800715a <_free_r+0x2e>
 800714c:	6063      	str	r3, [r4, #4]
 800714e:	6014      	str	r4, [r2, #0]
 8007150:	4628      	mov	r0, r5
 8007152:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007156:	f000 b8c6 	b.w	80072e6 <__malloc_unlock>
 800715a:	42a3      	cmp	r3, r4
 800715c:	d90b      	bls.n	8007176 <_free_r+0x4a>
 800715e:	6821      	ldr	r1, [r4, #0]
 8007160:	1862      	adds	r2, r4, r1
 8007162:	4293      	cmp	r3, r2
 8007164:	bf01      	itttt	eq
 8007166:	681a      	ldreq	r2, [r3, #0]
 8007168:	685b      	ldreq	r3, [r3, #4]
 800716a:	1852      	addeq	r2, r2, r1
 800716c:	6022      	streq	r2, [r4, #0]
 800716e:	6063      	str	r3, [r4, #4]
 8007170:	6004      	str	r4, [r0, #0]
 8007172:	e7ed      	b.n	8007150 <_free_r+0x24>
 8007174:	4613      	mov	r3, r2
 8007176:	685a      	ldr	r2, [r3, #4]
 8007178:	b10a      	cbz	r2, 800717e <_free_r+0x52>
 800717a:	42a2      	cmp	r2, r4
 800717c:	d9fa      	bls.n	8007174 <_free_r+0x48>
 800717e:	6819      	ldr	r1, [r3, #0]
 8007180:	1858      	adds	r0, r3, r1
 8007182:	42a0      	cmp	r0, r4
 8007184:	d10b      	bne.n	800719e <_free_r+0x72>
 8007186:	6820      	ldr	r0, [r4, #0]
 8007188:	4401      	add	r1, r0
 800718a:	1858      	adds	r0, r3, r1
 800718c:	4282      	cmp	r2, r0
 800718e:	6019      	str	r1, [r3, #0]
 8007190:	d1de      	bne.n	8007150 <_free_r+0x24>
 8007192:	6810      	ldr	r0, [r2, #0]
 8007194:	6852      	ldr	r2, [r2, #4]
 8007196:	4401      	add	r1, r0
 8007198:	6019      	str	r1, [r3, #0]
 800719a:	605a      	str	r2, [r3, #4]
 800719c:	e7d8      	b.n	8007150 <_free_r+0x24>
 800719e:	d902      	bls.n	80071a6 <_free_r+0x7a>
 80071a0:	230c      	movs	r3, #12
 80071a2:	602b      	str	r3, [r5, #0]
 80071a4:	e7d4      	b.n	8007150 <_free_r+0x24>
 80071a6:	6820      	ldr	r0, [r4, #0]
 80071a8:	1821      	adds	r1, r4, r0
 80071aa:	428a      	cmp	r2, r1
 80071ac:	bf01      	itttt	eq
 80071ae:	6811      	ldreq	r1, [r2, #0]
 80071b0:	6852      	ldreq	r2, [r2, #4]
 80071b2:	1809      	addeq	r1, r1, r0
 80071b4:	6021      	streq	r1, [r4, #0]
 80071b6:	6062      	str	r2, [r4, #4]
 80071b8:	605c      	str	r4, [r3, #4]
 80071ba:	e7c9      	b.n	8007150 <_free_r+0x24>
 80071bc:	bd38      	pop	{r3, r4, r5, pc}
 80071be:	bf00      	nop
 80071c0:	2000066c 	.word	0x2000066c

080071c4 <_malloc_r>:
 80071c4:	b570      	push	{r4, r5, r6, lr}
 80071c6:	1ccd      	adds	r5, r1, #3
 80071c8:	f025 0503 	bic.w	r5, r5, #3
 80071cc:	3508      	adds	r5, #8
 80071ce:	2d0c      	cmp	r5, #12
 80071d0:	bf38      	it	cc
 80071d2:	250c      	movcc	r5, #12
 80071d4:	2d00      	cmp	r5, #0
 80071d6:	4606      	mov	r6, r0
 80071d8:	db01      	blt.n	80071de <_malloc_r+0x1a>
 80071da:	42a9      	cmp	r1, r5
 80071dc:	d903      	bls.n	80071e6 <_malloc_r+0x22>
 80071de:	230c      	movs	r3, #12
 80071e0:	6033      	str	r3, [r6, #0]
 80071e2:	2000      	movs	r0, #0
 80071e4:	bd70      	pop	{r4, r5, r6, pc}
 80071e6:	f000 f87d 	bl	80072e4 <__malloc_lock>
 80071ea:	4a21      	ldr	r2, [pc, #132]	; (8007270 <_malloc_r+0xac>)
 80071ec:	6814      	ldr	r4, [r2, #0]
 80071ee:	4621      	mov	r1, r4
 80071f0:	b991      	cbnz	r1, 8007218 <_malloc_r+0x54>
 80071f2:	4c20      	ldr	r4, [pc, #128]	; (8007274 <_malloc_r+0xb0>)
 80071f4:	6823      	ldr	r3, [r4, #0]
 80071f6:	b91b      	cbnz	r3, 8007200 <_malloc_r+0x3c>
 80071f8:	4630      	mov	r0, r6
 80071fa:	f000 f863 	bl	80072c4 <_sbrk_r>
 80071fe:	6020      	str	r0, [r4, #0]
 8007200:	4629      	mov	r1, r5
 8007202:	4630      	mov	r0, r6
 8007204:	f000 f85e 	bl	80072c4 <_sbrk_r>
 8007208:	1c43      	adds	r3, r0, #1
 800720a:	d124      	bne.n	8007256 <_malloc_r+0x92>
 800720c:	230c      	movs	r3, #12
 800720e:	4630      	mov	r0, r6
 8007210:	6033      	str	r3, [r6, #0]
 8007212:	f000 f868 	bl	80072e6 <__malloc_unlock>
 8007216:	e7e4      	b.n	80071e2 <_malloc_r+0x1e>
 8007218:	680b      	ldr	r3, [r1, #0]
 800721a:	1b5b      	subs	r3, r3, r5
 800721c:	d418      	bmi.n	8007250 <_malloc_r+0x8c>
 800721e:	2b0b      	cmp	r3, #11
 8007220:	d90f      	bls.n	8007242 <_malloc_r+0x7e>
 8007222:	600b      	str	r3, [r1, #0]
 8007224:	18cc      	adds	r4, r1, r3
 8007226:	50cd      	str	r5, [r1, r3]
 8007228:	4630      	mov	r0, r6
 800722a:	f000 f85c 	bl	80072e6 <__malloc_unlock>
 800722e:	f104 000b 	add.w	r0, r4, #11
 8007232:	1d23      	adds	r3, r4, #4
 8007234:	f020 0007 	bic.w	r0, r0, #7
 8007238:	1ac3      	subs	r3, r0, r3
 800723a:	d0d3      	beq.n	80071e4 <_malloc_r+0x20>
 800723c:	425a      	negs	r2, r3
 800723e:	50e2      	str	r2, [r4, r3]
 8007240:	e7d0      	b.n	80071e4 <_malloc_r+0x20>
 8007242:	684b      	ldr	r3, [r1, #4]
 8007244:	428c      	cmp	r4, r1
 8007246:	bf16      	itet	ne
 8007248:	6063      	strne	r3, [r4, #4]
 800724a:	6013      	streq	r3, [r2, #0]
 800724c:	460c      	movne	r4, r1
 800724e:	e7eb      	b.n	8007228 <_malloc_r+0x64>
 8007250:	460c      	mov	r4, r1
 8007252:	6849      	ldr	r1, [r1, #4]
 8007254:	e7cc      	b.n	80071f0 <_malloc_r+0x2c>
 8007256:	1cc4      	adds	r4, r0, #3
 8007258:	f024 0403 	bic.w	r4, r4, #3
 800725c:	42a0      	cmp	r0, r4
 800725e:	d005      	beq.n	800726c <_malloc_r+0xa8>
 8007260:	1a21      	subs	r1, r4, r0
 8007262:	4630      	mov	r0, r6
 8007264:	f000 f82e 	bl	80072c4 <_sbrk_r>
 8007268:	3001      	adds	r0, #1
 800726a:	d0cf      	beq.n	800720c <_malloc_r+0x48>
 800726c:	6025      	str	r5, [r4, #0]
 800726e:	e7db      	b.n	8007228 <_malloc_r+0x64>
 8007270:	2000066c 	.word	0x2000066c
 8007274:	20000670 	.word	0x20000670

08007278 <_realloc_r>:
 8007278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800727a:	4607      	mov	r7, r0
 800727c:	4614      	mov	r4, r2
 800727e:	460e      	mov	r6, r1
 8007280:	b921      	cbnz	r1, 800728c <_realloc_r+0x14>
 8007282:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007286:	4611      	mov	r1, r2
 8007288:	f7ff bf9c 	b.w	80071c4 <_malloc_r>
 800728c:	b922      	cbnz	r2, 8007298 <_realloc_r+0x20>
 800728e:	f7ff ff4d 	bl	800712c <_free_r>
 8007292:	4625      	mov	r5, r4
 8007294:	4628      	mov	r0, r5
 8007296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007298:	f000 f826 	bl	80072e8 <_malloc_usable_size_r>
 800729c:	42a0      	cmp	r0, r4
 800729e:	d20f      	bcs.n	80072c0 <_realloc_r+0x48>
 80072a0:	4621      	mov	r1, r4
 80072a2:	4638      	mov	r0, r7
 80072a4:	f7ff ff8e 	bl	80071c4 <_malloc_r>
 80072a8:	4605      	mov	r5, r0
 80072aa:	2800      	cmp	r0, #0
 80072ac:	d0f2      	beq.n	8007294 <_realloc_r+0x1c>
 80072ae:	4631      	mov	r1, r6
 80072b0:	4622      	mov	r2, r4
 80072b2:	f7ff ff16 	bl	80070e2 <memcpy>
 80072b6:	4631      	mov	r1, r6
 80072b8:	4638      	mov	r0, r7
 80072ba:	f7ff ff37 	bl	800712c <_free_r>
 80072be:	e7e9      	b.n	8007294 <_realloc_r+0x1c>
 80072c0:	4635      	mov	r5, r6
 80072c2:	e7e7      	b.n	8007294 <_realloc_r+0x1c>

080072c4 <_sbrk_r>:
 80072c4:	b538      	push	{r3, r4, r5, lr}
 80072c6:	2300      	movs	r3, #0
 80072c8:	4c05      	ldr	r4, [pc, #20]	; (80072e0 <_sbrk_r+0x1c>)
 80072ca:	4605      	mov	r5, r0
 80072cc:	4608      	mov	r0, r1
 80072ce:	6023      	str	r3, [r4, #0]
 80072d0:	f7fe fe6c 	bl	8005fac <_sbrk>
 80072d4:	1c43      	adds	r3, r0, #1
 80072d6:	d102      	bne.n	80072de <_sbrk_r+0x1a>
 80072d8:	6823      	ldr	r3, [r4, #0]
 80072da:	b103      	cbz	r3, 80072de <_sbrk_r+0x1a>
 80072dc:	602b      	str	r3, [r5, #0]
 80072de:	bd38      	pop	{r3, r4, r5, pc}
 80072e0:	20000f38 	.word	0x20000f38

080072e4 <__malloc_lock>:
 80072e4:	4770      	bx	lr

080072e6 <__malloc_unlock>:
 80072e6:	4770      	bx	lr

080072e8 <_malloc_usable_size_r>:
 80072e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072ec:	1f18      	subs	r0, r3, #4
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	bfbc      	itt	lt
 80072f2:	580b      	ldrlt	r3, [r1, r0]
 80072f4:	18c0      	addlt	r0, r0, r3
 80072f6:	4770      	bx	lr

080072f8 <_init>:
 80072f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072fa:	bf00      	nop
 80072fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072fe:	bc08      	pop	{r3}
 8007300:	469e      	mov	lr, r3
 8007302:	4770      	bx	lr

08007304 <_fini>:
 8007304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007306:	bf00      	nop
 8007308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800730a:	bc08      	pop	{r3}
 800730c:	469e      	mov	lr, r3
 800730e:	4770      	bx	lr
